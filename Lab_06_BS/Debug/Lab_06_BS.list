
Lab_06_BS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052c4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005528  08005528  0000719c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005528  08005528  00006528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005530  08005530  0000719c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005534  08005534  00006534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005538  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000005c  08005594  0000705c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000fc  08005634  000070fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000864  2000019c  080056d4  0000719c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000a00  080056d4  00007a00  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0000719c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00017662  00000000  00000000  000071ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000032ec  00000000  00000000  0001e82c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  00021b18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000efd  00000000  00000000  00022e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002a66c  00000000  00000000  00023d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018d74  00000000  00000000  0004e3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00104034  00000000  00000000  0006714d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0016b181  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005640  00000000  00000000  0016b1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000006d  00000000  00000000  00170804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000019c 	.word	0x2000019c
 800021c:	00000000 	.word	0x00000000
 8000220:	080054ac 	.word	0x080054ac

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001a0 	.word	0x200001a0
 800023c:	080054ac 	.word	0x080054ac

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000620:	4b1f      	ldr	r3, [pc, #124]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000622:	4a20      	ldr	r2, [pc, #128]	@ (80006a4 <MX_ETH_Init+0x88>)
 8000624:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000626:	4b20      	ldr	r3, [pc, #128]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800062c:	4b1e      	ldr	r3, [pc, #120]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800062e:	2280      	movs	r2, #128	@ 0x80
 8000630:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000632:	4b1d      	ldr	r3, [pc, #116]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000634:	22e1      	movs	r2, #225	@ 0xe1
 8000636:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000638:	4b1b      	ldr	r3, [pc, #108]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800063a:	2200      	movs	r2, #0
 800063c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800063e:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000640:	2200      	movs	r2, #0
 8000642:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000644:	4b18      	ldr	r3, [pc, #96]	@ (80006a8 <MX_ETH_Init+0x8c>)
 8000646:	2200      	movs	r2, #0
 8000648:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800064a:	4b15      	ldr	r3, [pc, #84]	@ (80006a0 <MX_ETH_Init+0x84>)
 800064c:	4a16      	ldr	r2, [pc, #88]	@ (80006a8 <MX_ETH_Init+0x8c>)
 800064e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000650:	4b13      	ldr	r3, [pc, #76]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000652:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000656:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000658:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_ETH_Init+0x84>)
 800065a:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <MX_ETH_Init+0x90>)
 800065c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800065e:	4b10      	ldr	r3, [pc, #64]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000660:	4a13      	ldr	r2, [pc, #76]	@ (80006b0 <MX_ETH_Init+0x94>)
 8000662:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000664:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_ETH_Init+0x84>)
 8000666:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800066a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800066c:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <MX_ETH_Init+0x84>)
 800066e:	f000 ff03 	bl	8001478 <HAL_ETH_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000678:	f000 fa28 	bl	8000acc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800067c:	2238      	movs	r2, #56	@ 0x38
 800067e:	2100      	movs	r1, #0
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000682:	f004 fa95 	bl	8004bb0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000688:	2221      	movs	r2, #33	@ 0x21
 800068a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800068c:	4b09      	ldr	r3, [pc, #36]	@ (80006b4 <MX_ETH_Init+0x98>)
 800068e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000692:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <MX_ETH_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800069a:	bf00      	nop
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200001f0 	.word	0x200001f0
 80006a4:	40028000 	.word	0x40028000
 80006a8:	200002a0 	.word	0x200002a0
 80006ac:	200000fc 	.word	0x200000fc
 80006b0:	2000005c 	.word	0x2000005c
 80006b4:	200001b8 	.word	0x200001b8

080006b8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	@ 0x38
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a4e      	ldr	r2, [pc, #312]	@ (8000810 <HAL_ETH_MspInit+0x158>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	f040 8096 	bne.w	8000808 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e8:	4b4a      	ldr	r3, [pc, #296]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80006f0:	623b      	str	r3, [r7, #32]
 80006f2:	6a3b      	ldr	r3, [r7, #32]
 80006f4:	4b47      	ldr	r3, [pc, #284]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f8:	4a46      	ldr	r2, [pc, #280]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 80006fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80006fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000700:	4b44      	ldr	r3, [pc, #272]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000704:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	4b41      	ldr	r3, [pc, #260]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800070e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000710:	4a40      	ldr	r2, [pc, #256]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000712:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000716:	6313      	str	r3, [r2, #48]	@ 0x30
 8000718:	4b3e      	ldr	r3, [pc, #248]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800071a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000720:	61bb      	str	r3, [r7, #24]
 8000722:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000724:	4b3b      	ldr	r3, [pc, #236]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000728:	4a3a      	ldr	r2, [pc, #232]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800072a:	f043 0304 	orr.w	r3, r3, #4
 800072e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000730:	4b38      	ldr	r3, [pc, #224]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000734:	f003 0304 	and.w	r3, r3, #4
 8000738:	617b      	str	r3, [r7, #20]
 800073a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073c:	4b35      	ldr	r3, [pc, #212]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800073e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000740:	4a34      	ldr	r2, [pc, #208]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6313      	str	r3, [r2, #48]	@ 0x30
 8000748:	4b32      	ldr	r3, [pc, #200]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800074a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	613b      	str	r3, [r7, #16]
 8000752:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	4b2f      	ldr	r3, [pc, #188]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000758:	4a2e      	ldr	r2, [pc, #184]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000760:	4b2c      	ldr	r3, [pc, #176]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000764:	f003 0302 	and.w	r3, r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800076c:	4b29      	ldr	r3, [pc, #164]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800076e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000770:	4a28      	ldr	r2, [pc, #160]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 8000772:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000776:	6313      	str	r3, [r2, #48]	@ 0x30
 8000778:	4b26      	ldr	r3, [pc, #152]	@ (8000814 <HAL_ETH_MspInit+0x15c>)
 800077a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000784:	2332      	movs	r3, #50	@ 0x32
 8000786:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000788:	2302      	movs	r3, #2
 800078a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	2300      	movs	r3, #0
 800078e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000790:	2303      	movs	r3, #3
 8000792:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000794:	230b      	movs	r3, #11
 8000796:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	481e      	ldr	r0, [pc, #120]	@ (8000818 <HAL_ETH_MspInit+0x160>)
 80007a0:	f001 f9b8 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007a4:	2386      	movs	r3, #134	@ 0x86
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a8:	2302      	movs	r3, #2
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b4:	230b      	movs	r3, #11
 80007b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4817      	ldr	r0, [pc, #92]	@ (800081c <HAL_ETH_MspInit+0x164>)
 80007c0:	f001 f9a8 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d6:	230b      	movs	r3, #11
 80007d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	@ (8000820 <HAL_ETH_MspInit+0x168>)
 80007e2:	f001 f997 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000800:	4619      	mov	r1, r3
 8000802:	4808      	ldr	r0, [pc, #32]	@ (8000824 <HAL_ETH_MspInit+0x16c>)
 8000804:	f001 f986 	bl	8001b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000808:	bf00      	nop
 800080a:	3738      	adds	r7, #56	@ 0x38
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40028000 	.word	0x40028000
 8000814:	40023800 	.word	0x40023800
 8000818:	40020800 	.word	0x40020800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020400 	.word	0x40020400
 8000824:	40021800 	.word	0x40021800

08000828 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	@ 0x30
 800082c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
 8000836:	605a      	str	r2, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
 800083a:	60da      	str	r2, [r3, #12]
 800083c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b47      	ldr	r3, [pc, #284]	@ (800095c <MX_GPIO_Init+0x134>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a46      	ldr	r2, [pc, #280]	@ (800095c <MX_GPIO_Init+0x134>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b44      	ldr	r3, [pc, #272]	@ (800095c <MX_GPIO_Init+0x134>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	4b41      	ldr	r3, [pc, #260]	@ (800095c <MX_GPIO_Init+0x134>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a40      	ldr	r2, [pc, #256]	@ (800095c <MX_GPIO_Init+0x134>)
 800085c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b3e      	ldr	r3, [pc, #248]	@ (800095c <MX_GPIO_Init+0x134>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b3b      	ldr	r3, [pc, #236]	@ (800095c <MX_GPIO_Init+0x134>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a3a      	ldr	r2, [pc, #232]	@ (800095c <MX_GPIO_Init+0x134>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b38      	ldr	r3, [pc, #224]	@ (800095c <MX_GPIO_Init+0x134>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000886:	4b35      	ldr	r3, [pc, #212]	@ (800095c <MX_GPIO_Init+0x134>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a34      	ldr	r2, [pc, #208]	@ (800095c <MX_GPIO_Init+0x134>)
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b32      	ldr	r3, [pc, #200]	@ (800095c <MX_GPIO_Init+0x134>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b2f      	ldr	r3, [pc, #188]	@ (800095c <MX_GPIO_Init+0x134>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a2e      	ldr	r2, [pc, #184]	@ (800095c <MX_GPIO_Init+0x134>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b2c      	ldr	r3, [pc, #176]	@ (800095c <MX_GPIO_Init+0x134>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b29      	ldr	r3, [pc, #164]	@ (800095c <MX_GPIO_Init+0x134>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a28      	ldr	r2, [pc, #160]	@ (800095c <MX_GPIO_Init+0x134>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b26      	ldr	r3, [pc, #152]	@ (800095c <MX_GPIO_Init+0x134>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d4:	4822      	ldr	r0, [pc, #136]	@ (8000960 <MX_GPIO_Init+0x138>)
 80008d6:	f001 fac9 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	4821      	ldr	r0, [pc, #132]	@ (8000964 <MX_GPIO_Init+0x13c>)
 80008e0:	f001 fac4 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	481b      	ldr	r0, [pc, #108]	@ (8000968 <MX_GPIO_Init+0x140>)
 80008fc:	f001 f90a 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000900:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4811      	ldr	r0, [pc, #68]	@ (8000960 <MX_GPIO_Init+0x138>)
 800091a:	f001 f8fb 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800091e:	2340      	movs	r3, #64	@ 0x40
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	480b      	ldr	r0, [pc, #44]	@ (8000964 <MX_GPIO_Init+0x13c>)
 8000936:	f001 f8ed 	bl	8001b14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093a:	2380      	movs	r3, #128	@ 0x80
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	4619      	mov	r1, r3
 800094c:	4805      	ldr	r0, [pc, #20]	@ (8000964 <MX_GPIO_Init+0x13c>)
 800094e:	f001 f8e1 	bl	8001b14 <HAL_GPIO_Init>

}
 8000952:	bf00      	nop
 8000954:	3730      	adds	r7, #48	@ 0x30
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800
 8000960:	40020400 	.word	0x40020400
 8000964:	40021800 	.word	0x40021800
 8000968:	40020800 	.word	0x40020800

0800096c <displayTime>:
void displayNumber(uint32_t num) {
    char buffer[20];
    int len = sprintf(buffer, "%lu\r\n", num);  // แปลงเป็น string
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, HAL_MAX_DELAY);
}
void displayTime(uint32_t min, uint32_t sec) {
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
    char buffer[20];
    sprintf(buffer, "%02lu:%02lu\r", min, sec);  // MM:SS\r
 8000976:	f107 000c 	add.w	r0, r7, #12
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	490a      	ldr	r1, [pc, #40]	@ (80009a8 <displayTime+0x3c>)
 8000980:	f004 f8f4 	bl	8004b6c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fc59 	bl	8000240 <strlen>
 800098e:	4603      	mov	r3, r0
 8000990:	b29a      	uxth	r2, r3
 8000992:	f107 010c 	add.w	r1, r7, #12
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	4804      	ldr	r0, [pc, #16]	@ (80009ac <displayTime+0x40>)
 800099c:	f003 f8e6 	bl	8003b6c <HAL_UART_Transmit>
}
 80009a0:	bf00      	nop
 80009a2:	3720      	adds	r7, #32
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	080054cc 	.word	0x080054cc
 80009ac:	2000034c 	.word	0x2000034c

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009b4:	f000 fbcd 	bl	8001152 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009b8:	f000 f818 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009bc:	f7ff ff34 	bl	8000828 <MX_GPIO_Init>
  MX_ETH_Init();
 80009c0:	f7ff fe2c 	bl	800061c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80009c4:	f000 fa64 	bl	8000e90 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009c8:	f000 faf2 	bl	8000fb0 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 80009cc:	f000 f97e 	bl	8000ccc <MX_TIM1_Init>
  MX_TIM2_Init();
 80009d0:	f000 f9d0 	bl	8000d74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80009d4:	4803      	ldr	r0, [pc, #12]	@ (80009e4 <main+0x34>)
 80009d6:	f002 fd6b 	bl	80034b0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80009da:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <main+0x38>)
 80009dc:	f002 fd68 	bl	80034b0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <main+0x30>
 80009e4:	200002b4 	.word	0x200002b4
 80009e8:	20000300 	.word	0x20000300

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b094      	sub	sp, #80	@ 0x50
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	2234      	movs	r2, #52	@ 0x34
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 f8d8 	bl	8004bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a10:	f001 fb9a 	bl	8002148 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <SystemClock_Config+0xd8>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ac4 <SystemClock_Config+0xd8>)
 8000a1a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a20:	4b28      	ldr	r3, [pc, #160]	@ (8000ac4 <SystemClock_Config+0xd8>)
 8000a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a2c:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <SystemClock_Config+0xdc>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a25      	ldr	r2, [pc, #148]	@ (8000ac8 <SystemClock_Config+0xdc>)
 8000a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b23      	ldr	r3, [pc, #140]	@ (8000ac8 <SystemClock_Config+0xdc>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a48:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a5c:	23d8      	movs	r3, #216	@ 0xd8
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a64:	2309      	movs	r3, #9
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fbc9 	bl	8002208 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a7c:	f000 f826 	bl	8000acc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a80:	f001 fb72 	bl	8002168 <HAL_PWREx_EnableOverDrive>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a8a:	f000 f81f 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	230f      	movs	r3, #15
 8000a90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a9a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	2107      	movs	r1, #7
 8000aac:	4618      	mov	r0, r3
 8000aae:	f001 fe59 	bl	8002764 <HAL_RCC_ClockConfig>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ab8:	f000 f808 	bl	8000acc <Error_Handler>
  }
}
 8000abc:	bf00      	nop
 8000abe:	3750      	adds	r7, #80	@ 0x50
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40007000 	.word	0x40007000

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae2:	4a0e      	ldr	r2, [pc, #56]	@ (8000b1c <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aea:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <HAL_MspInit+0x44>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <HAL_MspInit+0x44>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a08      	ldr	r2, [pc, #32]	@ (8000b1c <HAL_MspInit+0x44>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <HAL_MspInit+0x44>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40023800 	.word	0x40023800

08000b20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <NMI_Handler+0x4>

08000b28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <HardFault_Handler+0x4>

08000b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <MemManage_Handler+0x4>

08000b38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <BusFault_Handler+0x4>

08000b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <UsageFault_Handler+0x4>

08000b48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr

08000b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b76:	f000 fb29 	bl	80011cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET) {
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	691b      	ldr	r3, [r3, #16]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d11c      	bne.n	8000bcc <TIM1_UP_TIM10_IRQHandler+0x4c>
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_UPDATE) != RESET) {
 8000b92:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d115      	bne.n	8000bcc <TIM1_UP_TIM10_IRQHandler+0x4c>
			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x58>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f06f 0201 	mvn.w	r2, #1
 8000ba8:	611a      	str	r2, [r3, #16]

			second++;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000bb2:	6013      	str	r3, [r2, #0]
			if (second >= 60) {
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b3b      	cmp	r3, #59	@ 0x3b
 8000bba:	d907      	bls.n	8000bcc <TIM1_UP_TIM10_IRQHandler+0x4c>
				second = 0;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	601a      	str	r2, [r3, #0]
				minute++;
 8000bc2:	4b07      	ldr	r3, [pc, #28]	@ (8000be0 <TIM1_UP_TIM10_IRQHandler+0x60>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <TIM1_UP_TIM10_IRQHandler+0x60>)
 8000bca:	6013      	str	r3, [r2, #0]
			}
		}
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	200002b4 	.word	0x200002b4
 8000bdc:	200002a8 	.word	0x200002a8
 8000be0:	200002ac 	.word	0x200002ac

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  //HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 8000be8:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <TIM2_IRQHandler+0x48>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	691b      	ldr	r3, [r3, #16]
 8000bee:	f003 0301 	and.w	r3, r3, #1
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d117      	bne.n	8000c26 <TIM2_IRQHandler+0x42>
  		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 8000bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c2c <TIM2_IRQHandler+0x48>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f003 0301 	and.w	r3, r3, #1
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d110      	bne.n	8000c26 <TIM2_IRQHandler+0x42>
  			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 8000c04:	4b09      	ldr	r3, [pc, #36]	@ (8000c2c <TIM2_IRQHandler+0x48>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f06f 0201 	mvn.w	r2, #1
 8000c0c:	611a      	str	r2, [r3, #16]

  			extern void displayTime(uint32_t, uint32_t);
  			displayTime(minute, second);
 8000c0e:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <TIM2_IRQHandler+0x4c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a08      	ldr	r2, [pc, #32]	@ (8000c34 <TIM2_IRQHandler+0x50>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fea7 	bl	800096c <displayTime>
  			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000c1e:	2180      	movs	r1, #128	@ 0x80
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <TIM2_IRQHandler+0x54>)
 8000c22:	f001 f93c 	bl	8001e9e <HAL_GPIO_TogglePin>
  		}
  	}
  /* USER CODE END TIM2_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000300 	.word	0x20000300
 8000c30:	200002ac 	.word	0x200002ac
 8000c34:	200002a8 	.word	0x200002a8
 8000c38:	40020400 	.word	0x40020400

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	@ (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	@ (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	@ (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f003 ffa8 	bl	8004bc0 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	@ (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20080000 	.word	0x20080000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	200002b0 	.word	0x200002b0
 8000ca4:	20000a00 	.word	0x20000a00

08000ca8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	@ (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd2:	f107 0310 	add.w	r3, r7, #16
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cea:	4b20      	ldr	r3, [pc, #128]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000cec:	4a20      	ldr	r2, [pc, #128]	@ (8000d70 <MX_TIM1_Init+0xa4>)
 8000cee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 8000cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000cf2:	f245 425f 	movw	r2, #21599	@ 0x545f
 8000cf6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d00:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d06:	4b19      	ldr	r3, [pc, #100]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d0c:	4b17      	ldr	r3, [pc, #92]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d12:	4b16      	ldr	r3, [pc, #88]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d18:	4814      	ldr	r0, [pc, #80]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d1a:	f002 fb71 	bl	8003400 <HAL_TIM_Base_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000d24:	f7ff fed2 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d2e:	f107 0310 	add.w	r3, r7, #16
 8000d32:	4619      	mov	r1, r3
 8000d34:	480d      	ldr	r0, [pc, #52]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d36:	f002 fc33 	bl	80035a0 <HAL_TIM_ConfigClockSource>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d40:	f7ff fec4 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d44:	2300      	movs	r3, #0
 8000d46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d50:	1d3b      	adds	r3, r7, #4
 8000d52:	4619      	mov	r1, r3
 8000d54:	4805      	ldr	r0, [pc, #20]	@ (8000d6c <MX_TIM1_Init+0xa0>)
 8000d56:	f002 fe2d 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d60:	f7ff feb4 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	3720      	adds	r7, #32
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	200002b4 	.word	0x200002b4
 8000d70:	40010000 	.word	0x40010000

08000d74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d7a:	f107 0310 	add.w	r3, r7, #16
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	605a      	str	r2, [r3, #4]
 8000d90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d92:	4b1d      	ldr	r3, [pc, #116]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000d94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 8000d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000d9c:	226b      	movs	r2, #107	@ 0x6b
 8000d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400000-1;
 8000da6:	4b18      	ldr	r3, [pc, #96]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000da8:	4a18      	ldr	r2, [pc, #96]	@ (8000e0c <MX_TIM2_Init+0x98>)
 8000daa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db8:	4813      	ldr	r0, [pc, #76]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000dba:	f002 fb21 	bl	8003400 <HAL_TIM_Base_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dc4:	f7ff fe82 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000dd6:	f002 fbe3 	bl	80035a0 <HAL_TIM_ConfigClockSource>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000de0:	f7ff fe74 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4619      	mov	r1, r3
 8000df0:	4805      	ldr	r0, [pc, #20]	@ (8000e08 <MX_TIM2_Init+0x94>)
 8000df2:	f002 fddf 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dfc:	f7ff fe66 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000300 	.word	0x20000300
 8000e0c:	00061a7f 	.word	0x00061a7f

08000e10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8000e88 <HAL_TIM_Base_MspInit+0x78>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d114      	bne.n	8000e4c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2e:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2019      	movs	r0, #25
 8000e40:	f000 fae3 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e44:	2019      	movs	r0, #25
 8000e46:	f000 fafc 	bl	8001442 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e4a:	e018      	b.n	8000e7e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e54:	d113      	bne.n	8000e7e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_TIM_Base_MspInit+0x7c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2102      	movs	r1, #2
 8000e72:	201c      	movs	r0, #28
 8000e74:	f000 fac9 	bl	800140a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e78:	201c      	movs	r0, #28
 8000e7a:	f000 fae2 	bl	8001442 <HAL_NVIC_EnableIRQ>
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40023800 	.word	0x40023800

08000e90 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000e96:	4a15      	ldr	r2, [pc, #84]	@ (8000eec <MX_USART3_UART_Init+0x5c>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b11      	ldr	r3, [pc, #68]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ec6:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_USART3_UART_Init+0x58>)
 8000ed4:	f002 fdfc 	bl	8003ad0 <HAL_UART_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ede:	f7ff fdf5 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000034c 	.word	0x2000034c
 8000eec:	40004800 	.word	0x40004800

08000ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	@ 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0314 	add.w	r3, r7, #20
 8000f0c:	2290      	movs	r2, #144	@ 0x90
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fe4d 	bl	8004bb0 <memset>
  if(uartHandle->Instance==USART3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a22      	ldr	r2, [pc, #136]	@ (8000fa4 <HAL_UART_MspInit+0xb4>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d13c      	bne.n	8000f9a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f24:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 0314 	add.w	r3, r7, #20
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 fe3e 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f3a:	f7ff fdc7 	bl	8000acc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f42:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f56:	4b14      	ldr	r3, [pc, #80]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a13      	ldr	r2, [pc, #76]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_UART_MspInit+0xb8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f82:	2303      	movs	r3, #3
 8000f84:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000f92:	4619      	mov	r1, r3
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <HAL_UART_MspInit+0xbc>)
 8000f96:	f000 fdbd 	bl	8001b14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	37b8      	adds	r7, #184	@ 0xb8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40004800 	.word	0x40004800
 8000fa8:	40023800 	.word	0x40023800
 8000fac:	40020c00 	.word	0x40020c00

08000fb0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000fba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fbe:	2206      	movs	r2, #6
 8000fc0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fce:	4b0e      	ldr	r3, [pc, #56]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fe0:	4b09      	ldr	r3, [pc, #36]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fec:	4b06      	ldr	r3, [pc, #24]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000ff2:	4805      	ldr	r0, [pc, #20]	@ (8001008 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ff4:	f000 ff6d 	bl	8001ed2 <HAL_PCD_Init>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000ffe:	f7ff fd65 	bl	8000acc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200003d4 	.word	0x200003d4

0800100c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ae      	sub	sp, #184	@ 0xb8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2290      	movs	r2, #144	@ 0x90
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f003 fdbf 	bl	8004bb0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800103a:	d159      	bne.n	80010f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800103c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001040:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fdaf 	bl	8002bb0 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001058:	f7ff fd38 	bl	8000acc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001060:	4a25      	ldr	r2, [pc, #148]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6313      	str	r3, [r2, #48]	@ 0x30
 8001068:	4b23      	ldr	r3, [pc, #140]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001074:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800108e:	230a      	movs	r3, #10
 8001090:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	@ (80010fc <HAL_PCD_MspInit+0xf0>)
 800109c:	f000 fd3a 	bl	8001b14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4810      	ldr	r0, [pc, #64]	@ (80010fc <HAL_PCD_MspInit+0xf0>)
 80010bc:	f000 fd2a 	bl	8001b14 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c4:	4a0c      	ldr	r2, [pc, #48]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80010cc:	4b0a      	ldr	r3, [pc, #40]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010dc:	4a06      	ldr	r2, [pc, #24]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e4:	4b04      	ldr	r3, [pc, #16]	@ (80010f8 <HAL_PCD_MspInit+0xec>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010f0:	bf00      	nop
 80010f2:	37b8      	adds	r7, #184	@ 0xb8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001138 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001104:	f7ff fdd0 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	@ (800113c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	@ (8001140 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	@ (8001144 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	@ (8001148 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	@ (800114c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 fd4d 	bl	8004bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001132:	f7ff fc3d 	bl	80009b0 <main>
  bx  lr    
 8001136:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001138:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001144:	08005538 	.word	0x08005538
  ldr r2, =_sbss
 8001148:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 800114c:	20000a00 	.word	0x20000a00

08001150 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC_IRQHandler>

08001152 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001156:	2003      	movs	r0, #3
 8001158:	f000 f94c 	bl	80013f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115c:	2000      	movs	r0, #0
 800115e:	f000 f805 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001162:	f7ff fcb9 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001174:	4b12      	ldr	r3, [pc, #72]	@ (80011c0 <HAL_InitTick+0x54>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b12      	ldr	r3, [pc, #72]	@ (80011c4 <HAL_InitTick+0x58>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001182:	fbb3 f3f1 	udiv	r3, r3, r1
 8001186:	fbb2 f3f3 	udiv	r3, r2, r3
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f967 	bl	800145e <HAL_SYSTICK_Config>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00e      	b.n	80011b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d80a      	bhi.n	80011b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	f04f 30ff 	mov.w	r0, #4294967295
 80011a8:	f000 f92f 	bl	800140a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011ac:	4a06      	ldr	r2, [pc, #24]	@ (80011c8 <HAL_InitTick+0x5c>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
 80011b4:	e000      	b.n	80011b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000000 	.word	0x20000000
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000004 	.word	0x20000004

080011cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d0:	4b06      	ldr	r3, [pc, #24]	@ (80011ec <HAL_IncTick+0x20>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_IncTick+0x24>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <HAL_IncTick+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	200008b4 	.word	0x200008b4

080011f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b03      	ldr	r3, [pc, #12]	@ (8001208 <HAL_GetTick+0x14>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	200008b4 	.word	0x200008b4

0800120c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001214:	f7ff ffee 	bl	80011f4 <HAL_GetTick>
 8001218:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d005      	beq.n	8001232 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001226:	4b0a      	ldr	r3, [pc, #40]	@ (8001250 <HAL_Delay+0x44>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	4413      	add	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001232:	bf00      	nop
 8001234:	f7ff ffde 	bl	80011f4 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	429a      	cmp	r2, r3
 8001242:	d8f7      	bhi.n	8001234 <HAL_Delay+0x28>
  {
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000008 	.word	0x20000008

08001254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001270:	4013      	ands	r3, r2
 8001272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	4313      	orrs	r3, r2
 8001280:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001282:	4a04      	ldr	r2, [pc, #16]	@ (8001294 <__NVIC_SetPriorityGrouping+0x40>)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	60d3      	str	r3, [r2, #12]
}
 8001288:	bf00      	nop
 800128a:	3714      	adds	r7, #20
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000ed00 	.word	0xe000ed00
 8001298:	05fa0000 	.word	0x05fa0000

0800129c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a0:	4b04      	ldr	r3, [pc, #16]	@ (80012b4 <__NVIC_GetPriorityGrouping+0x18>)
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	f003 0307 	and.w	r3, r3, #7
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db0b      	blt.n	80012e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	f003 021f 	and.w	r2, r3, #31
 80012d0:	4907      	ldr	r1, [pc, #28]	@ (80012f0 <__NVIC_EnableIRQ+0x38>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	095b      	lsrs	r3, r3, #5
 80012d8:	2001      	movs	r0, #1
 80012da:	fa00 f202 	lsl.w	r2, r0, r2
 80012de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000e100 	.word	0xe000e100

080012f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	6039      	str	r1, [r7, #0]
 80012fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001304:	2b00      	cmp	r3, #0
 8001306:	db0a      	blt.n	800131e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	b2da      	uxtb	r2, r3
 800130c:	490c      	ldr	r1, [pc, #48]	@ (8001340 <__NVIC_SetPriority+0x4c>)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	0112      	lsls	r2, r2, #4
 8001314:	b2d2      	uxtb	r2, r2
 8001316:	440b      	add	r3, r1
 8001318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800131c:	e00a      	b.n	8001334 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4908      	ldr	r1, [pc, #32]	@ (8001344 <__NVIC_SetPriority+0x50>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	f003 030f 	and.w	r3, r3, #15
 800132a:	3b04      	subs	r3, #4
 800132c:	0112      	lsls	r2, r2, #4
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	440b      	add	r3, r1
 8001332:	761a      	strb	r2, [r3, #24]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000e100 	.word	0xe000e100
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f1c3 0307 	rsb	r3, r3, #7
 8001362:	2b04      	cmp	r3, #4
 8001364:	bf28      	it	cs
 8001366:	2304      	movcs	r3, #4
 8001368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	3304      	adds	r3, #4
 800136e:	2b06      	cmp	r3, #6
 8001370:	d902      	bls.n	8001378 <NVIC_EncodePriority+0x30>
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3b03      	subs	r3, #3
 8001376:	e000      	b.n	800137a <NVIC_EncodePriority+0x32>
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	f04f 32ff 	mov.w	r2, #4294967295
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43da      	mvns	r2, r3
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	401a      	ands	r2, r3
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	fa01 f303 	lsl.w	r3, r1, r3
 800139a:	43d9      	mvns	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	4313      	orrs	r3, r2
         );
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3724      	adds	r7, #36	@ 0x24
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c0:	d301      	bcc.n	80013c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00f      	b.n	80013e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <SysTick_Config+0x40>)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ce:	210f      	movs	r1, #15
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f7ff ff8e 	bl	80012f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d8:	4b05      	ldr	r3, [pc, #20]	@ (80013f0 <SysTick_Config+0x40>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013de:	4b04      	ldr	r3, [pc, #16]	@ (80013f0 <SysTick_Config+0x40>)
 80013e0:	2207      	movs	r2, #7
 80013e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	e000e010 	.word	0xe000e010

080013f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff29 	bl	8001254 <__NVIC_SetPriorityGrouping>
}
 8001402:	bf00      	nop
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
 8001416:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800141c:	f7ff ff3e 	bl	800129c <__NVIC_GetPriorityGrouping>
 8001420:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	68b9      	ldr	r1, [r7, #8]
 8001426:	6978      	ldr	r0, [r7, #20]
 8001428:	f7ff ff8e 	bl	8001348 <NVIC_EncodePriority>
 800142c:	4602      	mov	r2, r0
 800142e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001432:	4611      	mov	r1, r2
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff5d 	bl	80012f4 <__NVIC_SetPriority>
}
 800143a:	bf00      	nop
 800143c:	3718      	adds	r7, #24
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff31 	bl	80012b8 <__NVIC_EnableIRQ>
}
 8001456:	bf00      	nop
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b082      	sub	sp, #8
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff ffa2 	bl	80013b0 <SysTick_Config>
 800146c:	4603      	mov	r3, r0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e086      	b.n	8001598 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff f90b 	bl	80006b8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	4b3f      	ldr	r3, [pc, #252]	@ (80015a0 <HAL_ETH_Init+0x128>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	4a3e      	ldr	r2, [pc, #248]	@ (80015a0 <HAL_ETH_Init+0x128>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ae:	4b3c      	ldr	r3, [pc, #240]	@ (80015a0 <HAL_ETH_Init+0x128>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014ba:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <HAL_ETH_Init+0x12c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a39      	ldr	r2, [pc, #228]	@ (80015a4 <HAL_ETH_Init+0x12c>)
 80014c0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014c4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014c6:	4b37      	ldr	r3, [pc, #220]	@ (80015a4 <HAL_ETH_Init+0x12c>)
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	4935      	ldr	r1, [pc, #212]	@ (80015a4 <HAL_ETH_Init+0x12c>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014d4:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <HAL_ETH_Init+0x12c>)
 80014d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	f043 0301 	orr.w	r3, r3, #1
 80014ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f0:	f7ff fe80 	bl	80011f4 <HAL_GetTick>
 80014f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80014f6:	e011      	b.n	800151c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80014f8:	f7ff fe7c 	bl	80011f4 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001506:	d909      	bls.n	800151c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2204      	movs	r2, #4
 800150c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	22e0      	movs	r2, #224	@ 0xe0
 8001514:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e03d      	b.n	8001598 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e4      	bne.n	80014f8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f000 f97a 	bl	8001828 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fa25 	bl	8001984 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fa7b 	bl	8001a36 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	461a      	mov	r2, r3
 8001546:	2100      	movs	r1, #0
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f9e3 	bl	8001914 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_ETH_Init+0x130>)
 800156c:	430b      	orrs	r3, r1
 800156e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8001582:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2210      	movs	r2, #16
 8001592:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001596:	2300      	movs	r3, #0
}
 8001598:	4618      	mov	r0, r3
 800159a:	3710      	adds	r7, #16
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40013800 	.word	0x40013800
 80015a8:	00020060 	.word	0x00020060

080015ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	4b53      	ldr	r3, [pc, #332]	@ (8001710 <ETH_SetMACConfig+0x164>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	7b9b      	ldrb	r3, [r3, #14]
 80015ca:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	7c12      	ldrb	r2, [r2, #16]
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	d102      	bne.n	80015da <ETH_SetMACConfig+0x2e>
 80015d4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015d8:	e000      	b.n	80015dc <ETH_SetMACConfig+0x30>
 80015da:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015dc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	7c52      	ldrb	r2, [r2, #17]
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d102      	bne.n	80015ec <ETH_SetMACConfig+0x40>
 80015e6:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015ea:	e000      	b.n	80015ee <ETH_SetMACConfig+0x42>
 80015ec:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ee:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015f4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7fdb      	ldrb	r3, [r3, #31]
 80015fa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015fc:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001602:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	7f92      	ldrb	r2, [r2, #30]
 8001608:	2a00      	cmp	r2, #0
 800160a:	d102      	bne.n	8001612 <ETH_SetMACConfig+0x66>
 800160c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001610:	e000      	b.n	8001614 <ETH_SetMACConfig+0x68>
 8001612:	2200      	movs	r2, #0
                        macconf->Speed |
 8001614:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	7f1b      	ldrb	r3, [r3, #28]
 800161a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800161c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001622:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	791b      	ldrb	r3, [r3, #4]
 8001628:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800162a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001632:	2a00      	cmp	r2, #0
 8001634:	d102      	bne.n	800163c <ETH_SetMACConfig+0x90>
 8001636:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800163a:	e000      	b.n	800163e <ETH_SetMACConfig+0x92>
 800163c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800163e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	7bdb      	ldrb	r3, [r3, #15]
 8001644:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001646:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800164c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001654:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001656:	4313      	orrs	r3, r2
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4313      	orrs	r3, r2
 800165c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800166e:	2001      	movs	r0, #1
 8001670:	f7ff fdcc 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800168a:	4013      	ands	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001692:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001694:	683a      	ldr	r2, [r7, #0]
 8001696:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800169a:	2a00      	cmp	r2, #0
 800169c:	d101      	bne.n	80016a2 <ETH_SetMACConfig+0xf6>
 800169e:	2280      	movs	r2, #128	@ 0x80
 80016a0:	e000      	b.n	80016a4 <ETH_SetMACConfig+0xf8>
 80016a2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016b2:	2a01      	cmp	r2, #1
 80016b4:	d101      	bne.n	80016ba <ETH_SetMACConfig+0x10e>
 80016b6:	2208      	movs	r2, #8
 80016b8:	e000      	b.n	80016bc <ETH_SetMACConfig+0x110>
 80016ba:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016bc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016be:	683a      	ldr	r2, [r7, #0]
 80016c0:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80016c4:	2a01      	cmp	r2, #1
 80016c6:	d101      	bne.n	80016cc <ETH_SetMACConfig+0x120>
 80016c8:	2204      	movs	r2, #4
 80016ca:	e000      	b.n	80016ce <ETH_SetMACConfig+0x122>
 80016cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80016d6:	2a01      	cmp	r2, #1
 80016d8:	d101      	bne.n	80016de <ETH_SetMACConfig+0x132>
 80016da:	2202      	movs	r2, #2
 80016dc:	e000      	b.n	80016e0 <ETH_SetMACConfig+0x134>
 80016de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016e0:	4313      	orrs	r3, r2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f7ff fd87 	bl	800120c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	fd20810f 	.word	0xfd20810f

08001714 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001726:	699b      	ldr	r3, [r3, #24]
 8001728:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800172a:	68fa      	ldr	r2, [r7, #12]
 800172c:	4b3d      	ldr	r3, [pc, #244]	@ (8001824 <ETH_SetDMAConfig+0x110>)
 800172e:	4013      	ands	r3, r2
 8001730:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	7b1b      	ldrb	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <ETH_SetDMAConfig+0x2c>
 800173a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800173e:	e000      	b.n	8001742 <ETH_SetDMAConfig+0x2e>
 8001740:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	7b5b      	ldrb	r3, [r3, #13]
 8001746:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001748:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	7f52      	ldrb	r2, [r2, #29]
 800174e:	2a00      	cmp	r2, #0
 8001750:	d102      	bne.n	8001758 <ETH_SetDMAConfig+0x44>
 8001752:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001756:	e000      	b.n	800175a <ETH_SetDMAConfig+0x46>
 8001758:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800175a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	7b9b      	ldrb	r3, [r3, #14]
 8001760:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001762:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001768:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	7f1b      	ldrb	r3, [r3, #28]
 800176e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001770:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	7f9b      	ldrb	r3, [r3, #30]
 8001776:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001778:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800177e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001786:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001788:	4313      	orrs	r3, r2
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4313      	orrs	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001798:	461a      	mov	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017aa:	2001      	movs	r0, #1
 80017ac:	f7ff fd2e 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b8:	461a      	mov	r2, r3
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	791b      	ldrb	r3, [r3, #4]
 80017c2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017c8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017ce:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017d4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017dc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017de:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017e6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017ec:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	6812      	ldr	r2, [r2, #0]
 80017f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017fa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff fcff 	bl	800120c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001816:	461a      	mov	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	bf00      	nop
 800181e:	3710      	adds	r7, #16
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	f8de3f23 	.word	0xf8de3f23

08001828 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b0a6      	sub	sp, #152	@ 0x98
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001830:	2301      	movs	r3, #1
 8001832:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001836:	2301      	movs	r3, #1
 8001838:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800183c:	2300      	movs	r3, #0
 800183e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001840:	2300      	movs	r3, #0
 8001842:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001846:	2301      	movs	r3, #1
 8001848:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001852:	2301      	movs	r3, #1
 8001854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001864:	2300      	movs	r3, #0
 8001866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800186a:	2300      	movs	r3, #0
 800186c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001874:	2300      	movs	r3, #0
 8001876:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800187e:	2300      	movs	r3, #0
 8001880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001890:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001894:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001896:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018a2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018a6:	4619      	mov	r1, r3
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff fe7f 	bl	80015ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018ae:	2301      	movs	r3, #1
 80018b0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018b2:	2301      	movs	r3, #1
 80018b4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018b6:	2301      	movs	r3, #1
 80018b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018bc:	2301      	movs	r3, #1
 80018be:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018e8:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018ee:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018fe:	f107 0308 	add.w	r3, r7, #8
 8001902:	4619      	mov	r1, r3
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff05 	bl	8001714 <ETH_SetDMAConfig>
}
 800190a:	bf00      	nop
 800190c:	3798      	adds	r7, #152	@ 0x98
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3305      	adds	r3, #5
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	021b      	lsls	r3, r3, #8
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	3204      	adds	r2, #4
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	4313      	orrs	r3, r2
 8001930:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001932:	68ba      	ldr	r2, [r7, #8]
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <ETH_MACAddressConfig+0x68>)
 8001936:	4413      	add	r3, r2
 8001938:	461a      	mov	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3303      	adds	r3, #3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	061a      	lsls	r2, r3, #24
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	3302      	adds	r3, #2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	041b      	lsls	r3, r3, #16
 800194e:	431a      	orrs	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3301      	adds	r3, #1
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	021b      	lsls	r3, r3, #8
 8001958:	4313      	orrs	r3, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	7812      	ldrb	r2, [r2, #0]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001962:	68ba      	ldr	r2, [r7, #8]
 8001964:	4b06      	ldr	r3, [pc, #24]	@ (8001980 <ETH_MACAddressConfig+0x6c>)
 8001966:	4413      	add	r3, r2
 8001968:	461a      	mov	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40028040 	.word	0x40028040
 8001980:	40028044 	.word	0x40028044

08001984 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e03e      	b.n	8001a10 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68d9      	ldr	r1, [r3, #12]
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	2200      	movs	r2, #0
 80019ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	3206      	adds	r2, #6
 80019c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d80c      	bhi.n	80019f4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68d9      	ldr	r1, [r3, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	4613      	mov	r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	4413      	add	r3, r2
 80019e8:	00db      	lsls	r3, r3, #3
 80019ea:	440b      	add	r3, r1
 80019ec:	461a      	mov	r2, r3
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	e004      	b.n	80019fe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	461a      	mov	r2, r3
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b03      	cmp	r3, #3
 8001a14:	d9bd      	bls.n	8001992 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a28:	611a      	str	r2, [r3, #16]
}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	e048      	b.n	8001ad6 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6919      	ldr	r1, [r3, #16]
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	440b      	add	r3, r1
 8001a54:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	2200      	movs	r2, #0
 8001a72:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2200      	movs	r2, #0
 8001a78:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a80:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	3212      	adds	r2, #18
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d80c      	bhi.n	8001ac6 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6919      	ldr	r1, [r3, #16]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	009b      	lsls	r3, r3, #2
 8001ab8:	4413      	add	r3, r2
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	440b      	add	r3, r1
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
 8001ac4:	e004      	b.n	8001ad0 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	461a      	mov	r2, r3
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d9b3      	bls.n	8001a44 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e175      	b.n	8001e20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8164 	bne.w	8001e1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x56>
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80be 	beq.w	8001e1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	4b66      	ldr	r3, [pc, #408]	@ (8001e38 <HAL_GPIO_Init+0x324>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca2:	4a65      	ldr	r2, [pc, #404]	@ (8001e38 <HAL_GPIO_Init+0x324>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001caa:	4b63      	ldr	r3, [pc, #396]	@ (8001e38 <HAL_GPIO_Init+0x324>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cb6:	4a61      	ldr	r2, [pc, #388]	@ (8001e3c <HAL_GPIO_Init+0x328>)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	220f      	movs	r2, #15
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a58      	ldr	r2, [pc, #352]	@ (8001e40 <HAL_GPIO_Init+0x32c>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d037      	beq.n	8001d52 <HAL_GPIO_Init+0x23e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a57      	ldr	r2, [pc, #348]	@ (8001e44 <HAL_GPIO_Init+0x330>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d031      	beq.n	8001d4e <HAL_GPIO_Init+0x23a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a56      	ldr	r2, [pc, #344]	@ (8001e48 <HAL_GPIO_Init+0x334>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d02b      	beq.n	8001d4a <HAL_GPIO_Init+0x236>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a55      	ldr	r2, [pc, #340]	@ (8001e4c <HAL_GPIO_Init+0x338>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d025      	beq.n	8001d46 <HAL_GPIO_Init+0x232>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a54      	ldr	r2, [pc, #336]	@ (8001e50 <HAL_GPIO_Init+0x33c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d01f      	beq.n	8001d42 <HAL_GPIO_Init+0x22e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a53      	ldr	r2, [pc, #332]	@ (8001e54 <HAL_GPIO_Init+0x340>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d019      	beq.n	8001d3e <HAL_GPIO_Init+0x22a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	@ (8001e58 <HAL_GPIO_Init+0x344>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a51      	ldr	r2, [pc, #324]	@ (8001e5c <HAL_GPIO_Init+0x348>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00d      	beq.n	8001d36 <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a50      	ldr	r2, [pc, #320]	@ (8001e60 <HAL_GPIO_Init+0x34c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <HAL_GPIO_Init+0x350>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d101      	bne.n	8001d2e <HAL_GPIO_Init+0x21a>
 8001d2a:	2309      	movs	r3, #9
 8001d2c:	e012      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d2e:	230a      	movs	r3, #10
 8001d30:	e010      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d32:	2308      	movs	r3, #8
 8001d34:	e00e      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d36:	2307      	movs	r3, #7
 8001d38:	e00c      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d3a:	2306      	movs	r3, #6
 8001d3c:	e00a      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d3e:	2305      	movs	r3, #5
 8001d40:	e008      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d42:	2304      	movs	r3, #4
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d46:	2303      	movs	r3, #3
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x240>
 8001d52:	2300      	movs	r3, #0
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	f002 0203 	and.w	r2, r2, #3
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	@ (8001e3c <HAL_GPIO_Init+0x328>)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d72:	4b3d      	ldr	r3, [pc, #244]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d96:	4a34      	ldr	r2, [pc, #208]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	4b32      	ldr	r3, [pc, #200]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc0:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dea:	4a1f      	ldr	r2, [pc, #124]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e14:	4a14      	ldr	r2, [pc, #80]	@ (8001e68 <HAL_GPIO_Init+0x354>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	61fb      	str	r3, [r7, #28]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b0f      	cmp	r3, #15
 8001e24:	f67f ae86 	bls.w	8001b34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3724      	adds	r7, #36	@ 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40013800 	.word	0x40013800
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	40020c00 	.word	0x40020c00
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40021400 	.word	0x40021400
 8001e58:	40021800 	.word	0x40021800
 8001e5c:	40021c00 	.word	0x40021c00
 8001e60:	40022000 	.word	0x40022000
 8001e64:	40022400 	.word	0x40022400
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr

08001e9e <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b085      	sub	sp, #20
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb0:	887a      	ldrh	r2, [r7, #2]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	041a      	lsls	r2, r3, #16
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	43d9      	mvns	r1, r3
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	400b      	ands	r3, r1
 8001ec0:	431a      	orrs	r2, r3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af02      	add	r7, sp, #8
 8001ed8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e108      	b.n	80020f6 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d106      	bne.n	8001f04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff f884 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f12:	d102      	bne.n	8001f1a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fb88 	bl	8004634 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7c1a      	ldrb	r2, [r3, #16]
 8001f2c:	f88d 2000 	strb.w	r2, [sp]
 8001f30:	3304      	adds	r3, #4
 8001f32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f34:	f002 fb24 	bl	8004580 <USB_CoreInit>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d005      	beq.n	8001f4a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2202      	movs	r2, #2
 8001f42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0d5      	b.n	80020f6 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 fb80 	bl	8004656 <USB_SetCurrentMode>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d005      	beq.n	8001f68 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e0c6      	b.n	80020f6 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e04a      	b.n	8002004 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f6e:	7bfa      	ldrb	r2, [r7, #15]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3315      	adds	r3, #21
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	3314      	adds	r3, #20
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	7bfb      	ldrb	r3, [r7, #15]
 8001f9a:	b298      	uxth	r0, r3
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4413      	add	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	332e      	adds	r3, #46	@ 0x2e
 8001faa:	4602      	mov	r2, r0
 8001fac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fae:	7bfa      	ldrb	r2, [r7, #15]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3318      	adds	r3, #24
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc2:	7bfa      	ldrb	r2, [r7, #15]
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	331c      	adds	r3, #28
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3320      	adds	r3, #32
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3324      	adds	r3, #36	@ 0x24
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
 8002000:	3301      	adds	r3, #1
 8002002:	73fb      	strb	r3, [r7, #15]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	7bfa      	ldrb	r2, [r7, #15]
 800200a:	429a      	cmp	r2, r3
 800200c:	d3af      	bcc.n	8001f6e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	2300      	movs	r3, #0
 8002010:	73fb      	strb	r3, [r7, #15]
 8002012:	e044      	b.n	800209e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4413      	add	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	00db      	lsls	r3, r3, #3
 8002074:	4413      	add	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	3301      	adds	r3, #1
 800209c:	73fb      	strb	r3, [r7, #15]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	791b      	ldrb	r3, [r3, #4]
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d3b5      	bcc.n	8002014 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	7c1a      	ldrb	r2, [r3, #16]
 80020b0:	f88d 2000 	strb.w	r2, [sp]
 80020b4:	3304      	adds	r3, #4
 80020b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020b8:	f002 fb1a 	bl	80046f0 <USB_DevInit>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2202      	movs	r2, #2
 80020c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e013      	b.n	80020f6 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7b1b      	ldrb	r3, [r3, #12]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d102      	bne.n	80020ea <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f80b 	bl	8002100 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f002 fcd5 	bl	8004a9e <USB_DevDisconnect>

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800212e:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_PCDEx_ActivateLPM+0x44>)
 8002130:	4313      	orrs	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	10000003 	.word	0x10000003

08002148 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a04      	ldr	r2, [pc, #16]	@ (8002164 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]
}
 8002158:	bf00      	nop
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	4b23      	ldr	r3, [pc, #140]	@ (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002176:	4a22      	ldr	r2, [pc, #136]	@ (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002178:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217c:	6413      	str	r3, [r2, #64]	@ 0x40
 800217e:	4b20      	ldr	r3, [pc, #128]	@ (8002200 <HAL_PWREx_EnableOverDrive+0x98>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800218a:	4b1e      	ldr	r3, [pc, #120]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1d      	ldr	r2, [pc, #116]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002196:	f7ff f82d 	bl	80011f4 <HAL_GetTick>
 800219a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800219c:	e009      	b.n	80021b2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800219e:	f7ff f829 	bl	80011f4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021ac:	d901      	bls.n	80021b2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e022      	b.n	80021f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021be:	d1ee      	bne.n	800219e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021cc:	f7ff f812 	bl	80011f4 <HAL_GetTick>
 80021d0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021d2:	e009      	b.n	80021e8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021d4:	f7ff f80e 	bl	80011f4 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021e2:	d901      	bls.n	80021e8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e007      	b.n	80021f8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021e8:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_PWREx_EnableOverDrive+0x9c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80021f4:	d1ee      	bne.n	80021d4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000

08002208 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e29b      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8087 	beq.w	800233a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800222c:	4b96      	ldr	r3, [pc, #600]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 030c 	and.w	r3, r3, #12
 8002234:	2b04      	cmp	r3, #4
 8002236:	d00c      	beq.n	8002252 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002238:	4b93      	ldr	r3, [pc, #588]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b08      	cmp	r3, #8
 8002242:	d112      	bne.n	800226a <HAL_RCC_OscConfig+0x62>
 8002244:	4b90      	ldr	r3, [pc, #576]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002250:	d10b      	bne.n	800226a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002252:	4b8d      	ldr	r3, [pc, #564]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d06c      	beq.n	8002338 <HAL_RCC_OscConfig+0x130>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d168      	bne.n	8002338 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e275      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002272:	d106      	bne.n	8002282 <HAL_RCC_OscConfig+0x7a>
 8002274:	4b84      	ldr	r3, [pc, #528]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a83      	ldr	r2, [pc, #524]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800227a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227e:	6013      	str	r3, [r2, #0]
 8002280:	e02e      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10c      	bne.n	80022a4 <HAL_RCC_OscConfig+0x9c>
 800228a:	4b7f      	ldr	r3, [pc, #508]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a7e      	ldr	r2, [pc, #504]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4b7c      	ldr	r3, [pc, #496]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7b      	ldr	r2, [pc, #492]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800229c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	e01d      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022ac:	d10c      	bne.n	80022c8 <HAL_RCC_OscConfig+0xc0>
 80022ae:	4b76      	ldr	r3, [pc, #472]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a75      	ldr	r2, [pc, #468]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	4b73      	ldr	r3, [pc, #460]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a72      	ldr	r2, [pc, #456]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e00b      	b.n	80022e0 <HAL_RCC_OscConfig+0xd8>
 80022c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022d2:	6013      	str	r3, [r2, #0]
 80022d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80022da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e8:	f7fe ff84 	bl	80011f4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe ff80 	bl	80011f4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	@ 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e229      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002302:	4b61      	ldr	r3, [pc, #388]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0f0      	beq.n	80022f0 <HAL_RCC_OscConfig+0xe8>
 800230e:	e014      	b.n	800233a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002310:	f7fe ff70 	bl	80011f4 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002318:	f7fe ff6c 	bl	80011f4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b64      	cmp	r3, #100	@ 0x64
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e215      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800232a:	4b57      	ldr	r3, [pc, #348]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f0      	bne.n	8002318 <HAL_RCC_OscConfig+0x110>
 8002336:	e000      	b.n	800233a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d069      	beq.n	800241a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002346:	4b50      	ldr	r3, [pc, #320]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 030c 	and.w	r3, r3, #12
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00b      	beq.n	800236a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002352:	4b4d      	ldr	r3, [pc, #308]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f003 030c 	and.w	r3, r3, #12
 800235a:	2b08      	cmp	r3, #8
 800235c:	d11c      	bne.n	8002398 <HAL_RCC_OscConfig+0x190>
 800235e:	4b4a      	ldr	r3, [pc, #296]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d116      	bne.n	8002398 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x17a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d001      	beq.n	8002382 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e1e9      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002382:	4b41      	ldr	r3, [pc, #260]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	493d      	ldr	r1, [pc, #244]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002392:	4313      	orrs	r3, r2
 8002394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002396:	e040      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a38      	ldr	r2, [pc, #224]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe ff22 	bl	80011f4 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe ff1e 	bl	80011f4 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1c7      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c6:	4b30      	ldr	r3, [pc, #192]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	4929      	ldr	r1, [pc, #164]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]
 80023e6:	e018      	b.n	800241a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a26      	ldr	r2, [pc, #152]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 80023ee:	f023 0301 	bic.w	r3, r3, #1
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fefe 	bl	80011f4 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7fe fefa 	bl	80011f4 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e1a3      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	4b1e      	ldr	r3, [pc, #120]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0308 	and.w	r3, r3, #8
 8002422:	2b00      	cmp	r3, #0
 8002424:	d038      	beq.n	8002498 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d019      	beq.n	8002462 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242e:	4b16      	ldr	r3, [pc, #88]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002430:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002432:	4a15      	ldr	r2, [pc, #84]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7fe fedb 	bl	80011f4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002442:	f7fe fed7 	bl	80011f4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e180      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002454:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x23a>
 8002460:	e01a      	b.n	8002498 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002464:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002466:	4a08      	ldr	r2, [pc, #32]	@ (8002488 <HAL_RCC_OscConfig+0x280>)
 8002468:	f023 0301 	bic.w	r3, r3, #1
 800246c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246e:	f7fe fec1 	bl	80011f4 <HAL_GetTick>
 8002472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002474:	e00a      	b.n	800248c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002476:	f7fe febd 	bl	80011f4 <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d903      	bls.n	800248c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e166      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
 8002488:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248c:	4b92      	ldr	r3, [pc, #584]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800248e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d1ee      	bne.n	8002476 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	f000 80a4 	beq.w	80025ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024a6:	4b8c      	ldr	r3, [pc, #560]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10d      	bne.n	80024ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b2:	4b89      	ldr	r3, [pc, #548]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b6:	4a88      	ldr	r2, [pc, #544]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80024be:	4b86      	ldr	r3, [pc, #536]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c6:	60bb      	str	r3, [r7, #8]
 80024c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ca:	2301      	movs	r3, #1
 80024cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ce:	4b83      	ldr	r3, [pc, #524]	@ (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d118      	bne.n	800250c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80024da:	4b80      	ldr	r3, [pc, #512]	@ (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7f      	ldr	r2, [pc, #508]	@ (80026dc <HAL_RCC_OscConfig+0x4d4>)
 80024e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024e6:	f7fe fe85 	bl	80011f4 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ee:	f7fe fe81 	bl	80011f4 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b64      	cmp	r3, #100	@ 0x64
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e12a      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002500:	4b76      	ldr	r3, [pc, #472]	@ (80026dc <HAL_RCC_OscConfig+0x4d4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x31a>
 8002514:	4b70      	ldr	r3, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002518:	4a6f      	ldr	r2, [pc, #444]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800251a:	f043 0301 	orr.w	r3, r3, #1
 800251e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002520:	e02d      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x33c>
 800252a:	4b6b      	ldr	r3, [pc, #428]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800252e:	4a6a      	ldr	r2, [pc, #424]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	6713      	str	r3, [r2, #112]	@ 0x70
 8002536:	4b68      	ldr	r3, [pc, #416]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800253a:	4a67      	ldr	r2, [pc, #412]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800253c:	f023 0304 	bic.w	r3, r3, #4
 8002540:	6713      	str	r3, [r2, #112]	@ 0x70
 8002542:	e01c      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2b05      	cmp	r3, #5
 800254a:	d10c      	bne.n	8002566 <HAL_RCC_OscConfig+0x35e>
 800254c:	4b62      	ldr	r3, [pc, #392]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800254e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002550:	4a61      	ldr	r2, [pc, #388]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002552:	f043 0304 	orr.w	r3, r3, #4
 8002556:	6713      	str	r3, [r2, #112]	@ 0x70
 8002558:	4b5f      	ldr	r3, [pc, #380]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800255c:	4a5e      	ldr	r2, [pc, #376]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	@ 0x70
 8002564:	e00b      	b.n	800257e <HAL_RCC_OscConfig+0x376>
 8002566:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800256a:	4a5b      	ldr	r2, [pc, #364]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800256c:	f023 0301 	bic.w	r3, r3, #1
 8002570:	6713      	str	r3, [r2, #112]	@ 0x70
 8002572:	4b59      	ldr	r3, [pc, #356]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002576:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002578:	f023 0304 	bic.w	r3, r3, #4
 800257c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d015      	beq.n	80025b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002586:	f7fe fe35 	bl	80011f4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fe31 	bl	80011f4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e0d8      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025a4:	4b4c      	ldr	r3, [pc, #304]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ee      	beq.n	800258e <HAL_RCC_OscConfig+0x386>
 80025b0:	e014      	b.n	80025dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b2:	f7fe fe1f 	bl	80011f4 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	e00a      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ba:	f7fe fe1b 	bl	80011f4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0c2      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d0:	4b41      	ldr	r3, [pc, #260]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1ee      	bne.n	80025ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025dc:	7dfb      	ldrb	r3, [r7, #23]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b3d      	ldr	r3, [pc, #244]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	4a3c      	ldr	r2, [pc, #240]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f000 80ae 	beq.w	8002754 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025f8:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d06d      	beq.n	80026e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d14b      	bne.n	80026a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b32      	ldr	r3, [pc, #200]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a31      	ldr	r2, [pc, #196]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fdec 	bl	80011f4 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fde8 	bl	80011f4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e091      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69da      	ldr	r2, [r3, #28]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a1b      	ldr	r3, [r3, #32]
 8002646:	431a      	orrs	r2, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264c:	019b      	lsls	r3, r3, #6
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	3b01      	subs	r3, #1
 8002658:	041b      	lsls	r3, r3, #16
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002660:	061b      	lsls	r3, r3, #24
 8002662:	431a      	orrs	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002668:	071b      	lsls	r3, r3, #28
 800266a:	491b      	ldr	r1, [pc, #108]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a18      	ldr	r2, [pc, #96]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002676:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800267a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7fe fdba 	bl	80011f4 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002684:	f7fe fdb6 	bl	80011f4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e05f      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x47c>
 80026a2:	e057      	b.n	8002754 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a0b      	ldr	r2, [pc, #44]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fda0 	bl	80011f4 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe fd9c 	bl	80011f4 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e045      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ca:	4b03      	ldr	r3, [pc, #12]	@ (80026d8 <HAL_RCC_OscConfig+0x4d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f0      	bne.n	80026b8 <HAL_RCC_OscConfig+0x4b0>
 80026d6:	e03d      	b.n	8002754 <HAL_RCC_OscConfig+0x54c>
 80026d8:	40023800 	.word	0x40023800
 80026dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002760 <HAL_RCC_OscConfig+0x558>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d030      	beq.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d129      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002706:	429a      	cmp	r2, r3
 8002708:	d122      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002710:	4013      	ands	r3, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002716:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002718:	4293      	cmp	r3, r2
 800271a:	d119      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002726:	085b      	lsrs	r3, r3, #1
 8002728:	3b01      	subs	r3, #1
 800272a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d10f      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800273a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800

08002764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d0      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 030f 	and.w	r3, r3, #15
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 020f 	bic.w	r2, r3, #15
 8002792:	4965      	ldr	r1, [pc, #404]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b63      	ldr	r3, [pc, #396]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b8      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d020      	beq.n	80027fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027c4:	4b59      	ldr	r3, [pc, #356]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a58      	ldr	r2, [pc, #352]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0308 	and.w	r3, r3, #8
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d005      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027dc:	4b53      	ldr	r3, [pc, #332]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	4a52      	ldr	r2, [pc, #328]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027e2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80027e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027e8:	4b50      	ldr	r3, [pc, #320]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	494d      	ldr	r1, [pc, #308]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d040      	beq.n	8002888 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800280e:	4b47      	ldr	r3, [pc, #284]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d115      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e07f      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d107      	bne.n	8002836 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002826:	4b41      	ldr	r3, [pc, #260]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d109      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e073      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002836:	4b3d      	ldr	r3, [pc, #244]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e06b      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002846:	4b39      	ldr	r3, [pc, #228]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f023 0203 	bic.w	r2, r3, #3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	4936      	ldr	r1, [pc, #216]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	4313      	orrs	r3, r2
 8002856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002858:	f7fe fccc 	bl	80011f4 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	e00a      	b.n	8002876 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002860:	f7fe fcc8 	bl	80011f4 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e053      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002876:	4b2d      	ldr	r3, [pc, #180]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 020c 	and.w	r2, r3, #12
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d1eb      	bne.n	8002860 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002888:	4b27      	ldr	r3, [pc, #156]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d210      	bcs.n	80028b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 020f 	bic.w	r2, r3, #15
 800289e:	4922      	ldr	r1, [pc, #136]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a6:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 030f 	and.w	r3, r3, #15
 80028ae:	683a      	ldr	r2, [r7, #0]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d001      	beq.n	80028b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e032      	b.n	800291e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0304 	and.w	r3, r3, #4
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d008      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028c4:	4b19      	ldr	r3, [pc, #100]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4916      	ldr	r1, [pc, #88]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d009      	beq.n	80028f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028e2:	4b12      	ldr	r3, [pc, #72]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	00db      	lsls	r3, r3, #3
 80028f0:	490e      	ldr	r1, [pc, #56]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028f6:	f000 f821 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	@ (800292c <HAL_RCC_ClockConfig+0x1c8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	490a      	ldr	r1, [pc, #40]	@ (8002930 <HAL_RCC_ClockConfig+0x1cc>)
 8002908:	5ccb      	ldrb	r3, [r1, r3]
 800290a:	fa22 f303 	lsr.w	r3, r2, r3
 800290e:	4a09      	ldr	r2, [pc, #36]	@ (8002934 <HAL_RCC_ClockConfig+0x1d0>)
 8002910:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_RCC_ClockConfig+0x1d4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fc28 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00
 800292c:	40023800 	.word	0x40023800
 8002930:	080054dc 	.word	0x080054dc
 8002934:	20000000 	.word	0x20000000
 8002938:	20000004 	.word	0x20000004

0800293c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800293c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002940:	b094      	sub	sp, #80	@ 0x50
 8002942:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	647b      	str	r3, [r7, #68]	@ 0x44
 8002948:	2300      	movs	r3, #0
 800294a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800294c:	2300      	movs	r3, #0
 800294e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002954:	4b79      	ldr	r3, [pc, #484]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 030c 	and.w	r3, r3, #12
 800295c:	2b08      	cmp	r3, #8
 800295e:	d00d      	beq.n	800297c <HAL_RCC_GetSysClockFreq+0x40>
 8002960:	2b08      	cmp	r3, #8
 8002962:	f200 80e1 	bhi.w	8002b28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_RCC_GetSysClockFreq+0x34>
 800296a:	2b04      	cmp	r3, #4
 800296c:	d003      	beq.n	8002976 <HAL_RCC_GetSysClockFreq+0x3a>
 800296e:	e0db      	b.n	8002b28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002970:	4b73      	ldr	r3, [pc, #460]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002972:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002974:	e0db      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002976:	4b73      	ldr	r3, [pc, #460]	@ (8002b44 <HAL_RCC_GetSysClockFreq+0x208>)
 8002978:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800297a:	e0d8      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297c:	4b6f      	ldr	r3, [pc, #444]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002984:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002986:	4b6d      	ldr	r3, [pc, #436]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d063      	beq.n	8002a5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002992:	4b6a      	ldr	r3, [pc, #424]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	099b      	lsrs	r3, r3, #6
 8002998:	2200      	movs	r2, #0
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800299c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800299e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80029aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80029ae:	4622      	mov	r2, r4
 80029b0:	462b      	mov	r3, r5
 80029b2:	f04f 0000 	mov.w	r0, #0
 80029b6:	f04f 0100 	mov.w	r1, #0
 80029ba:	0159      	lsls	r1, r3, #5
 80029bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c0:	0150      	lsls	r0, r2, #5
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4621      	mov	r1, r4
 80029c8:	1a51      	subs	r1, r2, r1
 80029ca:	6139      	str	r1, [r7, #16]
 80029cc:	4629      	mov	r1, r5
 80029ce:	eb63 0301 	sbc.w	r3, r3, r1
 80029d2:	617b      	str	r3, [r7, #20]
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029e0:	4659      	mov	r1, fp
 80029e2:	018b      	lsls	r3, r1, #6
 80029e4:	4651      	mov	r1, sl
 80029e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ea:	4651      	mov	r1, sl
 80029ec:	018a      	lsls	r2, r1, #6
 80029ee:	4651      	mov	r1, sl
 80029f0:	ebb2 0801 	subs.w	r8, r2, r1
 80029f4:	4659      	mov	r1, fp
 80029f6:	eb63 0901 	sbc.w	r9, r3, r1
 80029fa:	f04f 0200 	mov.w	r2, #0
 80029fe:	f04f 0300 	mov.w	r3, #0
 8002a02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a0e:	4690      	mov	r8, r2
 8002a10:	4699      	mov	r9, r3
 8002a12:	4623      	mov	r3, r4
 8002a14:	eb18 0303 	adds.w	r3, r8, r3
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	eb49 0303 	adc.w	r3, r9, r3
 8002a20:	60fb      	str	r3, [r7, #12]
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a2e:	4629      	mov	r1, r5
 8002a30:	024b      	lsls	r3, r1, #9
 8002a32:	4621      	mov	r1, r4
 8002a34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a38:	4621      	mov	r1, r4
 8002a3a:	024a      	lsls	r2, r1, #9
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a42:	2200      	movs	r2, #0
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a4c:	f7fd fc50 	bl	80002f0 <__aeabi_uldivmod>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4613      	mov	r3, r2
 8002a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a58:	e058      	b.n	8002b0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a5a:	4b38      	ldr	r3, [pc, #224]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	099b      	lsrs	r3, r3, #6
 8002a60:	2200      	movs	r2, #0
 8002a62:	4618      	mov	r0, r3
 8002a64:	4611      	mov	r1, r2
 8002a66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a6a:	623b      	str	r3, [r7, #32]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a74:	4642      	mov	r2, r8
 8002a76:	464b      	mov	r3, r9
 8002a78:	f04f 0000 	mov.w	r0, #0
 8002a7c:	f04f 0100 	mov.w	r1, #0
 8002a80:	0159      	lsls	r1, r3, #5
 8002a82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a86:	0150      	lsls	r0, r2, #5
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4641      	mov	r1, r8
 8002a8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a92:	4649      	mov	r1, r9
 8002a94:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	f04f 0300 	mov.w	r3, #0
 8002aa0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002aa4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aa8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002aac:	ebb2 040a 	subs.w	r4, r2, sl
 8002ab0:	eb63 050b 	sbc.w	r5, r3, fp
 8002ab4:	f04f 0200 	mov.w	r2, #0
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	00eb      	lsls	r3, r5, #3
 8002abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ac2:	00e2      	lsls	r2, r4, #3
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	461d      	mov	r5, r3
 8002ac8:	4643      	mov	r3, r8
 8002aca:	18e3      	adds	r3, r4, r3
 8002acc:	603b      	str	r3, [r7, #0]
 8002ace:	464b      	mov	r3, r9
 8002ad0:	eb45 0303 	adc.w	r3, r5, r3
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	f04f 0300 	mov.w	r3, #0
 8002ade:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ae2:	4629      	mov	r1, r5
 8002ae4:	028b      	lsls	r3, r1, #10
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aec:	4621      	mov	r1, r4
 8002aee:	028a      	lsls	r2, r1, #10
 8002af0:	4610      	mov	r0, r2
 8002af2:	4619      	mov	r1, r3
 8002af4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002af6:	2200      	movs	r2, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	61fa      	str	r2, [r7, #28]
 8002afc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b00:	f7fd fbf6 	bl	80002f0 <__aeabi_uldivmod>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4613      	mov	r3, r2
 8002b0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	0c1b      	lsrs	r3, r3, #16
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	3301      	adds	r3, #1
 8002b18:	005b      	lsls	r3, r3, #1
 8002b1a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002b1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b26:	e002      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b28:	4b05      	ldr	r3, [pc, #20]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3750      	adds	r7, #80	@ 0x50
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	00f42400 	.word	0x00f42400
 8002b44:	007a1200 	.word	0x007a1200

08002b48 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	@ (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b64:	f7ff fff0 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	@ (8002b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	080054ec 	.word	0x080054ec

08002b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b8c:	f7ff ffdc 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0b5b      	lsrs	r3, r3, #13
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	@ (8002bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	080054ec 	.word	0x080054ec

08002bb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002bd8:	4b69      	ldr	r3, [pc, #420]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	4a68      	ldr	r2, [pc, #416]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bde:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002be2:	6093      	str	r3, [r2, #8]
 8002be4:	4b66      	ldr	r3, [pc, #408]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bec:	4964      	ldr	r1, [pc, #400]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d017      	beq.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c10:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	4959      	ldr	r1, [pc, #356]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d017      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c46:	4b4e      	ldr	r3, [pc, #312]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002c4c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	494a      	ldr	r1, [pc, #296]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c64:	d101      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c66:	2301      	movs	r3, #1
 8002c68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c72:	2301      	movs	r3, #1
 8002c74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c82:	2301      	movs	r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 808b 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c94:	4b3a      	ldr	r3, [pc, #232]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	4a39      	ldr	r2, [pc, #228]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ca0:	4b37      	ldr	r3, [pc, #220]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cac:	4b35      	ldr	r3, [pc, #212]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a34      	ldr	r2, [pc, #208]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fa9c 	bl	80011f4 <HAL_GetTick>
 8002cbc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc0:	f7fe fa98 	bl	80011f4 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b64      	cmp	r3, #100	@ 0x64
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e38f      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8002d84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d0f0      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cde:	4b28      	ldr	r3, [pc, #160]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ce6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d035      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d02e      	beq.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cfc:	4b20      	ldr	r3, [pc, #128]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d04:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d10:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d12:	4b1b      	ldr	r3, [pc, #108]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d16:	4a1a      	ldr	r2, [pc, #104]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d1c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d1e:	4a18      	ldr	r2, [pc, #96]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d24:	4b16      	ldr	r3, [pc, #88]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d114      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d30:	f7fe fa60 	bl	80011f4 <HAL_GetTick>
 8002d34:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d36:	e00a      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d38:	f7fe fa5c 	bl	80011f4 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e351      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d0ee      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d66:	d111      	bne.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d68:	4b05      	ldr	r3, [pc, #20]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d76:	400b      	ands	r3, r1
 8002d78:	4901      	ldr	r1, [pc, #4]	@ (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e00b      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d80:	40023800 	.word	0x40023800
 8002d84:	40007000 	.word	0x40007000
 8002d88:	0ffffcff 	.word	0x0ffffcff
 8002d8c:	4bac      	ldr	r3, [pc, #688]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	4aab      	ldr	r2, [pc, #684]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d92:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	4ba9      	ldr	r3, [pc, #676]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da4:	49a6      	ldr	r1, [pc, #664]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0310 	and.w	r3, r3, #16
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d010      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002db6:	4ba2      	ldr	r3, [pc, #648]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002dbc:	4aa0      	ldr	r2, [pc, #640]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002dc6:	4b9e      	ldr	r3, [pc, #632]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	499b      	ldr	r1, [pc, #620]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002de4:	4b96      	ldr	r3, [pc, #600]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002df2:	4993      	ldr	r1, [pc, #588]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00a      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e06:	4b8e      	ldr	r3, [pc, #568]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e14:	498a      	ldr	r1, [pc, #552]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e28:	4b85      	ldr	r3, [pc, #532]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e2e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e36:	4982      	ldr	r1, [pc, #520]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e50:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	4979      	ldr	r1, [pc, #484]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e6c:	4b74      	ldr	r3, [pc, #464]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e72:	f023 0203 	bic.w	r2, r3, #3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	4971      	ldr	r1, [pc, #452]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e8e:	4b6c      	ldr	r3, [pc, #432]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	f023 020c 	bic.w	r2, r3, #12
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e9c:	4968      	ldr	r1, [pc, #416]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb0:	4b63      	ldr	r3, [pc, #396]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ebe:	4960      	ldr	r1, [pc, #384]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed8:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	4957      	ldr	r1, [pc, #348]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ef4:	4b52      	ldr	r3, [pc, #328]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f02:	494f      	ldr	r1, [pc, #316]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f16:	4b4a      	ldr	r3, [pc, #296]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f24:	4946      	ldr	r1, [pc, #280]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f38:	4b41      	ldr	r3, [pc, #260]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f46:	493e      	ldr	r1, [pc, #248]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f5a:	4b39      	ldr	r3, [pc, #228]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	4935      	ldr	r1, [pc, #212]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f7c:	4b30      	ldr	r3, [pc, #192]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f82:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f8a:	492d      	ldr	r1, [pc, #180]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d011      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f9e:	4b28      	ldr	r3, [pc, #160]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fa4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fac:	4924      	ldr	r1, [pc, #144]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002fde:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fec:	4914      	ldr	r1, [pc, #80]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00b      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003000:	4b0f      	ldr	r3, [pc, #60]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003006:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003010:	490b      	ldr	r1, [pc, #44]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003012:	4313      	orrs	r3, r2
 8003014:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003024:	4b06      	ldr	r3, [pc, #24]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003034:	4902      	ldr	r1, [pc, #8]	@ (8003040 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800303c:	e002      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800303e:	bf00      	nop
 8003040:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003050:	4b8a      	ldr	r3, [pc, #552]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003052:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003056:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003060:	4986      	ldr	r1, [pc, #536]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003062:	4313      	orrs	r3, r2
 8003064:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00b      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003074:	4b81      	ldr	r3, [pc, #516]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800307a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003084:	497d      	ldr	r1, [pc, #500]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d006      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80d6 	beq.w	800324c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030a0:	4b76      	ldr	r3, [pc, #472]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a75      	ldr	r2, [pc, #468]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ac:	f7fe f8a2 	bl	80011f4 <HAL_GetTick>
 80030b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030b2:	e008      	b.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030b4:	f7fe f89e 	bl	80011f4 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b64      	cmp	r3, #100	@ 0x64
 80030c0:	d901      	bls.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e195      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c6:	4b6d      	ldr	r3, [pc, #436]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f0      	bne.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0301 	and.w	r3, r3, #1
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d021      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d11d      	bne.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030e6:	4b65      	ldr	r3, [pc, #404]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030ec:	0c1b      	lsrs	r3, r3, #16
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030f4:	4b61      	ldr	r3, [pc, #388]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030fa:	0e1b      	lsrs	r3, r3, #24
 80030fc:	f003 030f 	and.w	r3, r3, #15
 8003100:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	019a      	lsls	r2, r3, #6
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	041b      	lsls	r3, r3, #16
 800310c:	431a      	orrs	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	061b      	lsls	r3, r3, #24
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	071b      	lsls	r3, r3, #28
 800311a:	4958      	ldr	r1, [pc, #352]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003132:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003136:	d00a      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003140:	2b00      	cmp	r3, #0
 8003142:	d02e      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800314c:	d129      	bne.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800314e:	4b4b      	ldr	r3, [pc, #300]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315c:	4b47      	ldr	r3, [pc, #284]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	019a      	lsls	r2, r3, #6
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	431a      	orrs	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	493e      	ldr	r1, [pc, #248]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800318a:	4b3c      	ldr	r3, [pc, #240]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003190:	f023 021f 	bic.w	r2, r3, #31
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003198:	3b01      	subs	r3, #1
 800319a:	4938      	ldr	r1, [pc, #224]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d01d      	beq.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031ae:	4b33      	ldr	r3, [pc, #204]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031b4:	0e1b      	lsrs	r3, r3, #24
 80031b6:	f003 030f 	and.w	r3, r3, #15
 80031ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031bc:	4b2f      	ldr	r3, [pc, #188]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c2:	0f1b      	lsrs	r3, r3, #28
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	019a      	lsls	r2, r3, #6
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	061b      	lsls	r3, r3, #24
 80031dc:	431a      	orrs	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	071b      	lsls	r3, r3, #28
 80031e2:	4926      	ldr	r1, [pc, #152]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	019a      	lsls	r2, r3, #6
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	061b      	lsls	r3, r3, #24
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	491a      	ldr	r1, [pc, #104]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800321a:	4b18      	ldr	r3, [pc, #96]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a17      	ldr	r2, [pc, #92]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003224:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003226:	f7fd ffe5 	bl	80011f4 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800322e:	f7fd ffe1 	bl	80011f4 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	@ 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0d8      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003240:	4b0e      	ldr	r3, [pc, #56]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	2b01      	cmp	r3, #1
 8003250:	f040 80ce 	bne.w	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003254:	4b09      	ldr	r3, [pc, #36]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a08      	ldr	r2, [pc, #32]	@ (800327c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800325a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800325e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fd ffc8 	bl	80011f4 <HAL_GetTick>
 8003264:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003266:	e00b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003268:	f7fd ffc4 	bl	80011f4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b64      	cmp	r3, #100	@ 0x64
 8003274:	d904      	bls.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e0bb      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800327a:	bf00      	nop
 800327c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003280:	4b5e      	ldr	r3, [pc, #376]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328c:	d0ec      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d02e      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d12a      	bne.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032b6:	4b51      	ldr	r3, [pc, #324]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032c4:	4b4d      	ldr	r3, [pc, #308]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ca:	0f1b      	lsrs	r3, r3, #28
 80032cc:	f003 0307 	and.w	r3, r3, #7
 80032d0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	019a      	lsls	r2, r3, #6
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	041b      	lsls	r3, r3, #16
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	061b      	lsls	r3, r3, #24
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	071b      	lsls	r3, r3, #28
 80032ea:	4944      	ldr	r1, [pc, #272]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032f2:	4b42      	ldr	r3, [pc, #264]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032f8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	3b01      	subs	r3, #1
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	493d      	ldr	r1, [pc, #244]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d022      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003320:	d11d      	bne.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003322:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003328:	0e1b      	lsrs	r3, r3, #24
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003330:	4b32      	ldr	r3, [pc, #200]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	0f1b      	lsrs	r3, r3, #28
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	019a      	lsls	r2, r3, #6
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	041b      	lsls	r3, r3, #16
 800334a:	431a      	orrs	r2, r3
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	431a      	orrs	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	4929      	ldr	r1, [pc, #164]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d028      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800336a:	4b24      	ldr	r3, [pc, #144]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	0e1b      	lsrs	r3, r3, #24
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003378:	4b20      	ldr	r3, [pc, #128]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800337e:	0c1b      	lsrs	r3, r3, #16
 8003380:	f003 0303 	and.w	r3, r3, #3
 8003384:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	019a      	lsls	r2, r3, #6
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	041b      	lsls	r3, r3, #16
 8003390:	431a      	orrs	r2, r3
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	071b      	lsls	r3, r3, #28
 800339e:	4917      	ldr	r1, [pc, #92]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033a6:	4b15      	ldr	r3, [pc, #84]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033ac:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b4:	4911      	ldr	r1, [pc, #68]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80033bc:	4b0f      	ldr	r3, [pc, #60]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0e      	ldr	r2, [pc, #56]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fd ff14 	bl	80011f4 <HAL_GetTick>
 80033cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80033d0:	f7fd ff10 	bl	80011f4 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b64      	cmp	r3, #100	@ 0x64
 80033dc:	d901      	bls.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e007      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ee:	d1ef      	bne.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3720      	adds	r7, #32
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023800 	.word	0x40023800

08003400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e049      	b.n	80034a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fd fcf2 	bl	8000e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	4619      	mov	r1, r3
 800343e:	4610      	mov	r0, r2
 8003440:	f000 f978 	bl	8003734 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d001      	beq.n	80034c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e054      	b.n	8003572 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <HAL_TIM_Base_Start_IT+0xd0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d022      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f2:	d01d      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	@ (8003584 <HAL_TIM_Base_Start_IT+0xd4>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d018      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	@ (8003588 <HAL_TIM_Base_Start_IT+0xd8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1f      	ldr	r2, [pc, #124]	@ (800358c <HAL_TIM_Base_Start_IT+0xdc>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00e      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	@ (8003590 <HAL_TIM_Base_Start_IT+0xe0>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d009      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	@ (8003594 <HAL_TIM_Base_Start_IT+0xe4>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d004      	beq.n	8003530 <HAL_TIM_Base_Start_IT+0x80>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	@ (8003598 <HAL_TIM_Base_Start_IT+0xe8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d115      	bne.n	800355c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	4b19      	ldr	r3, [pc, #100]	@ (800359c <HAL_TIM_Base_Start_IT+0xec>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b06      	cmp	r3, #6
 8003540:	d015      	beq.n	800356e <HAL_TIM_Base_Start_IT+0xbe>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003548:	d011      	beq.n	800356e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800355a:	e008      	b.n	800356e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	601a      	str	r2, [r3, #0]
 800356c:	e000      	b.n	8003570 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800356e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40010400 	.word	0x40010400
 8003594:	40014000 	.word	0x40014000
 8003598:	40001800 	.word	0x40001800
 800359c:	00010007 	.word	0x00010007

080035a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035aa:	2300      	movs	r3, #0
 80035ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_TIM_ConfigClockSource+0x1c>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e0b4      	b.n	8003726 <HAL_TIM_ConfigClockSource+0x186>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4b56      	ldr	r3, [pc, #344]	@ (8003730 <HAL_TIM_ConfigClockSource+0x190>)
 80035d8:	4013      	ands	r3, r2
 80035da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f4:	d03e      	beq.n	8003674 <HAL_TIM_ConfigClockSource+0xd4>
 80035f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fa:	f200 8087 	bhi.w	800370c <HAL_TIM_ConfigClockSource+0x16c>
 80035fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003602:	f000 8086 	beq.w	8003712 <HAL_TIM_ConfigClockSource+0x172>
 8003606:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360a:	d87f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b70      	cmp	r3, #112	@ 0x70
 800360e:	d01a      	beq.n	8003646 <HAL_TIM_ConfigClockSource+0xa6>
 8003610:	2b70      	cmp	r3, #112	@ 0x70
 8003612:	d87b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b60      	cmp	r3, #96	@ 0x60
 8003616:	d050      	beq.n	80036ba <HAL_TIM_ConfigClockSource+0x11a>
 8003618:	2b60      	cmp	r3, #96	@ 0x60
 800361a:	d877      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b50      	cmp	r3, #80	@ 0x50
 800361e:	d03c      	beq.n	800369a <HAL_TIM_ConfigClockSource+0xfa>
 8003620:	2b50      	cmp	r3, #80	@ 0x50
 8003622:	d873      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b40      	cmp	r3, #64	@ 0x40
 8003626:	d058      	beq.n	80036da <HAL_TIM_ConfigClockSource+0x13a>
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	d86f      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 800362c:	2b30      	cmp	r3, #48	@ 0x30
 800362e:	d064      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15a>
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d86b      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 8003634:	2b20      	cmp	r3, #32
 8003636:	d060      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15a>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d867      	bhi.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
 800363c:	2b00      	cmp	r3, #0
 800363e:	d05c      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15a>
 8003640:	2b10      	cmp	r3, #16
 8003642:	d05a      	beq.n	80036fa <HAL_TIM_ConfigClockSource+0x15a>
 8003644:	e062      	b.n	800370c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003656:	f000 f98d 	bl	8003974 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003668:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	609a      	str	r2, [r3, #8]
      break;
 8003672:	e04f      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003684:	f000 f976 	bl	8003974 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003696:	609a      	str	r2, [r3, #8]
      break;
 8003698:	e03c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036a6:	461a      	mov	r2, r3
 80036a8:	f000 f8ea 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2150      	movs	r1, #80	@ 0x50
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f943 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80036b8:	e02c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036c6:	461a      	mov	r2, r3
 80036c8:	f000 f909 	bl	80038de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2160      	movs	r1, #96	@ 0x60
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f933 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80036d8:	e01c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	461a      	mov	r2, r3
 80036e8:	f000 f8ca 	bl	8003880 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2140      	movs	r1, #64	@ 0x40
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f923 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 80036f8:	e00c      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4619      	mov	r1, r3
 8003704:	4610      	mov	r0, r2
 8003706:	f000 f91a 	bl	800393e <TIM_ITRx_SetConfig>
      break;
 800370a:	e003      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	73fb      	strb	r3, [r7, #15]
      break;
 8003710:	e000      	b.n	8003714 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003712:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	fffeff88 	.word	0xfffeff88

08003734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a43      	ldr	r2, [pc, #268]	@ (8003854 <TIM_Base_SetConfig+0x120>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d013      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003752:	d00f      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a40      	ldr	r2, [pc, #256]	@ (8003858 <TIM_Base_SetConfig+0x124>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00b      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3f      	ldr	r2, [pc, #252]	@ (800385c <TIM_Base_SetConfig+0x128>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3e      	ldr	r2, [pc, #248]	@ (8003860 <TIM_Base_SetConfig+0x12c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_Base_SetConfig+0x40>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a3d      	ldr	r2, [pc, #244]	@ (8003864 <TIM_Base_SetConfig+0x130>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d108      	bne.n	8003786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a32      	ldr	r2, [pc, #200]	@ (8003854 <TIM_Base_SetConfig+0x120>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02b      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003794:	d027      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2f      	ldr	r2, [pc, #188]	@ (8003858 <TIM_Base_SetConfig+0x124>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d023      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	@ (800385c <TIM_Base_SetConfig+0x128>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01f      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a2d      	ldr	r2, [pc, #180]	@ (8003860 <TIM_Base_SetConfig+0x12c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01b      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a2c      	ldr	r2, [pc, #176]	@ (8003864 <TIM_Base_SetConfig+0x130>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d017      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a2b      	ldr	r2, [pc, #172]	@ (8003868 <TIM_Base_SetConfig+0x134>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d013      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a2a      	ldr	r2, [pc, #168]	@ (800386c <TIM_Base_SetConfig+0x138>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d00f      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a29      	ldr	r2, [pc, #164]	@ (8003870 <TIM_Base_SetConfig+0x13c>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d00b      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <TIM_Base_SetConfig+0x140>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d007      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a27      	ldr	r2, [pc, #156]	@ (8003878 <TIM_Base_SetConfig+0x144>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d003      	beq.n	80037e6 <TIM_Base_SetConfig+0xb2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a26      	ldr	r2, [pc, #152]	@ (800387c <TIM_Base_SetConfig+0x148>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d108      	bne.n	80037f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a0e      	ldr	r2, [pc, #56]	@ (8003854 <TIM_Base_SetConfig+0x120>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d003      	beq.n	8003826 <TIM_Base_SetConfig+0xf2>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a10      	ldr	r2, [pc, #64]	@ (8003864 <TIM_Base_SetConfig+0x130>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d103      	bne.n	800382e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f043 0204 	orr.w	r2, r3, #4
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	601a      	str	r2, [r3, #0]
}
 8003846:	bf00      	nop
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40010000 	.word	0x40010000
 8003858:	40000400 	.word	0x40000400
 800385c:	40000800 	.word	0x40000800
 8003860:	40000c00 	.word	0x40000c00
 8003864:	40010400 	.word	0x40010400
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	40001800 	.word	0x40001800
 8003878:	40001c00 	.word	0x40001c00
 800387c:	40002000 	.word	0x40002000

08003880 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003880:	b480      	push	{r7}
 8003882:	b087      	sub	sp, #28
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f023 0201 	bic.w	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f023 030a 	bic.w	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038be:	697a      	ldr	r2, [r7, #20]
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	621a      	str	r2, [r3, #32]
}
 80038d2:	bf00      	nop
 80038d4:	371c      	adds	r7, #28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038de:	b480      	push	{r7}
 80038e0:	b087      	sub	sp, #28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
 80038e6:	60b9      	str	r1, [r7, #8]
 80038e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	f023 0210 	bic.w	r2, r3, #16
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	031b      	lsls	r3, r3, #12
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800391a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	4313      	orrs	r3, r2
 8003924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800393e:	b480      	push	{r7}
 8003940:	b085      	sub	sp, #20
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003954:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4313      	orrs	r3, r2
 800395c:	f043 0307 	orr.w	r3, r3, #7
 8003960:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68fa      	ldr	r2, [r7, #12]
 8003966:	609a      	str	r2, [r3, #8]
}
 8003968:	bf00      	nop
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800398e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	021a      	lsls	r2, r3, #8
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	431a      	orrs	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	609a      	str	r2, [r3, #8]
}
 80039a8:	bf00      	nop
 80039aa:	371c      	adds	r7, #28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e06d      	b.n	8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a30      	ldr	r2, [pc, #192]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a2f      	ldr	r2, [pc, #188]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d108      	bne.n	8003a12 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a06:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a18:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a20      	ldr	r2, [pc, #128]	@ (8003ab4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d022      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3e:	d01d      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a1d      	ldr	r2, [pc, #116]	@ (8003abc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d018      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d013      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1a      	ldr	r2, [pc, #104]	@ (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00e      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a15      	ldr	r2, [pc, #84]	@ (8003ab8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d009      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a16      	ldr	r2, [pc, #88]	@ (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d004      	beq.n	8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a15      	ldr	r2, [pc, #84]	@ (8003acc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10c      	bne.n	8003a96 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a82:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3714      	adds	r7, #20
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	40010000 	.word	0x40010000
 8003ab8:	40010400 	.word	0x40010400
 8003abc:	40000400 	.word	0x40000400
 8003ac0:	40000800 	.word	0x40000800
 8003ac4:	40000c00 	.word	0x40000c00
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40001800 	.word	0x40001800

08003ad0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e040      	b.n	8003b64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd f9fc 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2224      	movs	r2, #36	@ 0x24
 8003afc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fb16 	bl	8004148 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8af 	bl	8003c80 <UART_SetConfig>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e01b      	b.n	8003b64 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fb95 	bl	800428c <UART_CheckIdleState>
 8003b62:	4603      	mov	r3, r0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	@ 0x28
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d177      	bne.n	8003c74 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_UART_Transmit+0x24>
 8003b8a:	88fb      	ldrh	r3, [r7, #6]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e070      	b.n	8003c76 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2221      	movs	r2, #33	@ 0x21
 8003ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba2:	f7fd fb27 	bl	80011f4 <HAL_GetTick>
 8003ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_UART_Transmit+0x68>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bdc:	e02f      	b.n	8003c3e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	@ 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fbf7 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d004      	beq.n	8003bfe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e03b      	b.n	8003c76 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10b      	bne.n	8003c1c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	3302      	adds	r3, #2
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e007      	b.n	8003c2c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	781a      	ldrb	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1c9      	bne.n	8003bde <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2200      	movs	r2, #0
 8003c52:	2140      	movs	r1, #64	@ 0x40
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 fbc1 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e005      	b.n	8003c76 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4ba6      	ldr	r3, [pc, #664]	@ (8003f44 <UART_SetConfig+0x2c4>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6812      	ldr	r2, [r2, #0]
 8003cb2:	6979      	ldr	r1, [r7, #20]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68da      	ldr	r2, [r3, #12]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a94      	ldr	r2, [pc, #592]	@ (8003f48 <UART_SetConfig+0x2c8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d120      	bne.n	8003d3e <UART_SetConfig+0xbe>
 8003cfc:	4b93      	ldr	r3, [pc, #588]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d816      	bhi.n	8003d38 <UART_SetConfig+0xb8>
 8003d0a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d10 <UART_SetConfig+0x90>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d21 	.word	0x08003d21
 8003d14:	08003d2d 	.word	0x08003d2d
 8003d18:	08003d27 	.word	0x08003d27
 8003d1c:	08003d33 	.word	0x08003d33
 8003d20:	2301      	movs	r3, #1
 8003d22:	77fb      	strb	r3, [r7, #31]
 8003d24:	e150      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d26:	2302      	movs	r3, #2
 8003d28:	77fb      	strb	r3, [r7, #31]
 8003d2a:	e14d      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d2c:	2304      	movs	r3, #4
 8003d2e:	77fb      	strb	r3, [r7, #31]
 8003d30:	e14a      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d32:	2308      	movs	r3, #8
 8003d34:	77fb      	strb	r3, [r7, #31]
 8003d36:	e147      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d38:	2310      	movs	r3, #16
 8003d3a:	77fb      	strb	r3, [r7, #31]
 8003d3c:	e144      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a83      	ldr	r2, [pc, #524]	@ (8003f50 <UART_SetConfig+0x2d0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d132      	bne.n	8003dae <UART_SetConfig+0x12e>
 8003d48:	4b80      	ldr	r3, [pc, #512]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d828      	bhi.n	8003da8 <UART_SetConfig+0x128>
 8003d56:	a201      	add	r2, pc, #4	@ (adr r2, 8003d5c <UART_SetConfig+0xdc>)
 8003d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d5c:	08003d91 	.word	0x08003d91
 8003d60:	08003da9 	.word	0x08003da9
 8003d64:	08003da9 	.word	0x08003da9
 8003d68:	08003da9 	.word	0x08003da9
 8003d6c:	08003d9d 	.word	0x08003d9d
 8003d70:	08003da9 	.word	0x08003da9
 8003d74:	08003da9 	.word	0x08003da9
 8003d78:	08003da9 	.word	0x08003da9
 8003d7c:	08003d97 	.word	0x08003d97
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003da9 	.word	0x08003da9
 8003d88:	08003da9 	.word	0x08003da9
 8003d8c:	08003da3 	.word	0x08003da3
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e118      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d96:	2302      	movs	r3, #2
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e115      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e112      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003da2:	2308      	movs	r3, #8
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e10f      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003da8:	2310      	movs	r3, #16
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e10c      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a68      	ldr	r2, [pc, #416]	@ (8003f54 <UART_SetConfig+0x2d4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d120      	bne.n	8003dfa <UART_SetConfig+0x17a>
 8003db8:	4b64      	ldr	r3, [pc, #400]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dbe:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003dc2:	2b30      	cmp	r3, #48	@ 0x30
 8003dc4:	d013      	beq.n	8003dee <UART_SetConfig+0x16e>
 8003dc6:	2b30      	cmp	r3, #48	@ 0x30
 8003dc8:	d814      	bhi.n	8003df4 <UART_SetConfig+0x174>
 8003dca:	2b20      	cmp	r3, #32
 8003dcc:	d009      	beq.n	8003de2 <UART_SetConfig+0x162>
 8003dce:	2b20      	cmp	r3, #32
 8003dd0:	d810      	bhi.n	8003df4 <UART_SetConfig+0x174>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <UART_SetConfig+0x15c>
 8003dd6:	2b10      	cmp	r3, #16
 8003dd8:	d006      	beq.n	8003de8 <UART_SetConfig+0x168>
 8003dda:	e00b      	b.n	8003df4 <UART_SetConfig+0x174>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]
 8003de0:	e0f2      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003de2:	2302      	movs	r3, #2
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e0ef      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003de8:	2304      	movs	r3, #4
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e0ec      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003dee:	2308      	movs	r3, #8
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e0e9      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003df4:	2310      	movs	r3, #16
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e0e6      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a56      	ldr	r2, [pc, #344]	@ (8003f58 <UART_SetConfig+0x2d8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d120      	bne.n	8003e46 <UART_SetConfig+0x1c6>
 8003e04:	4b51      	ldr	r3, [pc, #324]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003e0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e10:	d013      	beq.n	8003e3a <UART_SetConfig+0x1ba>
 8003e12:	2bc0      	cmp	r3, #192	@ 0xc0
 8003e14:	d814      	bhi.n	8003e40 <UART_SetConfig+0x1c0>
 8003e16:	2b80      	cmp	r3, #128	@ 0x80
 8003e18:	d009      	beq.n	8003e2e <UART_SetConfig+0x1ae>
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d810      	bhi.n	8003e40 <UART_SetConfig+0x1c0>
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <UART_SetConfig+0x1a8>
 8003e22:	2b40      	cmp	r3, #64	@ 0x40
 8003e24:	d006      	beq.n	8003e34 <UART_SetConfig+0x1b4>
 8003e26:	e00b      	b.n	8003e40 <UART_SetConfig+0x1c0>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e0cc      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e0c9      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e34:	2304      	movs	r3, #4
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e0c6      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e3a:	2308      	movs	r3, #8
 8003e3c:	77fb      	strb	r3, [r7, #31]
 8003e3e:	e0c3      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e40:	2310      	movs	r3, #16
 8003e42:	77fb      	strb	r3, [r7, #31]
 8003e44:	e0c0      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a44      	ldr	r2, [pc, #272]	@ (8003f5c <UART_SetConfig+0x2dc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d125      	bne.n	8003e9c <UART_SetConfig+0x21c>
 8003e50:	4b3e      	ldr	r3, [pc, #248]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e5e:	d017      	beq.n	8003e90 <UART_SetConfig+0x210>
 8003e60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e64:	d817      	bhi.n	8003e96 <UART_SetConfig+0x216>
 8003e66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e6a:	d00b      	beq.n	8003e84 <UART_SetConfig+0x204>
 8003e6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e70:	d811      	bhi.n	8003e96 <UART_SetConfig+0x216>
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <UART_SetConfig+0x1fe>
 8003e76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e7a:	d006      	beq.n	8003e8a <UART_SetConfig+0x20a>
 8003e7c:	e00b      	b.n	8003e96 <UART_SetConfig+0x216>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	77fb      	strb	r3, [r7, #31]
 8003e82:	e0a1      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e84:	2302      	movs	r3, #2
 8003e86:	77fb      	strb	r3, [r7, #31]
 8003e88:	e09e      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	77fb      	strb	r3, [r7, #31]
 8003e8e:	e09b      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e90:	2308      	movs	r3, #8
 8003e92:	77fb      	strb	r3, [r7, #31]
 8003e94:	e098      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e96:	2310      	movs	r3, #16
 8003e98:	77fb      	strb	r3, [r7, #31]
 8003e9a:	e095      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8003f60 <UART_SetConfig+0x2e0>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d125      	bne.n	8003ef2 <UART_SetConfig+0x272>
 8003ea6:	4b29      	ldr	r3, [pc, #164]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003eb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eb4:	d017      	beq.n	8003ee6 <UART_SetConfig+0x266>
 8003eb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eba:	d817      	bhi.n	8003eec <UART_SetConfig+0x26c>
 8003ebc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec0:	d00b      	beq.n	8003eda <UART_SetConfig+0x25a>
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec6:	d811      	bhi.n	8003eec <UART_SetConfig+0x26c>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <UART_SetConfig+0x254>
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed0:	d006      	beq.n	8003ee0 <UART_SetConfig+0x260>
 8003ed2:	e00b      	b.n	8003eec <UART_SetConfig+0x26c>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
 8003ed8:	e076      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003eda:	2302      	movs	r3, #2
 8003edc:	77fb      	strb	r3, [r7, #31]
 8003ede:	e073      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	77fb      	strb	r3, [r7, #31]
 8003ee4:	e070      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003ee6:	2308      	movs	r3, #8
 8003ee8:	77fb      	strb	r3, [r7, #31]
 8003eea:	e06d      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003eec:	2310      	movs	r3, #16
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e06a      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <UART_SetConfig+0x2e4>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d138      	bne.n	8003f6e <UART_SetConfig+0x2ee>
 8003efc:	4b13      	ldr	r3, [pc, #76]	@ (8003f4c <UART_SetConfig+0x2cc>)
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003f06:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f0a:	d017      	beq.n	8003f3c <UART_SetConfig+0x2bc>
 8003f0c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003f10:	d82a      	bhi.n	8003f68 <UART_SetConfig+0x2e8>
 8003f12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f16:	d00b      	beq.n	8003f30 <UART_SetConfig+0x2b0>
 8003f18:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f1c:	d824      	bhi.n	8003f68 <UART_SetConfig+0x2e8>
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <UART_SetConfig+0x2aa>
 8003f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f26:	d006      	beq.n	8003f36 <UART_SetConfig+0x2b6>
 8003f28:	e01e      	b.n	8003f68 <UART_SetConfig+0x2e8>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	77fb      	strb	r3, [r7, #31]
 8003f2e:	e04b      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003f30:	2302      	movs	r3, #2
 8003f32:	77fb      	strb	r3, [r7, #31]
 8003f34:	e048      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003f36:	2304      	movs	r3, #4
 8003f38:	77fb      	strb	r3, [r7, #31]
 8003f3a:	e045      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003f3c:	2308      	movs	r3, #8
 8003f3e:	77fb      	strb	r3, [r7, #31]
 8003f40:	e042      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003f42:	bf00      	nop
 8003f44:	efff69f3 	.word	0xefff69f3
 8003f48:	40011000 	.word	0x40011000
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	40004400 	.word	0x40004400
 8003f54:	40004800 	.word	0x40004800
 8003f58:	40004c00 	.word	0x40004c00
 8003f5c:	40005000 	.word	0x40005000
 8003f60:	40011400 	.word	0x40011400
 8003f64:	40007800 	.word	0x40007800
 8003f68:	2310      	movs	r3, #16
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e02c      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a72      	ldr	r2, [pc, #456]	@ (800413c <UART_SetConfig+0x4bc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d125      	bne.n	8003fc4 <UART_SetConfig+0x344>
 8003f78:	4b71      	ldr	r3, [pc, #452]	@ (8004140 <UART_SetConfig+0x4c0>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003f82:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f86:	d017      	beq.n	8003fb8 <UART_SetConfig+0x338>
 8003f88:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f8c:	d817      	bhi.n	8003fbe <UART_SetConfig+0x33e>
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f92:	d00b      	beq.n	8003fac <UART_SetConfig+0x32c>
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f98:	d811      	bhi.n	8003fbe <UART_SetConfig+0x33e>
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <UART_SetConfig+0x326>
 8003f9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa2:	d006      	beq.n	8003fb2 <UART_SetConfig+0x332>
 8003fa4:	e00b      	b.n	8003fbe <UART_SetConfig+0x33e>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	77fb      	strb	r3, [r7, #31]
 8003faa:	e00d      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003fac:	2302      	movs	r3, #2
 8003fae:	77fb      	strb	r3, [r7, #31]
 8003fb0:	e00a      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003fb2:	2304      	movs	r3, #4
 8003fb4:	77fb      	strb	r3, [r7, #31]
 8003fb6:	e007      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003fb8:	2308      	movs	r3, #8
 8003fba:	77fb      	strb	r3, [r7, #31]
 8003fbc:	e004      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	77fb      	strb	r3, [r7, #31]
 8003fc2:	e001      	b.n	8003fc8 <UART_SetConfig+0x348>
 8003fc4:	2310      	movs	r3, #16
 8003fc6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
 8003fcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fd0:	d15b      	bne.n	800408a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003fd2:	7ffb      	ldrb	r3, [r7, #31]
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d828      	bhi.n	800402a <UART_SetConfig+0x3aa>
 8003fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <UART_SetConfig+0x360>)
 8003fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fde:	bf00      	nop
 8003fe0:	08004005 	.word	0x08004005
 8003fe4:	0800400d 	.word	0x0800400d
 8003fe8:	08004015 	.word	0x08004015
 8003fec:	0800402b 	.word	0x0800402b
 8003ff0:	0800401b 	.word	0x0800401b
 8003ff4:	0800402b 	.word	0x0800402b
 8003ff8:	0800402b 	.word	0x0800402b
 8003ffc:	0800402b 	.word	0x0800402b
 8004000:	08004023 	.word	0x08004023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004004:	f7fe fdac 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8004008:	61b8      	str	r0, [r7, #24]
        break;
 800400a:	e013      	b.n	8004034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800400c:	f7fe fdbc 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8004010:	61b8      	str	r0, [r7, #24]
        break;
 8004012:	e00f      	b.n	8004034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004014:	4b4b      	ldr	r3, [pc, #300]	@ (8004144 <UART_SetConfig+0x4c4>)
 8004016:	61bb      	str	r3, [r7, #24]
        break;
 8004018:	e00c      	b.n	8004034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800401a:	f7fe fc8f 	bl	800293c <HAL_RCC_GetSysClockFreq>
 800401e:	61b8      	str	r0, [r7, #24]
        break;
 8004020:	e008      	b.n	8004034 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004026:	61bb      	str	r3, [r7, #24]
        break;
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	77bb      	strb	r3, [r7, #30]
        break;
 8004032:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d074      	beq.n	8004124 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	005a      	lsls	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	441a      	add	r2, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	fbb2 f3f3 	udiv	r3, r2, r3
 800404e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0f      	cmp	r3, #15
 8004054:	d916      	bls.n	8004084 <UART_SetConfig+0x404>
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800405c:	d212      	bcs.n	8004084 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f023 030f 	bic.w	r3, r3, #15
 8004066:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	085b      	lsrs	r3, r3, #1
 800406c:	b29b      	uxth	r3, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b29a      	uxth	r2, r3
 8004074:	89fb      	ldrh	r3, [r7, #14]
 8004076:	4313      	orrs	r3, r2
 8004078:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	89fa      	ldrh	r2, [r7, #14]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	e04f      	b.n	8004124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	77bb      	strb	r3, [r7, #30]
 8004088:	e04c      	b.n	8004124 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800408a:	7ffb      	ldrb	r3, [r7, #31]
 800408c:	2b08      	cmp	r3, #8
 800408e:	d828      	bhi.n	80040e2 <UART_SetConfig+0x462>
 8004090:	a201      	add	r2, pc, #4	@ (adr r2, 8004098 <UART_SetConfig+0x418>)
 8004092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004096:	bf00      	nop
 8004098:	080040bd 	.word	0x080040bd
 800409c:	080040c5 	.word	0x080040c5
 80040a0:	080040cd 	.word	0x080040cd
 80040a4:	080040e3 	.word	0x080040e3
 80040a8:	080040d3 	.word	0x080040d3
 80040ac:	080040e3 	.word	0x080040e3
 80040b0:	080040e3 	.word	0x080040e3
 80040b4:	080040e3 	.word	0x080040e3
 80040b8:	080040db 	.word	0x080040db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040bc:	f7fe fd50 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 80040c0:	61b8      	str	r0, [r7, #24]
        break;
 80040c2:	e013      	b.n	80040ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040c4:	f7fe fd60 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 80040c8:	61b8      	str	r0, [r7, #24]
        break;
 80040ca:	e00f      	b.n	80040ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <UART_SetConfig+0x4c4>)
 80040ce:	61bb      	str	r3, [r7, #24]
        break;
 80040d0:	e00c      	b.n	80040ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040d2:	f7fe fc33 	bl	800293c <HAL_RCC_GetSysClockFreq>
 80040d6:	61b8      	str	r0, [r7, #24]
        break;
 80040d8:	e008      	b.n	80040ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040de:	61bb      	str	r3, [r7, #24]
        break;
 80040e0:	e004      	b.n	80040ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	77bb      	strb	r3, [r7, #30]
        break;
 80040ea:	bf00      	nop
    }

    if (pclk != 0U)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d018      	beq.n	8004124 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	085a      	lsrs	r2, r3, #1
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	441a      	add	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b0f      	cmp	r3, #15
 800410a:	d909      	bls.n	8004120 <UART_SetConfig+0x4a0>
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004112:	d205      	bcs.n	8004120 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	e001      	b.n	8004124 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2200      	movs	r2, #0
 8004128:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004130:	7fbb      	ldrb	r3, [r7, #30]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3720      	adds	r7, #32
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40007c00 	.word	0x40007c00
 8004140:	40023800 	.word	0x40023800
 8004144:	00f42400 	.word	0x00f42400

08004148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	f003 0308 	and.w	r3, r3, #8
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01a      	beq.n	800425e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004246:	d10a      	bne.n	800425e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b098      	sub	sp, #96	@ 0x60
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800429c:	f7fc ffaa 	bl	80011f4 <HAL_GetTick>
 80042a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d12e      	bne.n	800430e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f88c 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d021      	beq.n	800430e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042de:	653b      	str	r3, [r7, #80]	@ 0x50
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80042ea:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e062      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b04      	cmp	r3, #4
 800431a:	d149      	bne.n	80043b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f856 	bl	80043dc <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d03c      	beq.n	80043b0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433e:	e853 3f00 	ldrex	r3, [r3]
 8004342:	623b      	str	r3, [r7, #32]
   return(result);
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800434a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	461a      	mov	r2, r3
 8004352:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004354:	633b      	str	r3, [r7, #48]	@ 0x30
 8004356:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004358:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800435a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800435c:	e841 2300 	strex	r3, r2, [r1]
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004364:	2b00      	cmp	r3, #0
 8004366:	d1e6      	bne.n	8004336 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3308      	adds	r3, #8
 800436e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60fb      	str	r3, [r7, #12]
   return(result);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0301 	bic.w	r3, r3, #1
 800437e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3308      	adds	r3, #8
 8004386:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004388:	61fa      	str	r2, [r7, #28]
 800438a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	69b9      	ldr	r1, [r7, #24]
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	617b      	str	r3, [r7, #20]
   return(result);
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e011      	b.n	80043d4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2220      	movs	r2, #32
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3758      	adds	r7, #88	@ 0x58
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	603b      	str	r3, [r7, #0]
 80043e8:	4613      	mov	r3, r2
 80043ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	e04f      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f4:	d04b      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fc fefd 	bl	80011f4 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <UART_WaitOnFlagUntilTimeout+0x30>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e04e      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d037      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b80      	cmp	r3, #128	@ 0x80
 8004422:	d034      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d031      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69db      	ldr	r3, [r3, #28]
 8004430:	f003 0308 	and.w	r3, r3, #8
 8004434:	2b08      	cmp	r3, #8
 8004436:	d110      	bne.n	800445a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2208      	movs	r2, #8
 800443e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f838 	bl	80044b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2208      	movs	r2, #8
 800444a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e029      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004464:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004468:	d111      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004472:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f000 f81e 	bl	80044b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2220      	movs	r2, #32
 800447e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e00f      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4013      	ands	r3, r2
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d0a0      	beq.n	80043ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b095      	sub	sp, #84	@ 0x54
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	461a      	mov	r2, r3
 80044da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80044de:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e6      	bne.n	80044be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3308      	adds	r3, #8
 80044f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	6a3b      	ldr	r3, [r7, #32]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	f023 0301 	bic.w	r3, r3, #1
 8004506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	3308      	adds	r3, #8
 800450e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004518:	e841 2300 	strex	r3, r2, [r1]
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1e5      	bne.n	80044f0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	2b01      	cmp	r3, #1
 800452a:	d118      	bne.n	800455e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	60bb      	str	r3, [r7, #8]
   return(result);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0310 	bic.w	r3, r3, #16
 8004540:	647b      	str	r3, [r7, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	461a      	mov	r2, r3
 8004548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e6      	bne.n	800452c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004572:	bf00      	nop
 8004574:	3754      	adds	r7, #84	@ 0x54
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr
	...

08004580 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004580:	b084      	sub	sp, #16
 8004582:	b580      	push	{r7, lr}
 8004584:	b084      	sub	sp, #16
 8004586:	af00      	add	r7, sp, #0
 8004588:	6078      	str	r0, [r7, #4]
 800458a:	f107 001c 	add.w	r0, r7, #28
 800458e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004592:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004596:	2b01      	cmp	r3, #1
 8004598:	d121      	bne.n	80045de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	4b21      	ldr	r3, [pc, #132]	@ (8004630 <USB_CoreInit+0xb0>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fa92 	bl	8004afc <USB_CoreReset>
 80045d8:	4603      	mov	r3, r0
 80045da:	73fb      	strb	r3, [r7, #15]
 80045dc:	e010      	b.n	8004600 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa86 	bl	8004afc <USB_CoreReset>
 80045f0:	4603      	mov	r3, r0
 80045f2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8004600:	7fbb      	ldrb	r3, [r7, #30]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d10b      	bne.n	800461e <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f043 0206 	orr.w	r2, r3, #6
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f043 0220 	orr.w	r2, r3, #32
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800461e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800462a:	b004      	add	sp, #16
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	ffbdffbf 	.word	0xffbdffbf

08004634 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f023 0201 	bic.w	r2, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	460b      	mov	r3, r1
 8004660:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004662:	2300      	movs	r3, #0
 8004664:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004672:	78fb      	ldrb	r3, [r7, #3]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d115      	bne.n	80046a4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004684:	200a      	movs	r0, #10
 8004686:	f7fc fdc1 	bl	800120c <HAL_Delay>
      ms += 10U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	330a      	adds	r3, #10
 800468e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa25 	bl	8004ae0 <USB_GetMode>
 8004696:	4603      	mov	r3, r0
 8004698:	2b01      	cmp	r3, #1
 800469a:	d01e      	beq.n	80046da <USB_SetCurrentMode+0x84>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2bc7      	cmp	r3, #199	@ 0xc7
 80046a0:	d9f0      	bls.n	8004684 <USB_SetCurrentMode+0x2e>
 80046a2:	e01a      	b.n	80046da <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80046a4:	78fb      	ldrb	r3, [r7, #3]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d115      	bne.n	80046d6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80046b6:	200a      	movs	r0, #10
 80046b8:	f7fc fda8 	bl	800120c <HAL_Delay>
      ms += 10U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	330a      	adds	r3, #10
 80046c0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f000 fa0c 	bl	8004ae0 <USB_GetMode>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <USB_SetCurrentMode+0x84>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2bc7      	cmp	r3, #199	@ 0xc7
 80046d2:	d9f0      	bls.n	80046b6 <USB_SetCurrentMode+0x60>
 80046d4:	e001      	b.n	80046da <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e005      	b.n	80046e6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2bc8      	cmp	r3, #200	@ 0xc8
 80046de:	d101      	bne.n	80046e4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e000      	b.n	80046e6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046f0:	b084      	sub	sp, #16
 80046f2:	b580      	push	{r7, lr}
 80046f4:	b086      	sub	sp, #24
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
 80046fa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80046fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	e009      	b.n	8004724 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3340      	adds	r3, #64	@ 0x40
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	2200      	movs	r2, #0
 800471c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	3301      	adds	r3, #1
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	2b0e      	cmp	r3, #14
 8004728:	d9f2      	bls.n	8004710 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800472a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800472e:	2b00      	cmp	r3, #0
 8004730:	d11c      	bne.n	800476c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004740:	f043 0302 	orr.w	r3, r3, #2
 8004744:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e005      	b.n	8004778 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800477e:	461a      	mov	r2, r3
 8004780:	2300      	movs	r3, #0
 8004782:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004784:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004788:	2b01      	cmp	r3, #1
 800478a:	d10d      	bne.n	80047a8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800478c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004790:	2b00      	cmp	r3, #0
 8004792:	d104      	bne.n	800479e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004794:	2100      	movs	r1, #0
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f968 	bl	8004a6c <USB_SetDevSpeed>
 800479c:	e008      	b.n	80047b0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800479e:	2101      	movs	r1, #1
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f963 	bl	8004a6c <USB_SetDevSpeed>
 80047a6:	e003      	b.n	80047b0 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80047a8:	2103      	movs	r1, #3
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f95e 	bl	8004a6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80047b0:	2110      	movs	r1, #16
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f8fa 	bl	80049ac <USB_FlushTxFifo>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f924 	bl	8004a10 <USB_FlushRxFifo>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d8:	461a      	mov	r2, r3
 80047da:	2300      	movs	r3, #0
 80047dc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047e4:	461a      	mov	r2, r3
 80047e6:	2300      	movs	r3, #0
 80047e8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
 80047fa:	e043      	b.n	8004884 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800480e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004812:	d118      	bne.n	8004846 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10a      	bne.n	8004830 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004826:	461a      	mov	r2, r3
 8004828:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800482c:	6013      	str	r3, [r2, #0]
 800482e:	e013      	b.n	8004858 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	015a      	lsls	r2, r3, #5
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800483c:	461a      	mov	r2, r3
 800483e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	e008      	b.n	8004858 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004852:	461a      	mov	r2, r3
 8004854:	2300      	movs	r3, #0
 8004856:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	015a      	lsls	r2, r3, #5
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4413      	add	r3, r2
 8004860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004864:	461a      	mov	r2, r3
 8004866:	2300      	movs	r3, #0
 8004868:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004876:	461a      	mov	r2, r3
 8004878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800487c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	3301      	adds	r3, #1
 8004882:	613b      	str	r3, [r7, #16]
 8004884:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004888:	461a      	mov	r2, r3
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4293      	cmp	r3, r2
 800488e:	d3b5      	bcc.n	80047fc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	e043      	b.n	800491e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048ac:	d118      	bne.n	80048e0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d10a      	bne.n	80048ca <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048c0:	461a      	mov	r2, r3
 80048c2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80048c6:	6013      	str	r3, [r2, #0]
 80048c8:	e013      	b.n	80048f2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	015a      	lsls	r2, r3, #5
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4413      	add	r3, r2
 80048d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048d6:	461a      	mov	r2, r3
 80048d8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	e008      	b.n	80048f2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048ec:	461a      	mov	r2, r3
 80048ee:	2300      	movs	r3, #0
 80048f0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004910:	461a      	mov	r2, r3
 8004912:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004916:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3301      	adds	r3, #1
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004922:	461a      	mov	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4293      	cmp	r3, r2
 8004928:	d3b5      	bcc.n	8004896 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	68fa      	ldr	r2, [r7, #12]
 8004934:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004938:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800493c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800494a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800494c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004950:	2b00      	cmp	r3, #0
 8004952:	d105      	bne.n	8004960 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	f043 0210 	orr.w	r2, r3, #16
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	699a      	ldr	r2, [r3, #24]
 8004964:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <USB_DevInit+0x2b4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800496c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	f043 0208 	orr.w	r2, r3, #8
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004980:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004984:	2b01      	cmp	r3, #1
 8004986:	d105      	bne.n	8004994 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699a      	ldr	r2, [r3, #24]
 800498c:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <USB_DevInit+0x2b8>)
 800498e:	4313      	orrs	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004994:	7dfb      	ldrb	r3, [r7, #23]
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049a0:	b004      	add	sp, #16
 80049a2:	4770      	bx	lr
 80049a4:	803c3800 	.word	0x803c3800
 80049a8:	40000004 	.word	0x40000004

080049ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3301      	adds	r3, #1
 80049be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049c6:	d901      	bls.n	80049cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e01b      	b.n	8004a04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	daf2      	bge.n	80049ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	019b      	lsls	r3, r3, #6
 80049dc:	f043 0220 	orr.w	r2, r3, #32
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80049f0:	d901      	bls.n	80049f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e006      	b.n	8004a04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f003 0320 	and.w	r3, r3, #32
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d0f0      	beq.n	80049e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a28:	d901      	bls.n	8004a2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e018      	b.n	8004a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	daf2      	bge.n	8004a1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3301      	adds	r3, #1
 8004a44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a4c:	d901      	bls.n	8004a52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e006      	b.n	8004a60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b10      	cmp	r3, #16
 8004a5c:	d0f0      	beq.n	8004a40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	68f9      	ldr	r1, [r7, #12]
 8004a88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ab8:	f023 0303 	bic.w	r3, r3, #3
 8004abc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004acc:	f043 0302 	orr.w	r3, r3, #2
 8004ad0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3714      	adds	r7, #20
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	f003 0301 	and.w	r3, r3, #1
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b14:	d901      	bls.n	8004b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e022      	b.n	8004b60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	daf2      	bge.n	8004b08 <USB_CoreReset+0xc>

  count = 10U;
 8004b22:	230a      	movs	r3, #10
 8004b24:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004b26:	e002      	b.n	8004b2e <USB_CoreReset+0x32>
  {
    count--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1f9      	bne.n	8004b28 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f043 0201 	orr.w	r2, r3, #1
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b4c:	d901      	bls.n	8004b52 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e006      	b.n	8004b60 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d0f0      	beq.n	8004b40 <USB_CoreReset+0x44>

  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <siprintf>:
 8004b6c:	b40e      	push	{r1, r2, r3}
 8004b6e:	b510      	push	{r4, lr}
 8004b70:	b09d      	sub	sp, #116	@ 0x74
 8004b72:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004b74:	9002      	str	r0, [sp, #8]
 8004b76:	9006      	str	r0, [sp, #24]
 8004b78:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b7c:	480a      	ldr	r0, [pc, #40]	@ (8004ba8 <siprintf+0x3c>)
 8004b7e:	9107      	str	r1, [sp, #28]
 8004b80:	9104      	str	r1, [sp, #16]
 8004b82:	490a      	ldr	r1, [pc, #40]	@ (8004bac <siprintf+0x40>)
 8004b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b88:	9105      	str	r1, [sp, #20]
 8004b8a:	2400      	movs	r4, #0
 8004b8c:	a902      	add	r1, sp, #8
 8004b8e:	6800      	ldr	r0, [r0, #0]
 8004b90:	9301      	str	r3, [sp, #4]
 8004b92:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004b94:	f000 f994 	bl	8004ec0 <_svfiprintf_r>
 8004b98:	9b02      	ldr	r3, [sp, #8]
 8004b9a:	701c      	strb	r4, [r3, #0]
 8004b9c:	b01d      	add	sp, #116	@ 0x74
 8004b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba2:	b003      	add	sp, #12
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	2000000c 	.word	0x2000000c
 8004bac:	ffff0208 	.word	0xffff0208

08004bb0 <memset>:
 8004bb0:	4402      	add	r2, r0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d100      	bne.n	8004bba <memset+0xa>
 8004bb8:	4770      	bx	lr
 8004bba:	f803 1b01 	strb.w	r1, [r3], #1
 8004bbe:	e7f9      	b.n	8004bb4 <memset+0x4>

08004bc0 <__errno>:
 8004bc0:	4b01      	ldr	r3, [pc, #4]	@ (8004bc8 <__errno+0x8>)
 8004bc2:	6818      	ldr	r0, [r3, #0]
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	2000000c 	.word	0x2000000c

08004bcc <__libc_init_array>:
 8004bcc:	b570      	push	{r4, r5, r6, lr}
 8004bce:	4d0d      	ldr	r5, [pc, #52]	@ (8004c04 <__libc_init_array+0x38>)
 8004bd0:	4c0d      	ldr	r4, [pc, #52]	@ (8004c08 <__libc_init_array+0x3c>)
 8004bd2:	1b64      	subs	r4, r4, r5
 8004bd4:	10a4      	asrs	r4, r4, #2
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	42a6      	cmp	r6, r4
 8004bda:	d109      	bne.n	8004bf0 <__libc_init_array+0x24>
 8004bdc:	4d0b      	ldr	r5, [pc, #44]	@ (8004c0c <__libc_init_array+0x40>)
 8004bde:	4c0c      	ldr	r4, [pc, #48]	@ (8004c10 <__libc_init_array+0x44>)
 8004be0:	f000 fc64 	bl	80054ac <_init>
 8004be4:	1b64      	subs	r4, r4, r5
 8004be6:	10a4      	asrs	r4, r4, #2
 8004be8:	2600      	movs	r6, #0
 8004bea:	42a6      	cmp	r6, r4
 8004bec:	d105      	bne.n	8004bfa <__libc_init_array+0x2e>
 8004bee:	bd70      	pop	{r4, r5, r6, pc}
 8004bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf4:	4798      	blx	r3
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	e7ee      	b.n	8004bd8 <__libc_init_array+0xc>
 8004bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfe:	4798      	blx	r3
 8004c00:	3601      	adds	r6, #1
 8004c02:	e7f2      	b.n	8004bea <__libc_init_array+0x1e>
 8004c04:	08005530 	.word	0x08005530
 8004c08:	08005530 	.word	0x08005530
 8004c0c:	08005530 	.word	0x08005530
 8004c10:	08005534 	.word	0x08005534

08004c14 <__retarget_lock_acquire_recursive>:
 8004c14:	4770      	bx	lr

08004c16 <__retarget_lock_release_recursive>:
 8004c16:	4770      	bx	lr

08004c18 <_free_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4605      	mov	r5, r0
 8004c1c:	2900      	cmp	r1, #0
 8004c1e:	d041      	beq.n	8004ca4 <_free_r+0x8c>
 8004c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c24:	1f0c      	subs	r4, r1, #4
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bfb8      	it	lt
 8004c2a:	18e4      	addlt	r4, r4, r3
 8004c2c:	f000 f8e0 	bl	8004df0 <__malloc_lock>
 8004c30:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca8 <_free_r+0x90>)
 8004c32:	6813      	ldr	r3, [r2, #0]
 8004c34:	b933      	cbnz	r3, 8004c44 <_free_r+0x2c>
 8004c36:	6063      	str	r3, [r4, #4]
 8004c38:	6014      	str	r4, [r2, #0]
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c40:	f000 b8dc 	b.w	8004dfc <__malloc_unlock>
 8004c44:	42a3      	cmp	r3, r4
 8004c46:	d908      	bls.n	8004c5a <_free_r+0x42>
 8004c48:	6820      	ldr	r0, [r4, #0]
 8004c4a:	1821      	adds	r1, r4, r0
 8004c4c:	428b      	cmp	r3, r1
 8004c4e:	bf01      	itttt	eq
 8004c50:	6819      	ldreq	r1, [r3, #0]
 8004c52:	685b      	ldreq	r3, [r3, #4]
 8004c54:	1809      	addeq	r1, r1, r0
 8004c56:	6021      	streq	r1, [r4, #0]
 8004c58:	e7ed      	b.n	8004c36 <_free_r+0x1e>
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	b10b      	cbz	r3, 8004c64 <_free_r+0x4c>
 8004c60:	42a3      	cmp	r3, r4
 8004c62:	d9fa      	bls.n	8004c5a <_free_r+0x42>
 8004c64:	6811      	ldr	r1, [r2, #0]
 8004c66:	1850      	adds	r0, r2, r1
 8004c68:	42a0      	cmp	r0, r4
 8004c6a:	d10b      	bne.n	8004c84 <_free_r+0x6c>
 8004c6c:	6820      	ldr	r0, [r4, #0]
 8004c6e:	4401      	add	r1, r0
 8004c70:	1850      	adds	r0, r2, r1
 8004c72:	4283      	cmp	r3, r0
 8004c74:	6011      	str	r1, [r2, #0]
 8004c76:	d1e0      	bne.n	8004c3a <_free_r+0x22>
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	6053      	str	r3, [r2, #4]
 8004c7e:	4408      	add	r0, r1
 8004c80:	6010      	str	r0, [r2, #0]
 8004c82:	e7da      	b.n	8004c3a <_free_r+0x22>
 8004c84:	d902      	bls.n	8004c8c <_free_r+0x74>
 8004c86:	230c      	movs	r3, #12
 8004c88:	602b      	str	r3, [r5, #0]
 8004c8a:	e7d6      	b.n	8004c3a <_free_r+0x22>
 8004c8c:	6820      	ldr	r0, [r4, #0]
 8004c8e:	1821      	adds	r1, r4, r0
 8004c90:	428b      	cmp	r3, r1
 8004c92:	bf04      	itt	eq
 8004c94:	6819      	ldreq	r1, [r3, #0]
 8004c96:	685b      	ldreq	r3, [r3, #4]
 8004c98:	6063      	str	r3, [r4, #4]
 8004c9a:	bf04      	itt	eq
 8004c9c:	1809      	addeq	r1, r1, r0
 8004c9e:	6021      	streq	r1, [r4, #0]
 8004ca0:	6054      	str	r4, [r2, #4]
 8004ca2:	e7ca      	b.n	8004c3a <_free_r+0x22>
 8004ca4:	bd38      	pop	{r3, r4, r5, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200009fc 	.word	0x200009fc

08004cac <sbrk_aligned>:
 8004cac:	b570      	push	{r4, r5, r6, lr}
 8004cae:	4e0f      	ldr	r6, [pc, #60]	@ (8004cec <sbrk_aligned+0x40>)
 8004cb0:	460c      	mov	r4, r1
 8004cb2:	6831      	ldr	r1, [r6, #0]
 8004cb4:	4605      	mov	r5, r0
 8004cb6:	b911      	cbnz	r1, 8004cbe <sbrk_aligned+0x12>
 8004cb8:	f000 fba4 	bl	8005404 <_sbrk_r>
 8004cbc:	6030      	str	r0, [r6, #0]
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 fb9f 	bl	8005404 <_sbrk_r>
 8004cc6:	1c43      	adds	r3, r0, #1
 8004cc8:	d103      	bne.n	8004cd2 <sbrk_aligned+0x26>
 8004cca:	f04f 34ff 	mov.w	r4, #4294967295
 8004cce:	4620      	mov	r0, r4
 8004cd0:	bd70      	pop	{r4, r5, r6, pc}
 8004cd2:	1cc4      	adds	r4, r0, #3
 8004cd4:	f024 0403 	bic.w	r4, r4, #3
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d0f8      	beq.n	8004cce <sbrk_aligned+0x22>
 8004cdc:	1a21      	subs	r1, r4, r0
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 fb90 	bl	8005404 <_sbrk_r>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d1f2      	bne.n	8004cce <sbrk_aligned+0x22>
 8004ce8:	e7ef      	b.n	8004cca <sbrk_aligned+0x1e>
 8004cea:	bf00      	nop
 8004cec:	200009f8 	.word	0x200009f8

08004cf0 <_malloc_r>:
 8004cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cf4:	1ccd      	adds	r5, r1, #3
 8004cf6:	f025 0503 	bic.w	r5, r5, #3
 8004cfa:	3508      	adds	r5, #8
 8004cfc:	2d0c      	cmp	r5, #12
 8004cfe:	bf38      	it	cc
 8004d00:	250c      	movcc	r5, #12
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	4606      	mov	r6, r0
 8004d06:	db01      	blt.n	8004d0c <_malloc_r+0x1c>
 8004d08:	42a9      	cmp	r1, r5
 8004d0a:	d904      	bls.n	8004d16 <_malloc_r+0x26>
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	6033      	str	r3, [r6, #0]
 8004d10:	2000      	movs	r0, #0
 8004d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004dec <_malloc_r+0xfc>
 8004d1a:	f000 f869 	bl	8004df0 <__malloc_lock>
 8004d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d22:	461c      	mov	r4, r3
 8004d24:	bb44      	cbnz	r4, 8004d78 <_malloc_r+0x88>
 8004d26:	4629      	mov	r1, r5
 8004d28:	4630      	mov	r0, r6
 8004d2a:	f7ff ffbf 	bl	8004cac <sbrk_aligned>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	4604      	mov	r4, r0
 8004d32:	d158      	bne.n	8004de6 <_malloc_r+0xf6>
 8004d34:	f8d8 4000 	ldr.w	r4, [r8]
 8004d38:	4627      	mov	r7, r4
 8004d3a:	2f00      	cmp	r7, #0
 8004d3c:	d143      	bne.n	8004dc6 <_malloc_r+0xd6>
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d04b      	beq.n	8004dda <_malloc_r+0xea>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	4639      	mov	r1, r7
 8004d46:	4630      	mov	r0, r6
 8004d48:	eb04 0903 	add.w	r9, r4, r3
 8004d4c:	f000 fb5a 	bl	8005404 <_sbrk_r>
 8004d50:	4581      	cmp	r9, r0
 8004d52:	d142      	bne.n	8004dda <_malloc_r+0xea>
 8004d54:	6821      	ldr	r1, [r4, #0]
 8004d56:	1a6d      	subs	r5, r5, r1
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4630      	mov	r0, r6
 8004d5c:	f7ff ffa6 	bl	8004cac <sbrk_aligned>
 8004d60:	3001      	adds	r0, #1
 8004d62:	d03a      	beq.n	8004dda <_malloc_r+0xea>
 8004d64:	6823      	ldr	r3, [r4, #0]
 8004d66:	442b      	add	r3, r5
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	bb62      	cbnz	r2, 8004dcc <_malloc_r+0xdc>
 8004d72:	f8c8 7000 	str.w	r7, [r8]
 8004d76:	e00f      	b.n	8004d98 <_malloc_r+0xa8>
 8004d78:	6822      	ldr	r2, [r4, #0]
 8004d7a:	1b52      	subs	r2, r2, r5
 8004d7c:	d420      	bmi.n	8004dc0 <_malloc_r+0xd0>
 8004d7e:	2a0b      	cmp	r2, #11
 8004d80:	d917      	bls.n	8004db2 <_malloc_r+0xc2>
 8004d82:	1961      	adds	r1, r4, r5
 8004d84:	42a3      	cmp	r3, r4
 8004d86:	6025      	str	r5, [r4, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	6059      	strne	r1, [r3, #4]
 8004d8c:	6863      	ldr	r3, [r4, #4]
 8004d8e:	bf08      	it	eq
 8004d90:	f8c8 1000 	streq.w	r1, [r8]
 8004d94:	5162      	str	r2, [r4, r5]
 8004d96:	604b      	str	r3, [r1, #4]
 8004d98:	4630      	mov	r0, r6
 8004d9a:	f000 f82f 	bl	8004dfc <__malloc_unlock>
 8004d9e:	f104 000b 	add.w	r0, r4, #11
 8004da2:	1d23      	adds	r3, r4, #4
 8004da4:	f020 0007 	bic.w	r0, r0, #7
 8004da8:	1ac2      	subs	r2, r0, r3
 8004daa:	bf1c      	itt	ne
 8004dac:	1a1b      	subne	r3, r3, r0
 8004dae:	50a3      	strne	r3, [r4, r2]
 8004db0:	e7af      	b.n	8004d12 <_malloc_r+0x22>
 8004db2:	6862      	ldr	r2, [r4, #4]
 8004db4:	42a3      	cmp	r3, r4
 8004db6:	bf0c      	ite	eq
 8004db8:	f8c8 2000 	streq.w	r2, [r8]
 8004dbc:	605a      	strne	r2, [r3, #4]
 8004dbe:	e7eb      	b.n	8004d98 <_malloc_r+0xa8>
 8004dc0:	4623      	mov	r3, r4
 8004dc2:	6864      	ldr	r4, [r4, #4]
 8004dc4:	e7ae      	b.n	8004d24 <_malloc_r+0x34>
 8004dc6:	463c      	mov	r4, r7
 8004dc8:	687f      	ldr	r7, [r7, #4]
 8004dca:	e7b6      	b.n	8004d3a <_malloc_r+0x4a>
 8004dcc:	461a      	mov	r2, r3
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	42a3      	cmp	r3, r4
 8004dd2:	d1fb      	bne.n	8004dcc <_malloc_r+0xdc>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	6053      	str	r3, [r2, #4]
 8004dd8:	e7de      	b.n	8004d98 <_malloc_r+0xa8>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	6033      	str	r3, [r6, #0]
 8004dde:	4630      	mov	r0, r6
 8004de0:	f000 f80c 	bl	8004dfc <__malloc_unlock>
 8004de4:	e794      	b.n	8004d10 <_malloc_r+0x20>
 8004de6:	6005      	str	r5, [r0, #0]
 8004de8:	e7d6      	b.n	8004d98 <_malloc_r+0xa8>
 8004dea:	bf00      	nop
 8004dec:	200009fc 	.word	0x200009fc

08004df0 <__malloc_lock>:
 8004df0:	4801      	ldr	r0, [pc, #4]	@ (8004df8 <__malloc_lock+0x8>)
 8004df2:	f7ff bf0f 	b.w	8004c14 <__retarget_lock_acquire_recursive>
 8004df6:	bf00      	nop
 8004df8:	200009f4 	.word	0x200009f4

08004dfc <__malloc_unlock>:
 8004dfc:	4801      	ldr	r0, [pc, #4]	@ (8004e04 <__malloc_unlock+0x8>)
 8004dfe:	f7ff bf0a 	b.w	8004c16 <__retarget_lock_release_recursive>
 8004e02:	bf00      	nop
 8004e04:	200009f4 	.word	0x200009f4

08004e08 <__ssputs_r>:
 8004e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e0c:	688e      	ldr	r6, [r1, #8]
 8004e0e:	461f      	mov	r7, r3
 8004e10:	42be      	cmp	r6, r7
 8004e12:	680b      	ldr	r3, [r1, #0]
 8004e14:	4682      	mov	sl, r0
 8004e16:	460c      	mov	r4, r1
 8004e18:	4690      	mov	r8, r2
 8004e1a:	d82d      	bhi.n	8004e78 <__ssputs_r+0x70>
 8004e1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004e20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004e24:	d026      	beq.n	8004e74 <__ssputs_r+0x6c>
 8004e26:	6965      	ldr	r5, [r4, #20]
 8004e28:	6909      	ldr	r1, [r1, #16]
 8004e2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e2e:	eba3 0901 	sub.w	r9, r3, r1
 8004e32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e36:	1c7b      	adds	r3, r7, #1
 8004e38:	444b      	add	r3, r9
 8004e3a:	106d      	asrs	r5, r5, #1
 8004e3c:	429d      	cmp	r5, r3
 8004e3e:	bf38      	it	cc
 8004e40:	461d      	movcc	r5, r3
 8004e42:	0553      	lsls	r3, r2, #21
 8004e44:	d527      	bpl.n	8004e96 <__ssputs_r+0x8e>
 8004e46:	4629      	mov	r1, r5
 8004e48:	f7ff ff52 	bl	8004cf0 <_malloc_r>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	b360      	cbz	r0, 8004eaa <__ssputs_r+0xa2>
 8004e50:	6921      	ldr	r1, [r4, #16]
 8004e52:	464a      	mov	r2, r9
 8004e54:	f000 fae6 	bl	8005424 <memcpy>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e62:	81a3      	strh	r3, [r4, #12]
 8004e64:	6126      	str	r6, [r4, #16]
 8004e66:	6165      	str	r5, [r4, #20]
 8004e68:	444e      	add	r6, r9
 8004e6a:	eba5 0509 	sub.w	r5, r5, r9
 8004e6e:	6026      	str	r6, [r4, #0]
 8004e70:	60a5      	str	r5, [r4, #8]
 8004e72:	463e      	mov	r6, r7
 8004e74:	42be      	cmp	r6, r7
 8004e76:	d900      	bls.n	8004e7a <__ssputs_r+0x72>
 8004e78:	463e      	mov	r6, r7
 8004e7a:	6820      	ldr	r0, [r4, #0]
 8004e7c:	4632      	mov	r2, r6
 8004e7e:	4641      	mov	r1, r8
 8004e80:	f000 faa6 	bl	80053d0 <memmove>
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	1b9b      	subs	r3, r3, r6
 8004e88:	60a3      	str	r3, [r4, #8]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	4433      	add	r3, r6
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	2000      	movs	r0, #0
 8004e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e96:	462a      	mov	r2, r5
 8004e98:	f000 fad2 	bl	8005440 <_realloc_r>
 8004e9c:	4606      	mov	r6, r0
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d1e0      	bne.n	8004e64 <__ssputs_r+0x5c>
 8004ea2:	6921      	ldr	r1, [r4, #16]
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	f7ff feb7 	bl	8004c18 <_free_r>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	f8ca 3000 	str.w	r3, [sl]
 8004eb0:	89a3      	ldrh	r3, [r4, #12]
 8004eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004eb6:	81a3      	strh	r3, [r4, #12]
 8004eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebc:	e7e9      	b.n	8004e92 <__ssputs_r+0x8a>
	...

08004ec0 <_svfiprintf_r>:
 8004ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ec4:	4698      	mov	r8, r3
 8004ec6:	898b      	ldrh	r3, [r1, #12]
 8004ec8:	061b      	lsls	r3, r3, #24
 8004eca:	b09d      	sub	sp, #116	@ 0x74
 8004ecc:	4607      	mov	r7, r0
 8004ece:	460d      	mov	r5, r1
 8004ed0:	4614      	mov	r4, r2
 8004ed2:	d510      	bpl.n	8004ef6 <_svfiprintf_r+0x36>
 8004ed4:	690b      	ldr	r3, [r1, #16]
 8004ed6:	b973      	cbnz	r3, 8004ef6 <_svfiprintf_r+0x36>
 8004ed8:	2140      	movs	r1, #64	@ 0x40
 8004eda:	f7ff ff09 	bl	8004cf0 <_malloc_r>
 8004ede:	6028      	str	r0, [r5, #0]
 8004ee0:	6128      	str	r0, [r5, #16]
 8004ee2:	b930      	cbnz	r0, 8004ef2 <_svfiprintf_r+0x32>
 8004ee4:	230c      	movs	r3, #12
 8004ee6:	603b      	str	r3, [r7, #0]
 8004ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8004eec:	b01d      	add	sp, #116	@ 0x74
 8004eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef2:	2340      	movs	r3, #64	@ 0x40
 8004ef4:	616b      	str	r3, [r5, #20]
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004efa:	2320      	movs	r3, #32
 8004efc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004f00:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f04:	2330      	movs	r3, #48	@ 0x30
 8004f06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80050a4 <_svfiprintf_r+0x1e4>
 8004f0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004f0e:	f04f 0901 	mov.w	r9, #1
 8004f12:	4623      	mov	r3, r4
 8004f14:	469a      	mov	sl, r3
 8004f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f1a:	b10a      	cbz	r2, 8004f20 <_svfiprintf_r+0x60>
 8004f1c:	2a25      	cmp	r2, #37	@ 0x25
 8004f1e:	d1f9      	bne.n	8004f14 <_svfiprintf_r+0x54>
 8004f20:	ebba 0b04 	subs.w	fp, sl, r4
 8004f24:	d00b      	beq.n	8004f3e <_svfiprintf_r+0x7e>
 8004f26:	465b      	mov	r3, fp
 8004f28:	4622      	mov	r2, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4638      	mov	r0, r7
 8004f2e:	f7ff ff6b 	bl	8004e08 <__ssputs_r>
 8004f32:	3001      	adds	r0, #1
 8004f34:	f000 80a7 	beq.w	8005086 <_svfiprintf_r+0x1c6>
 8004f38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f3a:	445a      	add	r2, fp
 8004f3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004f3e:	f89a 3000 	ldrb.w	r3, [sl]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 809f 	beq.w	8005086 <_svfiprintf_r+0x1c6>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f52:	f10a 0a01 	add.w	sl, sl, #1
 8004f56:	9304      	str	r3, [sp, #16]
 8004f58:	9307      	str	r3, [sp, #28]
 8004f5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004f5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004f60:	4654      	mov	r4, sl
 8004f62:	2205      	movs	r2, #5
 8004f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f68:	484e      	ldr	r0, [pc, #312]	@ (80050a4 <_svfiprintf_r+0x1e4>)
 8004f6a:	f7fb f971 	bl	8000250 <memchr>
 8004f6e:	9a04      	ldr	r2, [sp, #16]
 8004f70:	b9d8      	cbnz	r0, 8004faa <_svfiprintf_r+0xea>
 8004f72:	06d0      	lsls	r0, r2, #27
 8004f74:	bf44      	itt	mi
 8004f76:	2320      	movmi	r3, #32
 8004f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f7c:	0711      	lsls	r1, r2, #28
 8004f7e:	bf44      	itt	mi
 8004f80:	232b      	movmi	r3, #43	@ 0x2b
 8004f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f86:	f89a 3000 	ldrb.w	r3, [sl]
 8004f8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f8c:	d015      	beq.n	8004fba <_svfiprintf_r+0xfa>
 8004f8e:	9a07      	ldr	r2, [sp, #28]
 8004f90:	4654      	mov	r4, sl
 8004f92:	2000      	movs	r0, #0
 8004f94:	f04f 0c0a 	mov.w	ip, #10
 8004f98:	4621      	mov	r1, r4
 8004f9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f9e:	3b30      	subs	r3, #48	@ 0x30
 8004fa0:	2b09      	cmp	r3, #9
 8004fa2:	d94b      	bls.n	800503c <_svfiprintf_r+0x17c>
 8004fa4:	b1b0      	cbz	r0, 8004fd4 <_svfiprintf_r+0x114>
 8004fa6:	9207      	str	r2, [sp, #28]
 8004fa8:	e014      	b.n	8004fd4 <_svfiprintf_r+0x114>
 8004faa:	eba0 0308 	sub.w	r3, r0, r8
 8004fae:	fa09 f303 	lsl.w	r3, r9, r3
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	9304      	str	r3, [sp, #16]
 8004fb6:	46a2      	mov	sl, r4
 8004fb8:	e7d2      	b.n	8004f60 <_svfiprintf_r+0xa0>
 8004fba:	9b03      	ldr	r3, [sp, #12]
 8004fbc:	1d19      	adds	r1, r3, #4
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	9103      	str	r1, [sp, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	bfbb      	ittet	lt
 8004fc6:	425b      	neglt	r3, r3
 8004fc8:	f042 0202 	orrlt.w	r2, r2, #2
 8004fcc:	9307      	strge	r3, [sp, #28]
 8004fce:	9307      	strlt	r3, [sp, #28]
 8004fd0:	bfb8      	it	lt
 8004fd2:	9204      	strlt	r2, [sp, #16]
 8004fd4:	7823      	ldrb	r3, [r4, #0]
 8004fd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8004fd8:	d10a      	bne.n	8004ff0 <_svfiprintf_r+0x130>
 8004fda:	7863      	ldrb	r3, [r4, #1]
 8004fdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004fde:	d132      	bne.n	8005046 <_svfiprintf_r+0x186>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	1d1a      	adds	r2, r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	9203      	str	r2, [sp, #12]
 8004fe8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004fec:	3402      	adds	r4, #2
 8004fee:	9305      	str	r3, [sp, #20]
 8004ff0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80050b4 <_svfiprintf_r+0x1f4>
 8004ff4:	7821      	ldrb	r1, [r4, #0]
 8004ff6:	2203      	movs	r2, #3
 8004ff8:	4650      	mov	r0, sl
 8004ffa:	f7fb f929 	bl	8000250 <memchr>
 8004ffe:	b138      	cbz	r0, 8005010 <_svfiprintf_r+0x150>
 8005000:	9b04      	ldr	r3, [sp, #16]
 8005002:	eba0 000a 	sub.w	r0, r0, sl
 8005006:	2240      	movs	r2, #64	@ 0x40
 8005008:	4082      	lsls	r2, r0
 800500a:	4313      	orrs	r3, r2
 800500c:	3401      	adds	r4, #1
 800500e:	9304      	str	r3, [sp, #16]
 8005010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005014:	4824      	ldr	r0, [pc, #144]	@ (80050a8 <_svfiprintf_r+0x1e8>)
 8005016:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800501a:	2206      	movs	r2, #6
 800501c:	f7fb f918 	bl	8000250 <memchr>
 8005020:	2800      	cmp	r0, #0
 8005022:	d036      	beq.n	8005092 <_svfiprintf_r+0x1d2>
 8005024:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <_svfiprintf_r+0x1ec>)
 8005026:	bb1b      	cbnz	r3, 8005070 <_svfiprintf_r+0x1b0>
 8005028:	9b03      	ldr	r3, [sp, #12]
 800502a:	3307      	adds	r3, #7
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	3308      	adds	r3, #8
 8005032:	9303      	str	r3, [sp, #12]
 8005034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005036:	4433      	add	r3, r6
 8005038:	9309      	str	r3, [sp, #36]	@ 0x24
 800503a:	e76a      	b.n	8004f12 <_svfiprintf_r+0x52>
 800503c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005040:	460c      	mov	r4, r1
 8005042:	2001      	movs	r0, #1
 8005044:	e7a8      	b.n	8004f98 <_svfiprintf_r+0xd8>
 8005046:	2300      	movs	r3, #0
 8005048:	3401      	adds	r4, #1
 800504a:	9305      	str	r3, [sp, #20]
 800504c:	4619      	mov	r1, r3
 800504e:	f04f 0c0a 	mov.w	ip, #10
 8005052:	4620      	mov	r0, r4
 8005054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005058:	3a30      	subs	r2, #48	@ 0x30
 800505a:	2a09      	cmp	r2, #9
 800505c:	d903      	bls.n	8005066 <_svfiprintf_r+0x1a6>
 800505e:	2b00      	cmp	r3, #0
 8005060:	d0c6      	beq.n	8004ff0 <_svfiprintf_r+0x130>
 8005062:	9105      	str	r1, [sp, #20]
 8005064:	e7c4      	b.n	8004ff0 <_svfiprintf_r+0x130>
 8005066:	fb0c 2101 	mla	r1, ip, r1, r2
 800506a:	4604      	mov	r4, r0
 800506c:	2301      	movs	r3, #1
 800506e:	e7f0      	b.n	8005052 <_svfiprintf_r+0x192>
 8005070:	ab03      	add	r3, sp, #12
 8005072:	9300      	str	r3, [sp, #0]
 8005074:	462a      	mov	r2, r5
 8005076:	4b0e      	ldr	r3, [pc, #56]	@ (80050b0 <_svfiprintf_r+0x1f0>)
 8005078:	a904      	add	r1, sp, #16
 800507a:	4638      	mov	r0, r7
 800507c:	f3af 8000 	nop.w
 8005080:	1c42      	adds	r2, r0, #1
 8005082:	4606      	mov	r6, r0
 8005084:	d1d6      	bne.n	8005034 <_svfiprintf_r+0x174>
 8005086:	89ab      	ldrh	r3, [r5, #12]
 8005088:	065b      	lsls	r3, r3, #25
 800508a:	f53f af2d 	bmi.w	8004ee8 <_svfiprintf_r+0x28>
 800508e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005090:	e72c      	b.n	8004eec <_svfiprintf_r+0x2c>
 8005092:	ab03      	add	r3, sp, #12
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	462a      	mov	r2, r5
 8005098:	4b05      	ldr	r3, [pc, #20]	@ (80050b0 <_svfiprintf_r+0x1f0>)
 800509a:	a904      	add	r1, sp, #16
 800509c:	4638      	mov	r0, r7
 800509e:	f000 f879 	bl	8005194 <_printf_i>
 80050a2:	e7ed      	b.n	8005080 <_svfiprintf_r+0x1c0>
 80050a4:	080054f4 	.word	0x080054f4
 80050a8:	080054fe 	.word	0x080054fe
 80050ac:	00000000 	.word	0x00000000
 80050b0:	08004e09 	.word	0x08004e09
 80050b4:	080054fa 	.word	0x080054fa

080050b8 <_printf_common>:
 80050b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	4616      	mov	r6, r2
 80050be:	4698      	mov	r8, r3
 80050c0:	688a      	ldr	r2, [r1, #8]
 80050c2:	690b      	ldr	r3, [r1, #16]
 80050c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80050c8:	4293      	cmp	r3, r2
 80050ca:	bfb8      	it	lt
 80050cc:	4613      	movlt	r3, r2
 80050ce:	6033      	str	r3, [r6, #0]
 80050d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80050d4:	4607      	mov	r7, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	b10a      	cbz	r2, 80050de <_printf_common+0x26>
 80050da:	3301      	adds	r3, #1
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	0699      	lsls	r1, r3, #26
 80050e2:	bf42      	ittt	mi
 80050e4:	6833      	ldrmi	r3, [r6, #0]
 80050e6:	3302      	addmi	r3, #2
 80050e8:	6033      	strmi	r3, [r6, #0]
 80050ea:	6825      	ldr	r5, [r4, #0]
 80050ec:	f015 0506 	ands.w	r5, r5, #6
 80050f0:	d106      	bne.n	8005100 <_printf_common+0x48>
 80050f2:	f104 0a19 	add.w	sl, r4, #25
 80050f6:	68e3      	ldr	r3, [r4, #12]
 80050f8:	6832      	ldr	r2, [r6, #0]
 80050fa:	1a9b      	subs	r3, r3, r2
 80050fc:	42ab      	cmp	r3, r5
 80050fe:	dc26      	bgt.n	800514e <_printf_common+0x96>
 8005100:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	3b00      	subs	r3, #0
 8005108:	bf18      	it	ne
 800510a:	2301      	movne	r3, #1
 800510c:	0692      	lsls	r2, r2, #26
 800510e:	d42b      	bmi.n	8005168 <_printf_common+0xb0>
 8005110:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005114:	4641      	mov	r1, r8
 8005116:	4638      	mov	r0, r7
 8005118:	47c8      	blx	r9
 800511a:	3001      	adds	r0, #1
 800511c:	d01e      	beq.n	800515c <_printf_common+0xa4>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	6922      	ldr	r2, [r4, #16]
 8005122:	f003 0306 	and.w	r3, r3, #6
 8005126:	2b04      	cmp	r3, #4
 8005128:	bf02      	ittt	eq
 800512a:	68e5      	ldreq	r5, [r4, #12]
 800512c:	6833      	ldreq	r3, [r6, #0]
 800512e:	1aed      	subeq	r5, r5, r3
 8005130:	68a3      	ldr	r3, [r4, #8]
 8005132:	bf0c      	ite	eq
 8005134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005138:	2500      	movne	r5, #0
 800513a:	4293      	cmp	r3, r2
 800513c:	bfc4      	itt	gt
 800513e:	1a9b      	subgt	r3, r3, r2
 8005140:	18ed      	addgt	r5, r5, r3
 8005142:	2600      	movs	r6, #0
 8005144:	341a      	adds	r4, #26
 8005146:	42b5      	cmp	r5, r6
 8005148:	d11a      	bne.n	8005180 <_printf_common+0xc8>
 800514a:	2000      	movs	r0, #0
 800514c:	e008      	b.n	8005160 <_printf_common+0xa8>
 800514e:	2301      	movs	r3, #1
 8005150:	4652      	mov	r2, sl
 8005152:	4641      	mov	r1, r8
 8005154:	4638      	mov	r0, r7
 8005156:	47c8      	blx	r9
 8005158:	3001      	adds	r0, #1
 800515a:	d103      	bne.n	8005164 <_printf_common+0xac>
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005164:	3501      	adds	r5, #1
 8005166:	e7c6      	b.n	80050f6 <_printf_common+0x3e>
 8005168:	18e1      	adds	r1, r4, r3
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	2030      	movs	r0, #48	@ 0x30
 800516e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005172:	4422      	add	r2, r4
 8005174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005178:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800517c:	3302      	adds	r3, #2
 800517e:	e7c7      	b.n	8005110 <_printf_common+0x58>
 8005180:	2301      	movs	r3, #1
 8005182:	4622      	mov	r2, r4
 8005184:	4641      	mov	r1, r8
 8005186:	4638      	mov	r0, r7
 8005188:	47c8      	blx	r9
 800518a:	3001      	adds	r0, #1
 800518c:	d0e6      	beq.n	800515c <_printf_common+0xa4>
 800518e:	3601      	adds	r6, #1
 8005190:	e7d9      	b.n	8005146 <_printf_common+0x8e>
	...

08005194 <_printf_i>:
 8005194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	7e0f      	ldrb	r7, [r1, #24]
 800519a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800519c:	2f78      	cmp	r7, #120	@ 0x78
 800519e:	4691      	mov	r9, r2
 80051a0:	4680      	mov	r8, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	469a      	mov	sl, r3
 80051a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80051aa:	d807      	bhi.n	80051bc <_printf_i+0x28>
 80051ac:	2f62      	cmp	r7, #98	@ 0x62
 80051ae:	d80a      	bhi.n	80051c6 <_printf_i+0x32>
 80051b0:	2f00      	cmp	r7, #0
 80051b2:	f000 80d1 	beq.w	8005358 <_printf_i+0x1c4>
 80051b6:	2f58      	cmp	r7, #88	@ 0x58
 80051b8:	f000 80b8 	beq.w	800532c <_printf_i+0x198>
 80051bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80051c4:	e03a      	b.n	800523c <_printf_i+0xa8>
 80051c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80051ca:	2b15      	cmp	r3, #21
 80051cc:	d8f6      	bhi.n	80051bc <_printf_i+0x28>
 80051ce:	a101      	add	r1, pc, #4	@ (adr r1, 80051d4 <_printf_i+0x40>)
 80051d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051d4:	0800522d 	.word	0x0800522d
 80051d8:	08005241 	.word	0x08005241
 80051dc:	080051bd 	.word	0x080051bd
 80051e0:	080051bd 	.word	0x080051bd
 80051e4:	080051bd 	.word	0x080051bd
 80051e8:	080051bd 	.word	0x080051bd
 80051ec:	08005241 	.word	0x08005241
 80051f0:	080051bd 	.word	0x080051bd
 80051f4:	080051bd 	.word	0x080051bd
 80051f8:	080051bd 	.word	0x080051bd
 80051fc:	080051bd 	.word	0x080051bd
 8005200:	0800533f 	.word	0x0800533f
 8005204:	0800526b 	.word	0x0800526b
 8005208:	080052f9 	.word	0x080052f9
 800520c:	080051bd 	.word	0x080051bd
 8005210:	080051bd 	.word	0x080051bd
 8005214:	08005361 	.word	0x08005361
 8005218:	080051bd 	.word	0x080051bd
 800521c:	0800526b 	.word	0x0800526b
 8005220:	080051bd 	.word	0x080051bd
 8005224:	080051bd 	.word	0x080051bd
 8005228:	08005301 	.word	0x08005301
 800522c:	6833      	ldr	r3, [r6, #0]
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	6032      	str	r2, [r6, #0]
 8005234:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005238:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800523c:	2301      	movs	r3, #1
 800523e:	e09c      	b.n	800537a <_printf_i+0x1e6>
 8005240:	6833      	ldr	r3, [r6, #0]
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	1d19      	adds	r1, r3, #4
 8005246:	6031      	str	r1, [r6, #0]
 8005248:	0606      	lsls	r6, r0, #24
 800524a:	d501      	bpl.n	8005250 <_printf_i+0xbc>
 800524c:	681d      	ldr	r5, [r3, #0]
 800524e:	e003      	b.n	8005258 <_printf_i+0xc4>
 8005250:	0645      	lsls	r5, r0, #25
 8005252:	d5fb      	bpl.n	800524c <_printf_i+0xb8>
 8005254:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005258:	2d00      	cmp	r5, #0
 800525a:	da03      	bge.n	8005264 <_printf_i+0xd0>
 800525c:	232d      	movs	r3, #45	@ 0x2d
 800525e:	426d      	negs	r5, r5
 8005260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005264:	4858      	ldr	r0, [pc, #352]	@ (80053c8 <_printf_i+0x234>)
 8005266:	230a      	movs	r3, #10
 8005268:	e011      	b.n	800528e <_printf_i+0xfa>
 800526a:	6821      	ldr	r1, [r4, #0]
 800526c:	6833      	ldr	r3, [r6, #0]
 800526e:	0608      	lsls	r0, r1, #24
 8005270:	f853 5b04 	ldr.w	r5, [r3], #4
 8005274:	d402      	bmi.n	800527c <_printf_i+0xe8>
 8005276:	0649      	lsls	r1, r1, #25
 8005278:	bf48      	it	mi
 800527a:	b2ad      	uxthmi	r5, r5
 800527c:	2f6f      	cmp	r7, #111	@ 0x6f
 800527e:	4852      	ldr	r0, [pc, #328]	@ (80053c8 <_printf_i+0x234>)
 8005280:	6033      	str	r3, [r6, #0]
 8005282:	bf14      	ite	ne
 8005284:	230a      	movne	r3, #10
 8005286:	2308      	moveq	r3, #8
 8005288:	2100      	movs	r1, #0
 800528a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800528e:	6866      	ldr	r6, [r4, #4]
 8005290:	60a6      	str	r6, [r4, #8]
 8005292:	2e00      	cmp	r6, #0
 8005294:	db05      	blt.n	80052a2 <_printf_i+0x10e>
 8005296:	6821      	ldr	r1, [r4, #0]
 8005298:	432e      	orrs	r6, r5
 800529a:	f021 0104 	bic.w	r1, r1, #4
 800529e:	6021      	str	r1, [r4, #0]
 80052a0:	d04b      	beq.n	800533a <_printf_i+0x1a6>
 80052a2:	4616      	mov	r6, r2
 80052a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80052a8:	fb03 5711 	mls	r7, r3, r1, r5
 80052ac:	5dc7      	ldrb	r7, [r0, r7]
 80052ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80052b2:	462f      	mov	r7, r5
 80052b4:	42bb      	cmp	r3, r7
 80052b6:	460d      	mov	r5, r1
 80052b8:	d9f4      	bls.n	80052a4 <_printf_i+0x110>
 80052ba:	2b08      	cmp	r3, #8
 80052bc:	d10b      	bne.n	80052d6 <_printf_i+0x142>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	07df      	lsls	r7, r3, #31
 80052c2:	d508      	bpl.n	80052d6 <_printf_i+0x142>
 80052c4:	6923      	ldr	r3, [r4, #16]
 80052c6:	6861      	ldr	r1, [r4, #4]
 80052c8:	4299      	cmp	r1, r3
 80052ca:	bfde      	ittt	le
 80052cc:	2330      	movle	r3, #48	@ 0x30
 80052ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80052d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80052d6:	1b92      	subs	r2, r2, r6
 80052d8:	6122      	str	r2, [r4, #16]
 80052da:	f8cd a000 	str.w	sl, [sp]
 80052de:	464b      	mov	r3, r9
 80052e0:	aa03      	add	r2, sp, #12
 80052e2:	4621      	mov	r1, r4
 80052e4:	4640      	mov	r0, r8
 80052e6:	f7ff fee7 	bl	80050b8 <_printf_common>
 80052ea:	3001      	adds	r0, #1
 80052ec:	d14a      	bne.n	8005384 <_printf_i+0x1f0>
 80052ee:	f04f 30ff 	mov.w	r0, #4294967295
 80052f2:	b004      	add	sp, #16
 80052f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	6023      	str	r3, [r4, #0]
 8005300:	4832      	ldr	r0, [pc, #200]	@ (80053cc <_printf_i+0x238>)
 8005302:	2778      	movs	r7, #120	@ 0x78
 8005304:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005308:	6823      	ldr	r3, [r4, #0]
 800530a:	6831      	ldr	r1, [r6, #0]
 800530c:	061f      	lsls	r7, r3, #24
 800530e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005312:	d402      	bmi.n	800531a <_printf_i+0x186>
 8005314:	065f      	lsls	r7, r3, #25
 8005316:	bf48      	it	mi
 8005318:	b2ad      	uxthmi	r5, r5
 800531a:	6031      	str	r1, [r6, #0]
 800531c:	07d9      	lsls	r1, r3, #31
 800531e:	bf44      	itt	mi
 8005320:	f043 0320 	orrmi.w	r3, r3, #32
 8005324:	6023      	strmi	r3, [r4, #0]
 8005326:	b11d      	cbz	r5, 8005330 <_printf_i+0x19c>
 8005328:	2310      	movs	r3, #16
 800532a:	e7ad      	b.n	8005288 <_printf_i+0xf4>
 800532c:	4826      	ldr	r0, [pc, #152]	@ (80053c8 <_printf_i+0x234>)
 800532e:	e7e9      	b.n	8005304 <_printf_i+0x170>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	f023 0320 	bic.w	r3, r3, #32
 8005336:	6023      	str	r3, [r4, #0]
 8005338:	e7f6      	b.n	8005328 <_printf_i+0x194>
 800533a:	4616      	mov	r6, r2
 800533c:	e7bd      	b.n	80052ba <_printf_i+0x126>
 800533e:	6833      	ldr	r3, [r6, #0]
 8005340:	6825      	ldr	r5, [r4, #0]
 8005342:	6961      	ldr	r1, [r4, #20]
 8005344:	1d18      	adds	r0, r3, #4
 8005346:	6030      	str	r0, [r6, #0]
 8005348:	062e      	lsls	r6, r5, #24
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	d501      	bpl.n	8005352 <_printf_i+0x1be>
 800534e:	6019      	str	r1, [r3, #0]
 8005350:	e002      	b.n	8005358 <_printf_i+0x1c4>
 8005352:	0668      	lsls	r0, r5, #25
 8005354:	d5fb      	bpl.n	800534e <_printf_i+0x1ba>
 8005356:	8019      	strh	r1, [r3, #0]
 8005358:	2300      	movs	r3, #0
 800535a:	6123      	str	r3, [r4, #16]
 800535c:	4616      	mov	r6, r2
 800535e:	e7bc      	b.n	80052da <_printf_i+0x146>
 8005360:	6833      	ldr	r3, [r6, #0]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	6032      	str	r2, [r6, #0]
 8005366:	681e      	ldr	r6, [r3, #0]
 8005368:	6862      	ldr	r2, [r4, #4]
 800536a:	2100      	movs	r1, #0
 800536c:	4630      	mov	r0, r6
 800536e:	f7fa ff6f 	bl	8000250 <memchr>
 8005372:	b108      	cbz	r0, 8005378 <_printf_i+0x1e4>
 8005374:	1b80      	subs	r0, r0, r6
 8005376:	6060      	str	r0, [r4, #4]
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	6123      	str	r3, [r4, #16]
 800537c:	2300      	movs	r3, #0
 800537e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005382:	e7aa      	b.n	80052da <_printf_i+0x146>
 8005384:	6923      	ldr	r3, [r4, #16]
 8005386:	4632      	mov	r2, r6
 8005388:	4649      	mov	r1, r9
 800538a:	4640      	mov	r0, r8
 800538c:	47d0      	blx	sl
 800538e:	3001      	adds	r0, #1
 8005390:	d0ad      	beq.n	80052ee <_printf_i+0x15a>
 8005392:	6823      	ldr	r3, [r4, #0]
 8005394:	079b      	lsls	r3, r3, #30
 8005396:	d413      	bmi.n	80053c0 <_printf_i+0x22c>
 8005398:	68e0      	ldr	r0, [r4, #12]
 800539a:	9b03      	ldr	r3, [sp, #12]
 800539c:	4298      	cmp	r0, r3
 800539e:	bfb8      	it	lt
 80053a0:	4618      	movlt	r0, r3
 80053a2:	e7a6      	b.n	80052f2 <_printf_i+0x15e>
 80053a4:	2301      	movs	r3, #1
 80053a6:	4632      	mov	r2, r6
 80053a8:	4649      	mov	r1, r9
 80053aa:	4640      	mov	r0, r8
 80053ac:	47d0      	blx	sl
 80053ae:	3001      	adds	r0, #1
 80053b0:	d09d      	beq.n	80052ee <_printf_i+0x15a>
 80053b2:	3501      	adds	r5, #1
 80053b4:	68e3      	ldr	r3, [r4, #12]
 80053b6:	9903      	ldr	r1, [sp, #12]
 80053b8:	1a5b      	subs	r3, r3, r1
 80053ba:	42ab      	cmp	r3, r5
 80053bc:	dcf2      	bgt.n	80053a4 <_printf_i+0x210>
 80053be:	e7eb      	b.n	8005398 <_printf_i+0x204>
 80053c0:	2500      	movs	r5, #0
 80053c2:	f104 0619 	add.w	r6, r4, #25
 80053c6:	e7f5      	b.n	80053b4 <_printf_i+0x220>
 80053c8:	08005505 	.word	0x08005505
 80053cc:	08005516 	.word	0x08005516

080053d0 <memmove>:
 80053d0:	4288      	cmp	r0, r1
 80053d2:	b510      	push	{r4, lr}
 80053d4:	eb01 0402 	add.w	r4, r1, r2
 80053d8:	d902      	bls.n	80053e0 <memmove+0x10>
 80053da:	4284      	cmp	r4, r0
 80053dc:	4623      	mov	r3, r4
 80053de:	d807      	bhi.n	80053f0 <memmove+0x20>
 80053e0:	1e43      	subs	r3, r0, #1
 80053e2:	42a1      	cmp	r1, r4
 80053e4:	d008      	beq.n	80053f8 <memmove+0x28>
 80053e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053ee:	e7f8      	b.n	80053e2 <memmove+0x12>
 80053f0:	4402      	add	r2, r0
 80053f2:	4601      	mov	r1, r0
 80053f4:	428a      	cmp	r2, r1
 80053f6:	d100      	bne.n	80053fa <memmove+0x2a>
 80053f8:	bd10      	pop	{r4, pc}
 80053fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005402:	e7f7      	b.n	80053f4 <memmove+0x24>

08005404 <_sbrk_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d06      	ldr	r5, [pc, #24]	@ (8005420 <_sbrk_r+0x1c>)
 8005408:	2300      	movs	r3, #0
 800540a:	4604      	mov	r4, r0
 800540c:	4608      	mov	r0, r1
 800540e:	602b      	str	r3, [r5, #0]
 8005410:	f7fb fc14 	bl	8000c3c <_sbrk>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_sbrk_r+0x1a>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_sbrk_r+0x1a>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	200009f0 	.word	0x200009f0

08005424 <memcpy>:
 8005424:	440a      	add	r2, r1
 8005426:	4291      	cmp	r1, r2
 8005428:	f100 33ff 	add.w	r3, r0, #4294967295
 800542c:	d100      	bne.n	8005430 <memcpy+0xc>
 800542e:	4770      	bx	lr
 8005430:	b510      	push	{r4, lr}
 8005432:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005436:	f803 4f01 	strb.w	r4, [r3, #1]!
 800543a:	4291      	cmp	r1, r2
 800543c:	d1f9      	bne.n	8005432 <memcpy+0xe>
 800543e:	bd10      	pop	{r4, pc}

08005440 <_realloc_r>:
 8005440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4607      	mov	r7, r0
 8005446:	4614      	mov	r4, r2
 8005448:	460d      	mov	r5, r1
 800544a:	b921      	cbnz	r1, 8005456 <_realloc_r+0x16>
 800544c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005450:	4611      	mov	r1, r2
 8005452:	f7ff bc4d 	b.w	8004cf0 <_malloc_r>
 8005456:	b92a      	cbnz	r2, 8005464 <_realloc_r+0x24>
 8005458:	f7ff fbde 	bl	8004c18 <_free_r>
 800545c:	4625      	mov	r5, r4
 800545e:	4628      	mov	r0, r5
 8005460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005464:	f000 f81a 	bl	800549c <_malloc_usable_size_r>
 8005468:	4284      	cmp	r4, r0
 800546a:	4606      	mov	r6, r0
 800546c:	d802      	bhi.n	8005474 <_realloc_r+0x34>
 800546e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005472:	d8f4      	bhi.n	800545e <_realloc_r+0x1e>
 8005474:	4621      	mov	r1, r4
 8005476:	4638      	mov	r0, r7
 8005478:	f7ff fc3a 	bl	8004cf0 <_malloc_r>
 800547c:	4680      	mov	r8, r0
 800547e:	b908      	cbnz	r0, 8005484 <_realloc_r+0x44>
 8005480:	4645      	mov	r5, r8
 8005482:	e7ec      	b.n	800545e <_realloc_r+0x1e>
 8005484:	42b4      	cmp	r4, r6
 8005486:	4622      	mov	r2, r4
 8005488:	4629      	mov	r1, r5
 800548a:	bf28      	it	cs
 800548c:	4632      	movcs	r2, r6
 800548e:	f7ff ffc9 	bl	8005424 <memcpy>
 8005492:	4629      	mov	r1, r5
 8005494:	4638      	mov	r0, r7
 8005496:	f7ff fbbf 	bl	8004c18 <_free_r>
 800549a:	e7f1      	b.n	8005480 <_realloc_r+0x40>

0800549c <_malloc_usable_size_r>:
 800549c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a0:	1f18      	subs	r0, r3, #4
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	bfbc      	itt	lt
 80054a6:	580b      	ldrlt	r3, [r1, r0]
 80054a8:	18c0      	addlt	r0, r0, r3
 80054aa:	4770      	bx	lr

080054ac <_init>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr

080054b8 <_fini>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	bf00      	nop
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr
