
Lab_06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040a4  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004318  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  2000005c  08004374  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  08004374  000062f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f62f  00000000  00000000  0000608a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a1  00000000  00000000  000156b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  00017860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  000185a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028279  00000000  00000000  00018ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011412  00000000  00000000  0004126a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb68b  00000000  00000000  0005267c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014dd07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bc4  00000000  00000000  0014dd4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00151910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800428c 	.word	0x0800428c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800428c 	.word	0x0800428c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000622:	4b09      	ldr	r3, [pc, #36]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000626:	4a08      	ldr	r2, [pc, #32]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000628:	f043 0308 	orr.w	r3, r3, #8
 800062c:	6313      	str	r3, [r2, #48]	@ 0x30
 800062e:	4b06      	ldr	r3, [pc, #24]	@ (8000648 <MX_GPIO_Init+0x2c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]

}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800

0800064c <displayTime>:
void displayNumber(uint32_t num) {
    char buffer[20];
    int len = sprintf(buffer, "%lu\r\n", num);  // แปลงเป็น string
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, len, HAL_MAX_DELAY);
}
void displayTime(uint32_t min, uint32_t sec) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	6039      	str	r1, [r7, #0]
    char buffer[20];
    sprintf(buffer, "%02lu:%02lu\r", min, sec);  // MM:SS\r
 8000656:	f107 000c 	add.w	r0, r7, #12
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	490a      	ldr	r1, [pc, #40]	@ (8000688 <displayTime+0x3c>)
 8000660:	f003 f974 	bl	800394c <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff fde9 	bl	8000240 <strlen>
 800066e:	4603      	mov	r3, r0
 8000670:	b29a      	uxth	r2, r3
 8000672:	f107 010c 	add.w	r1, r7, #12
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	4804      	ldr	r0, [pc, #16]	@ (800068c <displayTime+0x40>)
 800067c:	f002 fc5c 	bl	8002f38 <HAL_UART_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3720      	adds	r7, #32
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	080042ac 	.word	0x080042ac
 800068c:	2000011c 	.word	0x2000011c

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fb1b 	bl	8000cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f814 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069c:	f7ff ffbe 	bl	800061c <MX_GPIO_Init>
  MX_TIM1_Init();
 80006a0:	f000 f97a 	bl	8000998 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006a4:	f000 f9cc 	bl	8000a40 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 80006a8:	f000 fa58 	bl	8000b5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <main+0x2c>)
 80006ae:	f001 ff8d 	bl	80025cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 80006b2:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <main+0x30>)
 80006b4:	f001 ff8a 	bl	80025cc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <main+0x28>
 80006bc:	20000084 	.word	0x20000084
 80006c0:	200000d0 	.word	0x200000d0

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	2234      	movs	r2, #52	@ 0x34
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f003 f95c 	bl	8003990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 0308 	add.w	r3, r7, #8
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <SystemClock_Config+0xd4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b28      	ldr	r3, [pc, #160]	@ (8000798 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000700:	4b26      	ldr	r3, [pc, #152]	@ (800079c <SystemClock_Config+0xd8>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a25      	ldr	r2, [pc, #148]	@ (800079c <SystemClock_Config+0xd8>)
 8000706:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800072c:	2308      	movs	r3, #8
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000730:	23d8      	movs	r3, #216	@ 0xd8
 8000732:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000738:	2302      	movs	r3, #2
 800073a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073c:	2302      	movs	r3, #2
 800073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 031c 	add.w	r3, r7, #28
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe2d 	bl	80013a4 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000750:	f000 f826 	bl	80007a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f000 fdd6 	bl	8001304 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075e:	f000 f81f 	bl	80007a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800076e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000772:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000778:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2107      	movs	r1, #7
 8000780:	4618      	mov	r0, r3
 8000782:	f001 f8bd 	bl	8001900 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800078c:	f000 f808 	bl	80007a0 <Error_Handler>
  }
}
 8000790:	bf00      	nop
 8000792:	3750      	adds	r7, #80	@ 0x50
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b6:	4a0e      	ldr	r2, [pc, #56]	@ (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ce:	4a08      	ldr	r2, [pc, #32]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80007e2:	2005      	movs	r0, #5
 80007e4:	f000 fba0 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <NMI_Handler+0x4>

080007fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <MemManage_Handler+0x4>

0800080c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000810:	bf00      	nop
 8000812:	e7fd      	b.n	8000810 <BusFault_Handler+0x4>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <UsageFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr

08000846 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084a:	f000 fa7d 	bl	8000d48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000858:	4814      	ldr	r0, [pc, #80]	@ (80008ac <TIM1_UP_TIM10_IRQHandler+0x58>)
 800085a:	f001 ff2f 	bl	80026bc <HAL_TIM_IRQHandler>
//			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
//			count++;   // เพิ่มค่าทุก 1 ms
//		}
//	}
//exercise 2
	if (__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET) {
 800085e:	4b13      	ldr	r3, [pc, #76]	@ (80008ac <TIM1_UP_TIM10_IRQHandler+0x58>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	691b      	ldr	r3, [r3, #16]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	2b01      	cmp	r3, #1
 800086a:	d11c      	bne.n	80008a6 <TIM1_UP_TIM10_IRQHandler+0x52>
		if (__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_UPDATE) != RESET) {
 800086c:	4b0f      	ldr	r3, [pc, #60]	@ (80008ac <TIM1_UP_TIM10_IRQHandler+0x58>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	2b01      	cmp	r3, #1
 8000878:	d115      	bne.n	80008a6 <TIM1_UP_TIM10_IRQHandler+0x52>
			__HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 800087a:	4b0c      	ldr	r3, [pc, #48]	@ (80008ac <TIM1_UP_TIM10_IRQHandler+0x58>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	f06f 0201 	mvn.w	r2, #1
 8000882:	611a      	str	r2, [r3, #16]

			second++;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 800088c:	6013      	str	r3, [r2, #0]
			if (second >= 60) {
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b3b      	cmp	r3, #59	@ 0x3b
 8000894:	d907      	bls.n	80008a6 <TIM1_UP_TIM10_IRQHandler+0x52>
				second = 0;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				minute++;
 800089c:	4b05      	ldr	r3, [pc, #20]	@ (80008b4 <TIM1_UP_TIM10_IRQHandler+0x60>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <TIM1_UP_TIM10_IRQHandler+0x60>)
 80008a4:	6013      	str	r3, [r2, #0]
			}
		}
	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000084 	.word	0x20000084
 80008b0:	20000078 	.word	0x20000078
 80008b4:	2000007c 	.word	0x2000007c

080008b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008bc:	480f      	ldr	r0, [pc, #60]	@ (80008fc <TIM2_IRQHandler+0x44>)
 80008be:	f001 fefd 	bl	80026bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
   if (__HAL_TIM_GET_FLAG(&htim2, TIM_FLAG_UPDATE) != RESET) {
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <TIM2_IRQHandler+0x44>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d113      	bne.n	80008f8 <TIM2_IRQHandler+0x40>
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_UPDATE) != RESET) {
 80008d0:	4b0a      	ldr	r3, [pc, #40]	@ (80008fc <TIM2_IRQHandler+0x44>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	68db      	ldr	r3, [r3, #12]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10c      	bne.n	80008f8 <TIM2_IRQHandler+0x40>
			__HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80008de:	4b07      	ldr	r3, [pc, #28]	@ (80008fc <TIM2_IRQHandler+0x44>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f06f 0201 	mvn.w	r2, #1
 80008e6:	611a      	str	r2, [r3, #16]

			extern void displayTime(uint32_t, uint32_t);
			displayTime(minute, second);
 80008e8:	4b05      	ldr	r3, [pc, #20]	@ (8000900 <TIM2_IRQHandler+0x48>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <TIM2_IRQHandler+0x4c>)
 80008ee:	6812      	ldr	r2, [r2, #0]
 80008f0:	4611      	mov	r1, r2
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff feaa 	bl	800064c <displayTime>
		}
	}
  /* USER CODE END TIM2_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200000d0 	.word	0x200000d0
 8000900:	2000007c 	.word	0x2000007c
 8000904:	20000078 	.word	0x20000078

08000908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000910:	4a14      	ldr	r2, [pc, #80]	@ (8000964 <_sbrk+0x5c>)
 8000912:	4b15      	ldr	r3, [pc, #84]	@ (8000968 <_sbrk+0x60>)
 8000914:	1ad3      	subs	r3, r2, r3
 8000916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <_sbrk+0x64>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d102      	bne.n	800092a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <_sbrk+0x64>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <_sbrk+0x68>)
 8000928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <_sbrk+0x64>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4413      	add	r3, r2
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	429a      	cmp	r2, r3
 8000936:	d207      	bcs.n	8000948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000938:	f003 f832 	bl	80039a0 <__errno>
 800093c:	4603      	mov	r3, r0
 800093e:	220c      	movs	r2, #12
 8000940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	e009      	b.n	800095c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800094e:	4b07      	ldr	r3, [pc, #28]	@ (800096c <_sbrk+0x64>)
 8000950:	681a      	ldr	r2, [r3, #0]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	4a05      	ldr	r2, [pc, #20]	@ (800096c <_sbrk+0x64>)
 8000958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800095a:	68fb      	ldr	r3, [r7, #12]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3718      	adds	r7, #24
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	20080000 	.word	0x20080000
 8000968:	00000400 	.word	0x00000400
 800096c:	20000080 	.word	0x20000080
 8000970:	200002f0 	.word	0x200002f0

08000974 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000978:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <SystemInit+0x20>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a05      	ldr	r2, [pc, #20]	@ (8000994 <SystemInit+0x20>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	e000ed00 	.word	0xe000ed00

08000998 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099e:	f107 0310 	add.w	r3, r7, #16
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b6:	4b20      	ldr	r3, [pc, #128]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009b8:	4a20      	ldr	r2, [pc, #128]	@ (8000a3c <MX_TIM1_Init+0xa4>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 21600-1;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009be:	f245 425f 	movw	r2, #21599	@ 0x545f
 80009c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80009d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b19      	ldr	r3, [pc, #100]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d8:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009e4:	4814      	ldr	r0, [pc, #80]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 80009e6:	f001 fd99 	bl	800251c <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80009f0:	f7ff fed6 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	4619      	mov	r1, r3
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 8000a02:	f001 ff63 	bl	80028cc <HAL_TIM_ConfigClockSource>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000a0c:	f7ff fec8 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_TIM1_Init+0xa0>)
 8000a22:	f002 f98f 	bl	8002d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000a2c:	f7ff feb8 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3720      	adds	r7, #32
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000084 	.word	0x20000084
 8000a3c:	40010000 	.word	0x40010000

08000a40 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000a64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 21600-1;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a68:	f245 425f 	movw	r2, #21599	@ 0x545f
 8000a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000-1;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a76:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8000a7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a88:	4813      	ldr	r0, [pc, #76]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000a8a:	f001 fd47 	bl	800251c <HAL_TIM_Base_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a94:	f7ff fe84 	bl	80007a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a9e:	f107 0310 	add.w	r3, r7, #16
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000aa6:	f001 ff11 	bl	80028cc <HAL_TIM_ConfigClockSource>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000ab0:	f7ff fe76 	bl	80007a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_TIM2_Init+0x98>)
 8000ac2:	f002 f93f 	bl	8002d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000acc:	f7ff fe68 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	3720      	adds	r7, #32
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200000d0 	.word	0x200000d0

08000adc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8000b54 <HAL_TIM_Base_MspInit+0x78>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d114      	bne.n	8000b18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af2:	4a19      	ldr	r2, [pc, #100]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f000 fa17 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000b10:	2019      	movs	r0, #25
 8000b12:	f000 fa30 	bl	8000f76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b16:	e018      	b.n	8000b4a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b20:	d113      	bne.n	8000b4a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	4b0d      	ldr	r3, [pc, #52]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a0c      	ldr	r2, [pc, #48]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <HAL_TIM_Base_MspInit+0x7c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	201c      	movs	r0, #28
 8000b40:	f000 f9fd 	bl	8000f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b44:	201c      	movs	r0, #28
 8000b46:	f000 fa16 	bl	8000f76 <HAL_NVIC_EnableIRQ>
}
 8000b4a:	bf00      	nop
 8000b4c:	3710      	adds	r7, #16
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010000 	.word	0x40010000
 8000b58:	40023800 	.word	0x40023800

08000b5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b60:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	@ (8000bb8 <MX_USART3_UART_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b66:	4b13      	ldr	r3, [pc, #76]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	@ (8000bb4 <MX_USART3_UART_Init+0x58>)
 8000ba0:	f002 f97c 	bl	8002e9c <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000baa:	f7ff fdf9 	bl	80007a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000011c 	.word	0x2000011c
 8000bb8:	40004800 	.word	0x40004800

08000bbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b0ae      	sub	sp, #184	@ 0xb8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
 8000bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2290      	movs	r2, #144	@ 0x90
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f002 fed7 	bl	8003990 <memset>
  if(uartHandle->Instance==USART3)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a22      	ldr	r2, [pc, #136]	@ (8000c70 <HAL_UART_MspInit+0xb4>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	d13c      	bne.n	8000c66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bf0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f866 	bl	8001ccc <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c06:	f7ff fdcb 	bl	80007a0 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a19      	ldr	r2, [pc, #100]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b17      	ldr	r3, [pc, #92]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	4b14      	ldr	r3, [pc, #80]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	4a13      	ldr	r2, [pc, #76]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <HAL_UART_MspInit+0xb8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	f003 0308 	and.w	r3, r3, #8
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c54:	2307      	movs	r3, #7
 8000c56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <HAL_UART_MspInit+0xbc>)
 8000c62:	f000 f9a3 	bl	8000fac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c66:	bf00      	nop
 8000c68:	37b8      	adds	r7, #184	@ 0xb8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40004800 	.word	0x40004800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c7c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c80:	f7ff fe78 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c86:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c88:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c8c:	e002      	b.n	8000c94 <LoopCopyDataInit>

08000c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c92:	3304      	adds	r3, #4

08000c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c98:	d3f9      	bcc.n	8000c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c9c:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca0:	e001      	b.n	8000ca6 <LoopFillZerobss>

08000ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca4:	3204      	adds	r2, #4

08000ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca8:	d3fb      	bcc.n	8000ca2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000caa:	f002 fe7f 	bl	80039ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cae:	f7ff fcef 	bl	8000690 <main>
  bx  lr    
 8000cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cbc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000cc0:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 8000cc4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000cc8:	200002f0 	.word	0x200002f0

08000ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ccc:	e7fe      	b.n	8000ccc <ADC_IRQHandler>

08000cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd2:	2003      	movs	r0, #3
 8000cd4:	f000 f928 	bl	8000f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f805 	bl	8000ce8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cde:	f7ff fd65 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <HAL_InitTick+0x54>)
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_InitTick+0x58>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d06:	4618      	mov	r0, r3
 8000d08:	f000 f943 	bl	8000f92 <HAL_SYSTICK_Config>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e00e      	b.n	8000d34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b0f      	cmp	r3, #15
 8000d1a:	d80a      	bhi.n	8000d32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	6879      	ldr	r1, [r7, #4]
 8000d20:	f04f 30ff 	mov.w	r0, #4294967295
 8000d24:	f000 f90b 	bl	8000f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d28:	4a06      	ldr	r2, [pc, #24]	@ (8000d44 <HAL_InitTick+0x5c>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000008 	.word	0x20000008
 8000d44:	20000004 	.word	0x20000004

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200001a4 	.word	0x200001a4

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200001a4 	.word	0x200001a4

08000d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	05fa0000 	.word	0x05fa0000

08000dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	db0b      	blt.n	8000e16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f003 021f 	and.w	r2, r3, #31
 8000e04:	4907      	ldr	r1, [pc, #28]	@ (8000e24 <__NVIC_EnableIRQ+0x38>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	095b      	lsrs	r3, r3, #5
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000e100 	.word	0xe000e100

08000e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	6039      	str	r1, [r7, #0]
 8000e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	db0a      	blt.n	8000e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <__NVIC_SetPriority+0x4c>)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	0112      	lsls	r2, r2, #4
 8000e48:	b2d2      	uxtb	r2, r2
 8000e4a:	440b      	add	r3, r1
 8000e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e50:	e00a      	b.n	8000e68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	b2da      	uxtb	r2, r3
 8000e56:	4908      	ldr	r1, [pc, #32]	@ (8000e78 <__NVIC_SetPriority+0x50>)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	f003 030f 	and.w	r3, r3, #15
 8000e5e:	3b04      	subs	r3, #4
 8000e60:	0112      	lsls	r2, r2, #4
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	440b      	add	r3, r1
 8000e66:	761a      	strb	r2, [r3, #24]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	e000e100 	.word	0xe000e100
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	@ 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f1c3 0307 	rsb	r3, r3, #7
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	bf28      	it	cs
 8000e9a:	2304      	movcs	r3, #4
 8000e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	2b06      	cmp	r3, #6
 8000ea4:	d902      	bls.n	8000eac <NVIC_EncodePriority+0x30>
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	3b03      	subs	r3, #3
 8000eaa:	e000      	b.n	8000eae <NVIC_EncodePriority+0x32>
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa01 f303 	lsl.w	r3, r1, r3
 8000ece:	43d9      	mvns	r1, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed4:	4313      	orrs	r3, r2
         );
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3724      	adds	r7, #36	@ 0x24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
	...

08000ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ef4:	d301      	bcc.n	8000efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e00f      	b.n	8000f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000efa:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <SysTick_Config+0x40>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f02:	210f      	movs	r1, #15
 8000f04:	f04f 30ff 	mov.w	r0, #4294967295
 8000f08:	f7ff ff8e 	bl	8000e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f0c:	4b05      	ldr	r3, [pc, #20]	@ (8000f24 <SysTick_Config+0x40>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f12:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <SysTick_Config+0x40>)
 8000f14:	2207      	movs	r2, #7
 8000f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	e000e010 	.word	0xe000e010

08000f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ff29 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b086      	sub	sp, #24
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	4603      	mov	r3, r0
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f50:	f7ff ff3e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	6978      	ldr	r0, [r7, #20]
 8000f5c:	f7ff ff8e 	bl	8000e7c <NVIC_EncodePriority>
 8000f60:	4602      	mov	r2, r0
 8000f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff ff5d 	bl	8000e28 <__NVIC_SetPriority>
}
 8000f6e:	bf00      	nop
 8000f70:	3718      	adds	r7, #24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}

08000f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff ff31 	bl	8000dec <__NVIC_EnableIRQ>
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffa2 	bl	8000ee4 <SysTick_Config>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	e175      	b.n	80012b8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	697a      	ldr	r2, [r7, #20]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8164 	bne.w	80012b2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f003 0303 	and.w	r3, r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d005      	beq.n	8001002 <HAL_GPIO_Init+0x56>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 0303 	and.w	r3, r3, #3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d130      	bne.n	8001064 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	2203      	movs	r2, #3
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	68da      	ldr	r2, [r3, #12]
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	091b      	lsrs	r3, r3, #4
 800104e:	f003 0201 	and.w	r2, r3, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b03      	cmp	r3, #3
 800106e:	d017      	beq.n	80010a0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2203      	movs	r2, #3
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d123      	bne.n	80010f4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	08da      	lsrs	r2, r3, #3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3208      	adds	r2, #8
 80010b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	220f      	movs	r2, #15
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	08da      	lsrs	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3208      	adds	r2, #8
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	2203      	movs	r2, #3
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0203 	and.w	r2, r3, #3
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4313      	orrs	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80be 	beq.w	80012b2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001136:	4b66      	ldr	r3, [pc, #408]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a65      	ldr	r2, [pc, #404]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b63      	ldr	r3, [pc, #396]	@ (80012d0 <HAL_GPIO_Init+0x324>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800114e:	4a61      	ldr	r2, [pc, #388]	@ (80012d4 <HAL_GPIO_Init+0x328>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4013      	ands	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a58      	ldr	r2, [pc, #352]	@ (80012d8 <HAL_GPIO_Init+0x32c>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d037      	beq.n	80011ea <HAL_GPIO_Init+0x23e>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a57      	ldr	r2, [pc, #348]	@ (80012dc <HAL_GPIO_Init+0x330>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d031      	beq.n	80011e6 <HAL_GPIO_Init+0x23a>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a56      	ldr	r2, [pc, #344]	@ (80012e0 <HAL_GPIO_Init+0x334>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d02b      	beq.n	80011e2 <HAL_GPIO_Init+0x236>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a55      	ldr	r2, [pc, #340]	@ (80012e4 <HAL_GPIO_Init+0x338>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d025      	beq.n	80011de <HAL_GPIO_Init+0x232>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a54      	ldr	r2, [pc, #336]	@ (80012e8 <HAL_GPIO_Init+0x33c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01f      	beq.n	80011da <HAL_GPIO_Init+0x22e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4a53      	ldr	r2, [pc, #332]	@ (80012ec <HAL_GPIO_Init+0x340>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d019      	beq.n	80011d6 <HAL_GPIO_Init+0x22a>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a52      	ldr	r2, [pc, #328]	@ (80012f0 <HAL_GPIO_Init+0x344>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0x226>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a51      	ldr	r2, [pc, #324]	@ (80012f4 <HAL_GPIO_Init+0x348>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d00d      	beq.n	80011ce <HAL_GPIO_Init+0x222>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a50      	ldr	r2, [pc, #320]	@ (80012f8 <HAL_GPIO_Init+0x34c>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d007      	beq.n	80011ca <HAL_GPIO_Init+0x21e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a4f      	ldr	r2, [pc, #316]	@ (80012fc <HAL_GPIO_Init+0x350>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d101      	bne.n	80011c6 <HAL_GPIO_Init+0x21a>
 80011c2:	2309      	movs	r3, #9
 80011c4:	e012      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011c6:	230a      	movs	r3, #10
 80011c8:	e010      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ca:	2308      	movs	r3, #8
 80011cc:	e00e      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ce:	2307      	movs	r3, #7
 80011d0:	e00c      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d2:	2306      	movs	r3, #6
 80011d4:	e00a      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e008      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011da:	2304      	movs	r3, #4
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011de:	2303      	movs	r3, #3
 80011e0:	e004      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e2:	2302      	movs	r3, #2
 80011e4:	e002      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011e6:	2301      	movs	r3, #1
 80011e8:	e000      	b.n	80011ec <HAL_GPIO_Init+0x240>
 80011ea:	2300      	movs	r3, #0
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	f002 0203 	and.w	r2, r2, #3
 80011f2:	0092      	lsls	r2, r2, #2
 80011f4:	4093      	lsls	r3, r2
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011fc:	4935      	ldr	r1, [pc, #212]	@ (80012d4 <HAL_GPIO_Init+0x328>)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	3302      	adds	r3, #2
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800120a:	4b3d      	ldr	r3, [pc, #244]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	43db      	mvns	r3, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4013      	ands	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d003      	beq.n	800122e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	4313      	orrs	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800122e:	4a34      	ldr	r2, [pc, #208]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001234:	4b32      	ldr	r3, [pc, #200]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d003      	beq.n	8001258 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001258:	4a29      	ldr	r2, [pc, #164]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800125e:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001282:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <HAL_GPIO_Init+0x354>)
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_GPIO_Init+0x354>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012ac:	4a14      	ldr	r2, [pc, #80]	@ (8001300 <HAL_GPIO_Init+0x354>)
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3301      	adds	r3, #1
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	2b0f      	cmp	r3, #15
 80012bc:	f67f ae86 	bls.w	8000fcc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80012c0:	bf00      	nop
 80012c2:	bf00      	nop
 80012c4:	3724      	adds	r7, #36	@ 0x24
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40013800 	.word	0x40013800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40020800 	.word	0x40020800
 80012e4:	40020c00 	.word	0x40020c00
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40021400 	.word	0x40021400
 80012f0:	40021800 	.word	0x40021800
 80012f4:	40021c00 	.word	0x40021c00
 80012f8:	40022000 	.word	0x40022000
 80012fc:	40022400 	.word	0x40022400
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800130e:	4b23      	ldr	r3, [pc, #140]	@ (800139c <HAL_PWREx_EnableOverDrive+0x98>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	4a22      	ldr	r2, [pc, #136]	@ (800139c <HAL_PWREx_EnableOverDrive+0x98>)
 8001314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001318:	6413      	str	r3, [r2, #64]	@ 0x40
 800131a:	4b20      	ldr	r3, [pc, #128]	@ (800139c <HAL_PWREx_EnableOverDrive+0x98>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001326:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800132c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001330:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001332:	f7ff fd1d 	bl	8000d70 <HAL_GetTick>
 8001336:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001338:	e009      	b.n	800134e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800133a:	f7ff fd19 	bl	8000d70 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001348:	d901      	bls.n	800134e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e022      	b.n	8001394 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135a:	d1ee      	bne.n	800133a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800135c:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a0f      	ldr	r2, [pc, #60]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001366:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001368:	f7ff fd02 	bl	8000d70 <HAL_GetTick>
 800136c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800136e:	e009      	b.n	8001384 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001370:	f7ff fcfe 	bl	8000d70 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800137e:	d901      	bls.n	8001384 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e007      	b.n	8001394 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001390:	d1ee      	bne.n	8001370 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d101      	bne.n	80013ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e29b      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 8087 	beq.w	80014d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013c8:	4b96      	ldr	r3, [pc, #600]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030c 	and.w	r3, r3, #12
 80013d0:	2b04      	cmp	r3, #4
 80013d2:	d00c      	beq.n	80013ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013d4:	4b93      	ldr	r3, [pc, #588]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	f003 030c 	and.w	r3, r3, #12
 80013dc:	2b08      	cmp	r3, #8
 80013de:	d112      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
 80013e0:	4b90      	ldr	r3, [pc, #576]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ec:	d10b      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ee:	4b8d      	ldr	r3, [pc, #564]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d06c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x130>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d168      	bne.n	80014d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e275      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x7a>
 8001410:	4b84      	ldr	r3, [pc, #528]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a83      	ldr	r2, [pc, #524]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e02e      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x9c>
 8001426:	4b7f      	ldr	r3, [pc, #508]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a7e      	ldr	r2, [pc, #504]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800142c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7c      	ldr	r3, [pc, #496]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7b      	ldr	r2, [pc, #492]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001438:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0xc0>
 800144a:	4b76      	ldr	r3, [pc, #472]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a75      	ldr	r2, [pc, #468]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b73      	ldr	r3, [pc, #460]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a72      	ldr	r2, [pc, #456]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001464:	4b6f      	ldr	r3, [pc, #444]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a6e      	ldr	r2, [pc, #440]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b6c      	ldr	r3, [pc, #432]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6b      	ldr	r2, [pc, #428]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fc74 	bl	8000d70 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fc70 	bl	8000d70 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	@ 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e229      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149e:	4b61      	ldr	r3, [pc, #388]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fc60 	bl	8000d70 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fc5c 	bl	8000d70 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	@ 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e215      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	4b57      	ldr	r3, [pc, #348]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x110>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d069      	beq.n	80015b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014e2:	4b50      	ldr	r3, [pc, #320]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00b      	beq.n	8001506 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ee:	4b4d      	ldr	r3, [pc, #308]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d11c      	bne.n	8001534 <HAL_RCC_OscConfig+0x190>
 80014fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d116      	bne.n	8001534 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001506:	4b47      	ldr	r3, [pc, #284]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d005      	beq.n	800151e <HAL_RCC_OscConfig+0x17a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d001      	beq.n	800151e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e1e9      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b41      	ldr	r3, [pc, #260]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	493d      	ldr	r1, [pc, #244]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800152e:	4313      	orrs	r3, r2
 8001530:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	e040      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d023      	beq.n	8001584 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800153c:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a38      	ldr	r2, [pc, #224]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff fc12 	bl	8000d70 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001550:	f7ff fc0e 	bl	8000d70 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e1c7      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001562:	4b30      	ldr	r3, [pc, #192]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156e:	4b2d      	ldr	r3, [pc, #180]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	4929      	ldr	r1, [pc, #164]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800157e:	4313      	orrs	r3, r2
 8001580:	600b      	str	r3, [r1, #0]
 8001582:	e018      	b.n	80015b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001584:	4b27      	ldr	r3, [pc, #156]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a26      	ldr	r2, [pc, #152]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 800158a:	f023 0301 	bic.w	r3, r3, #1
 800158e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff fbee 	bl	8000d70 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001598:	f7ff fbea 	bl	8000d70 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b02      	cmp	r3, #2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e1a3      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f0      	bne.n	8001598 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d038      	beq.n	8001634 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d019      	beq.n	80015fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ca:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80015cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ce:	4a15      	ldr	r2, [pc, #84]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015d6:	f7ff fbcb 	bl	8000d70 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015de:	f7ff fbc7 	bl	8000d70 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e180      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 80015f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x23a>
 80015fc:	e01a      	b.n	8001634 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001600:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001602:	4a08      	ldr	r2, [pc, #32]	@ (8001624 <HAL_RCC_OscConfig+0x280>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800160a:	f7ff fbb1 	bl	8000d70 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	e00a      	b.n	8001628 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001612:	f7ff fbad 	bl	8000d70 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d903      	bls.n	8001628 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e166      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
 8001624:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001628:	4b92      	ldr	r3, [pc, #584]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800162a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	d1ee      	bne.n	8001612 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	2b00      	cmp	r3, #0
 800163e:	f000 80a4 	beq.w	800178a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001642:	4b8c      	ldr	r3, [pc, #560]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d10d      	bne.n	800166a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b89      	ldr	r3, [pc, #548]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001652:	4a88      	ldr	r2, [pc, #544]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	6413      	str	r3, [r2, #64]	@ 0x40
 800165a:	4b86      	ldr	r3, [pc, #536]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	60bb      	str	r3, [r7, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001666:	2301      	movs	r3, #1
 8001668:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800166a:	4b83      	ldr	r3, [pc, #524]	@ (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001672:	2b00      	cmp	r3, #0
 8001674:	d118      	bne.n	80016a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001676:	4b80      	ldr	r3, [pc, #512]	@ (8001878 <HAL_RCC_OscConfig+0x4d4>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a7f      	ldr	r2, [pc, #508]	@ (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001682:	f7ff fb75 	bl	8000d70 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fb71 	bl	8000d70 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b64      	cmp	r3, #100	@ 0x64
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e12a      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800169c:	4b76      	ldr	r3, [pc, #472]	@ (8001878 <HAL_RCC_OscConfig+0x4d4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x31a>
 80016b0:	4b70      	ldr	r3, [pc, #448]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b4:	4a6f      	ldr	r2, [pc, #444]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80016bc:	e02d      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x33c>
 80016c6:	4b6b      	ldr	r3, [pc, #428]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d2:	4b68      	ldr	r3, [pc, #416]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d6:	4a67      	ldr	r2, [pc, #412]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80016de:	e01c      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d10c      	bne.n	8001702 <HAL_RCC_OscConfig+0x35e>
 80016e8:	4b62      	ldr	r3, [pc, #392]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ec:	4a61      	ldr	r2, [pc, #388]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f4:	4b5f      	ldr	r3, [pc, #380]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001700:	e00b      	b.n	800171a <HAL_RCC_OscConfig+0x376>
 8001702:	4b5c      	ldr	r3, [pc, #368]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6713      	str	r3, [r2, #112]	@ 0x70
 800170e:	4b59      	ldr	r3, [pc, #356]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001710:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001712:	4a58      	ldr	r2, [pc, #352]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001714:	f023 0304 	bic.w	r3, r3, #4
 8001718:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d015      	beq.n	800174e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001722:	f7ff fb25 	bl	8000d70 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb21 	bl	8000d70 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e0d8      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001740:	4b4c      	ldr	r3, [pc, #304]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0ee      	beq.n	800172a <HAL_RCC_OscConfig+0x386>
 800174c:	e014      	b.n	8001778 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800174e:	f7ff fb0f 	bl	8000d70 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fb0b 	bl	8000d70 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0c2      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800176c:	4b41      	ldr	r3, [pc, #260]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1ee      	bne.n	8001756 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001778:	7dfb      	ldrb	r3, [r7, #23]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d105      	bne.n	800178a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177e:	4b3d      	ldr	r3, [pc, #244]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001782:	4a3c      	ldr	r2, [pc, #240]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001784:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001788:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	f000 80ae 	beq.w	80018f0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001794:	4b37      	ldr	r3, [pc, #220]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b08      	cmp	r3, #8
 800179e:	d06d      	beq.n	800187c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d14b      	bne.n	8001840 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017a8:	4b32      	ldr	r3, [pc, #200]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a31      	ldr	r2, [pc, #196]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b4:	f7ff fadc 	bl	8000d70 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff fad8 	bl	8000d70 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e091      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	019b      	lsls	r3, r3, #6
 80017ea:	431a      	orrs	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	3b01      	subs	r3, #1
 80017f4:	041b      	lsls	r3, r3, #16
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	061b      	lsls	r3, r3, #24
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001804:	071b      	lsls	r3, r3, #28
 8001806:	491b      	ldr	r1, [pc, #108]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a18      	ldr	r2, [pc, #96]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff faaa 	bl	8000d70 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff faa6 	bl	8000d70 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e05f      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x47c>
 800183e:	e057      	b.n	80018f0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff fa90 	bl	8000d70 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff fa8c 	bl	8000d70 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e045      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001866:	4b03      	ldr	r3, [pc, #12]	@ (8001874 <HAL_RCC_OscConfig+0x4d0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x4b0>
 8001872:	e03d      	b.n	80018f0 <HAL_RCC_OscConfig+0x54c>
 8001874:	40023800 	.word	0x40023800
 8001878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800187c:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <HAL_RCC_OscConfig+0x558>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d030      	beq.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001894:	429a      	cmp	r2, r3
 8001896:	d129      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d122      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018ac:	4013      	ands	r3, r2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018b2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d119      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10f      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d107      	bne.n	80018ec <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023800 	.word	0x40023800

08001900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e0d0      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001918:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 030f 	and.w	r3, r3, #15
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d910      	bls.n	8001948 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b67      	ldr	r3, [pc, #412]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 020f 	bic.w	r2, r3, #15
 800192e:	4965      	ldr	r1, [pc, #404]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b63      	ldr	r3, [pc, #396]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0b8      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d020      	beq.n	8001996 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0304 	and.w	r3, r3, #4
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001960:	4b59      	ldr	r3, [pc, #356]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4a58      	ldr	r2, [pc, #352]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800196a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a52      	ldr	r2, [pc, #328]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001982:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001984:	4b50      	ldr	r3, [pc, #320]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	494d      	ldr	r1, [pc, #308]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d040      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d107      	bne.n	80019ba <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d115      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e07f      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e073      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d101      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e06b      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e2:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f023 0203 	bic.w	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	4936      	ldr	r1, [pc, #216]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019f4:	f7ff f9bc 	bl	8000d70 <HAL_GetTick>
 80019f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fa:	e00a      	b.n	8001a12 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019fc:	f7ff f9b8 	bl	8000d70 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e053      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 020c 	and.w	r2, r3, #12
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d1eb      	bne.n	80019fc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 030f 	and.w	r3, r3, #15
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d210      	bcs.n	8001a54 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a32:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f023 020f 	bic.w	r2, r3, #15
 8001a3a:	4922      	ldr	r1, [pc, #136]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a42:	4b20      	ldr	r3, [pc, #128]	@ (8001ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 030f 	and.w	r3, r3, #15
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d001      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e032      	b.n	8001aba <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d008      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	4916      	ldr	r1, [pc, #88]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a7e:	4b12      	ldr	r3, [pc, #72]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	490e      	ldr	r1, [pc, #56]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a92:	f000 f821 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	490a      	ldr	r1, [pc, #40]	@ (8001acc <HAL_RCC_ClockConfig+0x1cc>)
 8001aa4:	5ccb      	ldrb	r3, [r1, r3]
 8001aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aaa:	4a09      	ldr	r2, [pc, #36]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8001aac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f918 	bl	8000ce8 <HAL_InitTick>

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	080042bc 	.word	0x080042bc
 8001ad0:	20000000 	.word	0x20000000
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001adc:	b090      	sub	sp, #64	@ 0x40
 8001ade:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ae8:	2300      	movs	r3, #0
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001af0:	4b59      	ldr	r3, [pc, #356]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f003 030c 	and.w	r3, r3, #12
 8001af8:	2b08      	cmp	r3, #8
 8001afa:	d00d      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x40>
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	f200 80a1 	bhi.w	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <HAL_RCC_GetSysClockFreq+0x34>
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d003      	beq.n	8001b12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001b0a:	e09b      	b.n	8001c44 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b0e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b10:	e09b      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b12:	4b53      	ldr	r3, [pc, #332]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b16:	e098      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b18:	4b4f      	ldr	r3, [pc, #316]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b20:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b22:	4b4d      	ldr	r3, [pc, #308]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d028      	beq.n	8001b80 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	623b      	str	r3, [r7, #32]
 8001b38:	627a      	str	r2, [r7, #36]	@ 0x24
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b40:	2100      	movs	r1, #0
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b44:	fb03 f201 	mul.w	r2, r3, r1
 8001b48:	2300      	movs	r3, #0
 8001b4a:	fb00 f303 	mul.w	r3, r0, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b52:	fba0 1202 	umull	r1, r2, r0, r2
 8001b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b58:	460a      	mov	r2, r1
 8001b5a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b5e:	4413      	add	r3, r2
 8001b60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b64:	2200      	movs	r2, #0
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	61fa      	str	r2, [r7, #28]
 8001b6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001b72:	f7fe fbbd 	bl	80002f0 <__aeabi_uldivmod>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001b7e:	e053      	b.n	8001c28 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b80:	4b35      	ldr	r3, [pc, #212]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	099b      	lsrs	r3, r3, #6
 8001b86:	2200      	movs	r2, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	617a      	str	r2, [r7, #20]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001b92:	f04f 0b00 	mov.w	fp, #0
 8001b96:	4652      	mov	r2, sl
 8001b98:	465b      	mov	r3, fp
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	0159      	lsls	r1, r3, #5
 8001ba4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ba8:	0150      	lsls	r0, r2, #5
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	ebb2 080a 	subs.w	r8, r2, sl
 8001bb2:	eb63 090b 	sbc.w	r9, r3, fp
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	f04f 0300 	mov.w	r3, #0
 8001bbe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bc2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bc6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001bca:	ebb2 0408 	subs.w	r4, r2, r8
 8001bce:	eb63 0509 	sbc.w	r5, r3, r9
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	00eb      	lsls	r3, r5, #3
 8001bdc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001be0:	00e2      	lsls	r2, r4, #3
 8001be2:	4614      	mov	r4, r2
 8001be4:	461d      	mov	r5, r3
 8001be6:	eb14 030a 	adds.w	r3, r4, sl
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	eb45 030b 	adc.w	r3, r5, fp
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bfe:	4629      	mov	r1, r5
 8001c00:	028b      	lsls	r3, r1, #10
 8001c02:	4621      	mov	r1, r4
 8001c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c08:	4621      	mov	r1, r4
 8001c0a:	028a      	lsls	r2, r1, #10
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c12:	2200      	movs	r2, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	60fa      	str	r2, [r7, #12]
 8001c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c1c:	f7fe fb68 	bl	80002f0 <__aeabi_uldivmod>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4613      	mov	r3, r2
 8001c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	0c1b      	lsrs	r3, r3, #16
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	3301      	adds	r3, #1
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001c38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c40:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c42:	e002      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c44:	4b05      	ldr	r3, [pc, #20]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x184>)
 8001c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001c48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3740      	adds	r7, #64	@ 0x40
 8001c50:	46bd      	mov	sp, r7
 8001c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	00f42400 	.word	0x00f42400
 8001c60:	017d7840 	.word	0x017d7840

08001c64 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c80:	f7ff fff0 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001c84:	4602      	mov	r2, r0
 8001c86:	4b05      	ldr	r3, [pc, #20]	@ (8001c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	0a9b      	lsrs	r3, r3, #10
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	4903      	ldr	r1, [pc, #12]	@ (8001ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c92:	5ccb      	ldrb	r3, [r1, r3]
 8001c94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	080042cc 	.word	0x080042cc

08001ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ca8:	f7ff ffdc 	bl	8001c64 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	@ (8001cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	0b5b      	lsrs	r3, r3, #13
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	@ (8001cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	080042cc 	.word	0x080042cc

08001ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cf4:	4b69      	ldr	r3, [pc, #420]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	4a68      	ldr	r2, [pc, #416]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfa:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001cfe:	6093      	str	r3, [r2, #8]
 8001d00:	4b66      	ldr	r3, [pc, #408]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d08:	4964      	ldr	r1, [pc, #400]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d017      	beq.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d26:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d2c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d34:	4959      	ldr	r1, [pc, #356]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d44:	d101      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d017      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d62:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d68:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	494a      	ldr	r1, [pc, #296]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d80:	d101      	bne.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001d82:	2301      	movs	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 808b 	beq.w	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db4:	4a39      	ldr	r2, [pc, #228]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dbc:	4b37      	ldr	r3, [pc, #220]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dc8:	4b35      	ldr	r3, [pc, #212]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a34      	ldr	r2, [pc, #208]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dd4:	f7fe ffcc 	bl	8000d70 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ddc:	f7fe ffc8 	bl	8000d70 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b64      	cmp	r3, #100	@ 0x64
 8001de8:	d901      	bls.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e38f      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dee:	4b2c      	ldr	r3, [pc, #176]	@ (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dfc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d035      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d02e      	beq.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e18:	4b20      	ldr	r3, [pc, #128]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e20:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e22:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e26:	4a1d      	ldr	r2, [pc, #116]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	4a1a      	ldr	r2, [pc, #104]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e38:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e3a:	4a18      	ldr	r2, [pc, #96]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e40:	4b16      	ldr	r3, [pc, #88]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d114      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7fe ff90 	bl	8000d70 <HAL_GetTick>
 8001e50:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e52:	e00a      	b.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe ff8c 	bl	8000d70 <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e351      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d0ee      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001e82:	d111      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001e84:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e90:	4b04      	ldr	r3, [pc, #16]	@ (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001e92:	400b      	ands	r3, r1
 8001e94:	4901      	ldr	r1, [pc, #4]	@ (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
 8001e9a:	e00b      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	0ffffcff 	.word	0x0ffffcff
 8001ea8:	4bac      	ldr	r3, [pc, #688]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4aab      	ldr	r2, [pc, #684]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eae:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001eb2:	6093      	str	r3, [r2, #8]
 8001eb4:	4ba9      	ldr	r3, [pc, #676]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eb6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	49a6      	ldr	r1, [pc, #664]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d010      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001ed2:	4ba2      	ldr	r3, [pc, #648]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001ed8:	4aa0      	ldr	r2, [pc, #640]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ede:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001ee2:	4b9e      	ldr	r3, [pc, #632]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ee4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eec:	499b      	ldr	r1, [pc, #620]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f00:	4b96      	ldr	r3, [pc, #600]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f0e:	4993      	ldr	r1, [pc, #588]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f22:	4b8e      	ldr	r3, [pc, #568]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f28:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f30:	498a      	ldr	r1, [pc, #552]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f44:	4b85      	ldr	r3, [pc, #532]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f52:	4982      	ldr	r1, [pc, #520]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f66:	4b7d      	ldr	r3, [pc, #500]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f74:	4979      	ldr	r1, [pc, #484]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00a      	beq.n	8001f9e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f88:	4b74      	ldr	r3, [pc, #464]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f8e:	f023 0203 	bic.w	r2, r3, #3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4971      	ldr	r1, [pc, #452]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001faa:	4b6c      	ldr	r3, [pc, #432]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb0:	f023 020c 	bic.w	r2, r3, #12
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fb8:	4968      	ldr	r1, [pc, #416]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00a      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001fcc:	4b63      	ldr	r3, [pc, #396]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fda:	4960      	ldr	r1, [pc, #384]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001fee:	4b5b      	ldr	r3, [pc, #364]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001ffc:	4957      	ldr	r1, [pc, #348]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00a      	beq.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002010:	4b52      	ldr	r3, [pc, #328]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002016:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800201e:	494f      	ldr	r1, [pc, #316]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002020:	4313      	orrs	r3, r2
 8002022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002032:	4b4a      	ldr	r3, [pc, #296]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002038:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002040:	4946      	ldr	r1, [pc, #280]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002042:	4313      	orrs	r3, r2
 8002044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00a      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002054:	4b41      	ldr	r3, [pc, #260]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800205a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002062:	493e      	ldr	r1, [pc, #248]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00a      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002076:	4b39      	ldr	r3, [pc, #228]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800207c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002084:	4935      	ldr	r1, [pc, #212]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002086:	4313      	orrs	r3, r2
 8002088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002098:	4b30      	ldr	r3, [pc, #192]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800209e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80020a6:	492d      	ldr	r1, [pc, #180]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d011      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ba:	4b28      	ldr	r3, [pc, #160]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020c0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020c8:	4924      	ldr	r1, [pc, #144]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80020d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020d8:	d101      	bne.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80020ea:	2301      	movs	r3, #1
 80020ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020fa:	4b18      	ldr	r3, [pc, #96]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002100:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002108:	4914      	ldr	r1, [pc, #80]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800210a:	4313      	orrs	r3, r2
 800210c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00b      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800211c:	4b0f      	ldr	r3, [pc, #60]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800211e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002122:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800212c:	490b      	ldr	r1, [pc, #44]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800212e:	4313      	orrs	r3, r2
 8002130:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00f      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002140:	4b06      	ldr	r3, [pc, #24]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002142:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002146:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002150:	4902      	ldr	r1, [pc, #8]	@ (800215c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002152:	4313      	orrs	r3, r2
 8002154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002158:	e002      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800215a:	bf00      	nop
 800215c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00b      	beq.n	8002184 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800216c:	4b8a      	ldr	r3, [pc, #552]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002172:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	4986      	ldr	r1, [pc, #536]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800217e:	4313      	orrs	r3, r2
 8002180:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00b      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002190:	4b81      	ldr	r3, [pc, #516]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002196:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80021a0:	497d      	ldr	r1, [pc, #500]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d006      	beq.n	80021bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 80d6 	beq.w	8002368 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021bc:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a75      	ldr	r2, [pc, #468]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80021c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c8:	f7fe fdd2 	bl	8000d70 <HAL_GetTick>
 80021cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021d0:	f7fe fdce 	bl	8000d70 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e195      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80021e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d021      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d11d      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002202:	4b65      	ldr	r3, [pc, #404]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002210:	4b61      	ldr	r3, [pc, #388]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002212:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002216:	0e1b      	lsrs	r3, r3, #24
 8002218:	f003 030f 	and.w	r3, r3, #15
 800221c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	019a      	lsls	r2, r3, #6
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	041b      	lsls	r3, r3, #16
 8002228:	431a      	orrs	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	061b      	lsls	r3, r3, #24
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	071b      	lsls	r3, r3, #28
 8002236:	4958      	ldr	r1, [pc, #352]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002238:	4313      	orrs	r3, r2
 800223a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002252:	d00a      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800225c:	2b00      	cmp	r3, #0
 800225e:	d02e      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002268:	d129      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800226a:	4b4b      	ldr	r3, [pc, #300]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800226c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002278:	4b47      	ldr	r3, [pc, #284]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800227a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800227e:	0f1b      	lsrs	r3, r3, #28
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	019a      	lsls	r2, r3, #6
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	041b      	lsls	r3, r3, #16
 8002290:	431a      	orrs	r2, r3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	431a      	orrs	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	071b      	lsls	r3, r3, #28
 800229e:	493e      	ldr	r1, [pc, #248]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022a6:	4b3c      	ldr	r3, [pc, #240]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022ac:	f023 021f 	bic.w	r2, r3, #31
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b4:	3b01      	subs	r3, #1
 80022b6:	4938      	ldr	r1, [pc, #224]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d01d      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022ca:	4b33      	ldr	r3, [pc, #204]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022d0:	0e1b      	lsrs	r3, r3, #24
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022d8:	4b2f      	ldr	r3, [pc, #188]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80022da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022de:	0f1b      	lsrs	r3, r3, #28
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	019a      	lsls	r2, r3, #6
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	041b      	lsls	r3, r3, #16
 80022f2:	431a      	orrs	r2, r3
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	061b      	lsls	r3, r3, #24
 80022f8:	431a      	orrs	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	071b      	lsls	r3, r3, #28
 80022fe:	4926      	ldr	r1, [pc, #152]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d011      	beq.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	019a      	lsls	r2, r3, #6
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	041b      	lsls	r3, r3, #16
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	071b      	lsls	r3, r3, #28
 800232e:	491a      	ldr	r1, [pc, #104]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002330:	4313      	orrs	r3, r2
 8002332:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a17      	ldr	r2, [pc, #92]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800233c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002342:	f7fe fd15 	bl	8000d70 <HAL_GetTick>
 8002346:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800234a:	f7fe fd11 	bl	8000d70 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b64      	cmp	r3, #100	@ 0x64
 8002356:	d901      	bls.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0d8      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800235c:	4b0e      	ldr	r3, [pc, #56]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	2b01      	cmp	r3, #1
 800236c:	f040 80ce 	bne.w	800250c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002370:	4b09      	ldr	r3, [pc, #36]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a08      	ldr	r2, [pc, #32]	@ (8002398 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800237a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800237c:	f7fe fcf8 	bl	8000d70 <HAL_GetTick>
 8002380:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002382:	e00b      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002384:	f7fe fcf4 	bl	8000d70 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d904      	bls.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e0bb      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800239c:	4b5e      	ldr	r3, [pc, #376]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023a8:	d0ec      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d009      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d02e      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12a      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80023d2:	4b51      	ldr	r3, [pc, #324]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d8:	0c1b      	lsrs	r3, r3, #16
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80023e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e6:	0f1b      	lsrs	r3, r3, #28
 80023e8:	f003 0307 	and.w	r3, r3, #7
 80023ec:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	019a      	lsls	r2, r3, #6
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	041b      	lsls	r3, r3, #16
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	061b      	lsls	r3, r3, #24
 8002400:	431a      	orrs	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	071b      	lsls	r3, r3, #28
 8002406:	4944      	ldr	r1, [pc, #272]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800240e:	4b42      	ldr	r3, [pc, #264]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002410:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002414:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241c:	3b01      	subs	r3, #1
 800241e:	021b      	lsls	r3, r3, #8
 8002420:	493d      	ldr	r1, [pc, #244]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d022      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002438:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800243c:	d11d      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800243e:	4b36      	ldr	r3, [pc, #216]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002440:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002444:	0e1b      	lsrs	r3, r3, #24
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800244c:	4b32      	ldr	r3, [pc, #200]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002452:	0f1b      	lsrs	r3, r3, #28
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	019a      	lsls	r2, r3, #6
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	041b      	lsls	r3, r3, #16
 8002466:	431a      	orrs	r2, r3
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	061b      	lsls	r3, r3, #24
 800246c:	431a      	orrs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	071b      	lsls	r3, r3, #28
 8002472:	4929      	ldr	r1, [pc, #164]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d028      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002486:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800248c:	0e1b      	lsrs	r3, r3, #24
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002494:	4b20      	ldr	r3, [pc, #128]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	019a      	lsls	r2, r3, #6
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	041b      	lsls	r3, r3, #16
 80024ac:	431a      	orrs	r2, r3
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	431a      	orrs	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	071b      	lsls	r3, r3, #28
 80024ba:	4917      	ldr	r1, [pc, #92]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024c2:	4b15      	ldr	r3, [pc, #84]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d0:	4911      	ldr	r1, [pc, #68]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80024d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a0e      	ldr	r2, [pc, #56]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80024de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024e4:	f7fe fc44 	bl	8000d70 <HAL_GetTick>
 80024e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80024ec:	f7fe fc40 	bl	8000d70 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b64      	cmp	r3, #100	@ 0x64
 80024f8:	d901      	bls.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e007      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80024fe:	4b06      	ldr	r3, [pc, #24]	@ (8002518 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800250a:	d1ef      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3720      	adds	r7, #32
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e049      	b.n	80025c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe faca 	bl	8000adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3304      	adds	r3, #4
 8002558:	4619      	mov	r1, r3
 800255a:	4610      	mov	r0, r2
 800255c:	f000 fab2 	bl	8002ac4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d001      	beq.n	80025e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e054      	b.n	800268e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	68da      	ldr	r2, [r3, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0201 	orr.w	r2, r2, #1
 80025fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a26      	ldr	r2, [pc, #152]	@ (800269c <HAL_TIM_Base_Start_IT+0xd0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d022      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d01d      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d018      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a21      	ldr	r2, [pc, #132]	@ (80026a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d013      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a1f      	ldr	r2, [pc, #124]	@ (80026a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00e      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a1e      	ldr	r2, [pc, #120]	@ (80026ac <HAL_TIM_Base_Start_IT+0xe0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d009      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a1c      	ldr	r2, [pc, #112]	@ (80026b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d004      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x80>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a1b      	ldr	r2, [pc, #108]	@ (80026b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d115      	bne.n	8002678 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	4b19      	ldr	r3, [pc, #100]	@ (80026b8 <HAL_TIM_Base_Start_IT+0xec>)
 8002654:	4013      	ands	r3, r2
 8002656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2b06      	cmp	r3, #6
 800265c:	d015      	beq.n	800268a <HAL_TIM_Base_Start_IT+0xbe>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002664:	d011      	beq.n	800268a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f042 0201 	orr.w	r2, r2, #1
 8002674:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	e008      	b.n	800268a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	e000      	b.n	800268c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800268a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	40010000 	.word	0x40010000
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800
 80026a8:	40000c00 	.word	0x40000c00
 80026ac:	40010400 	.word	0x40010400
 80026b0:	40014000 	.word	0x40014000
 80026b4:	40001800 	.word	0x40001800
 80026b8:	00010007 	.word	0x00010007

080026bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d020      	beq.n	8002720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d01b      	beq.n	8002720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0202 	mvn.w	r2, #2
 80026f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f9be 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f9b0 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f9c1 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d020      	beq.n	800276c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b00      	cmp	r3, #0
 8002732:	d01b      	beq.n	800276c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f06f 0204 	mvn.w	r2, #4
 800273c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f998 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 8002758:	e005      	b.n	8002766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f98a 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f000 f99b 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	f003 0308 	and.w	r3, r3, #8
 8002772:	2b00      	cmp	r3, #0
 8002774:	d020      	beq.n	80027b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01b      	beq.n	80027b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f06f 0208 	mvn.w	r2, #8
 8002788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2204      	movs	r2, #4
 800278e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f972 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80027a4:	e005      	b.n	80027b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f000 f964 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 f975 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d020      	beq.n	8002804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d01b      	beq.n	8002804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f06f 0210 	mvn.w	r2, #16
 80027d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2208      	movs	r2, #8
 80027da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f94c 	bl	8002a88 <HAL_TIM_IC_CaptureCallback>
 80027f0:	e005      	b.n	80027fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 f93e 	bl	8002a74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f94f 	bl	8002a9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00c      	beq.n	8002828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d007      	beq.n	8002828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0201 	mvn.w	r2, #1
 8002820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 f91c 	bl	8002a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d104      	bne.n	800283c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002842:	2b00      	cmp	r3, #0
 8002844:	d007      	beq.n	8002856 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800284e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fb0f 	bl	8002e74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 fb07 	bl	8002e88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00c      	beq.n	800289e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002896:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f909 	bl	8002ab0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00c      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f003 0320 	and.w	r3, r3, #32
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f06f 0220 	mvn.w	r2, #32
 80028ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 facf 	bl	8002e60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c2:	bf00      	nop
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
	...

080028cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_TIM_ConfigClockSource+0x1c>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e0b4      	b.n	8002a52 <HAL_TIM_ConfigClockSource+0x186>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68ba      	ldr	r2, [r7, #8]
 8002902:	4b56      	ldr	r3, [pc, #344]	@ (8002a5c <HAL_TIM_ConfigClockSource+0x190>)
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800290e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68ba      	ldr	r2, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002920:	d03e      	beq.n	80029a0 <HAL_TIM_ConfigClockSource+0xd4>
 8002922:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002926:	f200 8087 	bhi.w	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 800292a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800292e:	f000 8086 	beq.w	8002a3e <HAL_TIM_ConfigClockSource+0x172>
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002936:	d87f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002938:	2b70      	cmp	r3, #112	@ 0x70
 800293a:	d01a      	beq.n	8002972 <HAL_TIM_ConfigClockSource+0xa6>
 800293c:	2b70      	cmp	r3, #112	@ 0x70
 800293e:	d87b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002940:	2b60      	cmp	r3, #96	@ 0x60
 8002942:	d050      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x11a>
 8002944:	2b60      	cmp	r3, #96	@ 0x60
 8002946:	d877      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002948:	2b50      	cmp	r3, #80	@ 0x50
 800294a:	d03c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0xfa>
 800294c:	2b50      	cmp	r3, #80	@ 0x50
 800294e:	d873      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002950:	2b40      	cmp	r3, #64	@ 0x40
 8002952:	d058      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x13a>
 8002954:	2b40      	cmp	r3, #64	@ 0x40
 8002956:	d86f      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002958:	2b30      	cmp	r3, #48	@ 0x30
 800295a:	d064      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800295c:	2b30      	cmp	r3, #48	@ 0x30
 800295e:	d86b      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002960:	2b20      	cmp	r3, #32
 8002962:	d060      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002964:	2b20      	cmp	r3, #32
 8002966:	d867      	bhi.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d05c      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 800296c:	2b10      	cmp	r3, #16
 800296e:	d05a      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0x15a>
 8002970:	e062      	b.n	8002a38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002982:	f000 f9bf 	bl	8002d04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	609a      	str	r2, [r3, #8]
      break;
 800299e:	e04f      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029b0:	f000 f9a8 	bl	8002d04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029c2:	609a      	str	r2, [r3, #8]
      break;
 80029c4:	e03c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 f91c 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2150      	movs	r1, #80	@ 0x50
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 f975 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 80029e4:	e02c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 f93b 	bl	8002c6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2160      	movs	r1, #96	@ 0x60
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 f965 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a04:	e01c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a12:	461a      	mov	r2, r3
 8002a14:	f000 f8fc 	bl	8002c10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2140      	movs	r1, #64	@ 0x40
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f955 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a24:	e00c      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4610      	mov	r0, r2
 8002a32:	f000 f94c 	bl	8002cce <TIM_ITRx_SetConfig>
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a3c:	e000      	b.n	8002a40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	fffeff88 	.word	0xfffeff88

08002a60 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	@ (8002be4 <TIM_Base_SetConfig+0x120>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d013      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae2:	d00f      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a40      	ldr	r2, [pc, #256]	@ (8002be8 <TIM_Base_SetConfig+0x124>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d00b      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a3f      	ldr	r2, [pc, #252]	@ (8002bec <TIM_Base_SetConfig+0x128>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d007      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bf0 <TIM_Base_SetConfig+0x12c>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d003      	beq.n	8002b04 <TIM_Base_SetConfig+0x40>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a3d      	ldr	r2, [pc, #244]	@ (8002bf4 <TIM_Base_SetConfig+0x130>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d108      	bne.n	8002b16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a32      	ldr	r2, [pc, #200]	@ (8002be4 <TIM_Base_SetConfig+0x120>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d02b      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b24:	d027      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a2f      	ldr	r2, [pc, #188]	@ (8002be8 <TIM_Base_SetConfig+0x124>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d023      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a2e      	ldr	r2, [pc, #184]	@ (8002bec <TIM_Base_SetConfig+0x128>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d01f      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a2d      	ldr	r2, [pc, #180]	@ (8002bf0 <TIM_Base_SetConfig+0x12c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01b      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf4 <TIM_Base_SetConfig+0x130>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d017      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a2b      	ldr	r2, [pc, #172]	@ (8002bf8 <TIM_Base_SetConfig+0x134>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d013      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a2a      	ldr	r2, [pc, #168]	@ (8002bfc <TIM_Base_SetConfig+0x138>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d00f      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a29      	ldr	r2, [pc, #164]	@ (8002c00 <TIM_Base_SetConfig+0x13c>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d00b      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a28      	ldr	r2, [pc, #160]	@ (8002c04 <TIM_Base_SetConfig+0x140>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d007      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a27      	ldr	r2, [pc, #156]	@ (8002c08 <TIM_Base_SetConfig+0x144>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d003      	beq.n	8002b76 <TIM_Base_SetConfig+0xb2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a26      	ldr	r2, [pc, #152]	@ (8002c0c <TIM_Base_SetConfig+0x148>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d108      	bne.n	8002b88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <TIM_Base_SetConfig+0x120>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d003      	beq.n	8002bb6 <TIM_Base_SetConfig+0xf2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a10      	ldr	r2, [pc, #64]	@ (8002bf4 <TIM_Base_SetConfig+0x130>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d103      	bne.n	8002bbe <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f043 0204 	orr.w	r2, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68fa      	ldr	r2, [r7, #12]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	3714      	adds	r7, #20
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40010000 	.word	0x40010000
 8002be8:	40000400 	.word	0x40000400
 8002bec:	40000800 	.word	0x40000800
 8002bf0:	40000c00 	.word	0x40000c00
 8002bf4:	40010400 	.word	0x40010400
 8002bf8:	40014000 	.word	0x40014000
 8002bfc:	40014400 	.word	0x40014400
 8002c00:	40014800 	.word	0x40014800
 8002c04:	40001800 	.word	0x40001800
 8002c08:	40001c00 	.word	0x40001c00
 8002c0c:	40002000 	.word	0x40002000

08002c10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b087      	sub	sp, #28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f023 0201 	bic.w	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	011b      	lsls	r3, r3, #4
 8002c40:	693a      	ldr	r2, [r7, #16]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	f023 030a 	bic.w	r3, r3, #10
 8002c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	621a      	str	r2, [r3, #32]
}
 8002c62:	bf00      	nop
 8002c64:	371c      	adds	r7, #28
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b087      	sub	sp, #28
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f023 0210 	bic.w	r2, r3, #16
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	031b      	lsls	r3, r3, #12
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002caa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ce4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	f043 0307 	orr.w	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b087      	sub	sp, #28
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
 8002d10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	431a      	orrs	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	bf00      	nop
 8002d3a:	371c      	adds	r7, #28
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e06d      	b.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2202      	movs	r2, #2
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a30      	ldr	r2, [pc, #192]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d004      	beq.n	8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d108      	bne.n	8002da2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002d96:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	68fa      	ldr	r2, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d022      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dce:	d01d      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d018      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1c      	ldr	r2, [pc, #112]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1a      	ldr	r2, [pc, #104]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00e      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a15      	ldr	r2, [pc, #84]	@ (8002e48 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a16      	ldr	r2, [pc, #88]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a15      	ldr	r2, [pc, #84]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d10c      	bne.n	8002e26 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e12:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	40010000 	.word	0x40010000
 8002e48:	40010400 	.word	0x40010400
 8002e4c:	40000400 	.word	0x40000400
 8002e50:	40000800 	.word	0x40000800
 8002e54:	40000c00 	.word	0x40000c00
 8002e58:	40014000 	.word	0x40014000
 8002e5c:	40001800 	.word	0x40001800

08002e60 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e040      	b.n	8002f30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d106      	bne.n	8002ec4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f7fd fe7c 	bl	8000bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0201 	bic.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d002      	beq.n	8002ee8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fb16 	bl	8003514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8af 	bl	800304c <UART_SetConfig>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e01b      	b.n	8002f30 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685a      	ldr	r2, [r3, #4]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f000 fb95 	bl	8003658 <UART_CheckIdleState>
 8002f2e:	4603      	mov	r3, r0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08a      	sub	sp, #40	@ 0x28
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	4613      	mov	r3, r2
 8002f46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f4c:	2b20      	cmp	r3, #32
 8002f4e:	d177      	bne.n	8003040 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_UART_Transmit+0x24>
 8002f56:	88fb      	ldrh	r3, [r7, #6]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e070      	b.n	8003042 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2221      	movs	r2, #33	@ 0x21
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f6e:	f7fd feff 	bl	8000d70 <HAL_GetTick>
 8002f72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	88fa      	ldrh	r2, [r7, #6]
 8002f78:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e003      	b.n	8002fa8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa8:	e02f      	b.n	800300a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	@ 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fbf7 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e03b      	b.n	8003042 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fde:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
 8002fe6:	e007      	b.n	8002ff8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1c9      	bne.n	8002faa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	2200      	movs	r2, #0
 800301e:	2140      	movs	r1, #64	@ 0x40
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 fbc1 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d004      	beq.n	8003036 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2220      	movs	r2, #32
 8003030:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e005      	b.n	8003042 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4313      	orrs	r3, r2
 800306e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4ba6      	ldr	r3, [pc, #664]	@ (8003310 <UART_SetConfig+0x2c4>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	6979      	ldr	r1, [r7, #20]
 8003080:	430b      	orrs	r3, r1
 8003082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a94      	ldr	r2, [pc, #592]	@ (8003314 <UART_SetConfig+0x2c8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d120      	bne.n	800310a <UART_SetConfig+0xbe>
 80030c8:	4b93      	ldr	r3, [pc, #588]	@ (8003318 <UART_SetConfig+0x2cc>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d816      	bhi.n	8003104 <UART_SetConfig+0xb8>
 80030d6:	a201      	add	r2, pc, #4	@ (adr r2, 80030dc <UART_SetConfig+0x90>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	080030f3 	.word	0x080030f3
 80030e8:	080030ff 	.word	0x080030ff
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e150      	b.n	8003394 <UART_SetConfig+0x348>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e14d      	b.n	8003394 <UART_SetConfig+0x348>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e14a      	b.n	8003394 <UART_SetConfig+0x348>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e147      	b.n	8003394 <UART_SetConfig+0x348>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	e144      	b.n	8003394 <UART_SetConfig+0x348>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a83      	ldr	r2, [pc, #524]	@ (800331c <UART_SetConfig+0x2d0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d132      	bne.n	800317a <UART_SetConfig+0x12e>
 8003114:	4b80      	ldr	r3, [pc, #512]	@ (8003318 <UART_SetConfig+0x2cc>)
 8003116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800311a:	f003 030c 	and.w	r3, r3, #12
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d828      	bhi.n	8003174 <UART_SetConfig+0x128>
 8003122:	a201      	add	r2, pc, #4	@ (adr r2, 8003128 <UART_SetConfig+0xdc>)
 8003124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003128:	0800315d 	.word	0x0800315d
 800312c:	08003175 	.word	0x08003175
 8003130:	08003175 	.word	0x08003175
 8003134:	08003175 	.word	0x08003175
 8003138:	08003169 	.word	0x08003169
 800313c:	08003175 	.word	0x08003175
 8003140:	08003175 	.word	0x08003175
 8003144:	08003175 	.word	0x08003175
 8003148:	08003163 	.word	0x08003163
 800314c:	08003175 	.word	0x08003175
 8003150:	08003175 	.word	0x08003175
 8003154:	08003175 	.word	0x08003175
 8003158:	0800316f 	.word	0x0800316f
 800315c:	2300      	movs	r3, #0
 800315e:	77fb      	strb	r3, [r7, #31]
 8003160:	e118      	b.n	8003394 <UART_SetConfig+0x348>
 8003162:	2302      	movs	r3, #2
 8003164:	77fb      	strb	r3, [r7, #31]
 8003166:	e115      	b.n	8003394 <UART_SetConfig+0x348>
 8003168:	2304      	movs	r3, #4
 800316a:	77fb      	strb	r3, [r7, #31]
 800316c:	e112      	b.n	8003394 <UART_SetConfig+0x348>
 800316e:	2308      	movs	r3, #8
 8003170:	77fb      	strb	r3, [r7, #31]
 8003172:	e10f      	b.n	8003394 <UART_SetConfig+0x348>
 8003174:	2310      	movs	r3, #16
 8003176:	77fb      	strb	r3, [r7, #31]
 8003178:	e10c      	b.n	8003394 <UART_SetConfig+0x348>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a68      	ldr	r2, [pc, #416]	@ (8003320 <UART_SetConfig+0x2d4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d120      	bne.n	80031c6 <UART_SetConfig+0x17a>
 8003184:	4b64      	ldr	r3, [pc, #400]	@ (8003318 <UART_SetConfig+0x2cc>)
 8003186:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800318e:	2b30      	cmp	r3, #48	@ 0x30
 8003190:	d013      	beq.n	80031ba <UART_SetConfig+0x16e>
 8003192:	2b30      	cmp	r3, #48	@ 0x30
 8003194:	d814      	bhi.n	80031c0 <UART_SetConfig+0x174>
 8003196:	2b20      	cmp	r3, #32
 8003198:	d009      	beq.n	80031ae <UART_SetConfig+0x162>
 800319a:	2b20      	cmp	r3, #32
 800319c:	d810      	bhi.n	80031c0 <UART_SetConfig+0x174>
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <UART_SetConfig+0x15c>
 80031a2:	2b10      	cmp	r3, #16
 80031a4:	d006      	beq.n	80031b4 <UART_SetConfig+0x168>
 80031a6:	e00b      	b.n	80031c0 <UART_SetConfig+0x174>
 80031a8:	2300      	movs	r3, #0
 80031aa:	77fb      	strb	r3, [r7, #31]
 80031ac:	e0f2      	b.n	8003394 <UART_SetConfig+0x348>
 80031ae:	2302      	movs	r3, #2
 80031b0:	77fb      	strb	r3, [r7, #31]
 80031b2:	e0ef      	b.n	8003394 <UART_SetConfig+0x348>
 80031b4:	2304      	movs	r3, #4
 80031b6:	77fb      	strb	r3, [r7, #31]
 80031b8:	e0ec      	b.n	8003394 <UART_SetConfig+0x348>
 80031ba:	2308      	movs	r3, #8
 80031bc:	77fb      	strb	r3, [r7, #31]
 80031be:	e0e9      	b.n	8003394 <UART_SetConfig+0x348>
 80031c0:	2310      	movs	r3, #16
 80031c2:	77fb      	strb	r3, [r7, #31]
 80031c4:	e0e6      	b.n	8003394 <UART_SetConfig+0x348>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a56      	ldr	r2, [pc, #344]	@ (8003324 <UART_SetConfig+0x2d8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d120      	bne.n	8003212 <UART_SetConfig+0x1c6>
 80031d0:	4b51      	ldr	r3, [pc, #324]	@ (8003318 <UART_SetConfig+0x2cc>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031d6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031da:	2bc0      	cmp	r3, #192	@ 0xc0
 80031dc:	d013      	beq.n	8003206 <UART_SetConfig+0x1ba>
 80031de:	2bc0      	cmp	r3, #192	@ 0xc0
 80031e0:	d814      	bhi.n	800320c <UART_SetConfig+0x1c0>
 80031e2:	2b80      	cmp	r3, #128	@ 0x80
 80031e4:	d009      	beq.n	80031fa <UART_SetConfig+0x1ae>
 80031e6:	2b80      	cmp	r3, #128	@ 0x80
 80031e8:	d810      	bhi.n	800320c <UART_SetConfig+0x1c0>
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d002      	beq.n	80031f4 <UART_SetConfig+0x1a8>
 80031ee:	2b40      	cmp	r3, #64	@ 0x40
 80031f0:	d006      	beq.n	8003200 <UART_SetConfig+0x1b4>
 80031f2:	e00b      	b.n	800320c <UART_SetConfig+0x1c0>
 80031f4:	2300      	movs	r3, #0
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e0cc      	b.n	8003394 <UART_SetConfig+0x348>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e0c9      	b.n	8003394 <UART_SetConfig+0x348>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e0c6      	b.n	8003394 <UART_SetConfig+0x348>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e0c3      	b.n	8003394 <UART_SetConfig+0x348>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	e0c0      	b.n	8003394 <UART_SetConfig+0x348>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a44      	ldr	r2, [pc, #272]	@ (8003328 <UART_SetConfig+0x2dc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d125      	bne.n	8003268 <UART_SetConfig+0x21c>
 800321c:	4b3e      	ldr	r3, [pc, #248]	@ (8003318 <UART_SetConfig+0x2cc>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003222:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003226:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800322a:	d017      	beq.n	800325c <UART_SetConfig+0x210>
 800322c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003230:	d817      	bhi.n	8003262 <UART_SetConfig+0x216>
 8003232:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003236:	d00b      	beq.n	8003250 <UART_SetConfig+0x204>
 8003238:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800323c:	d811      	bhi.n	8003262 <UART_SetConfig+0x216>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <UART_SetConfig+0x1fe>
 8003242:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003246:	d006      	beq.n	8003256 <UART_SetConfig+0x20a>
 8003248:	e00b      	b.n	8003262 <UART_SetConfig+0x216>
 800324a:	2300      	movs	r3, #0
 800324c:	77fb      	strb	r3, [r7, #31]
 800324e:	e0a1      	b.n	8003394 <UART_SetConfig+0x348>
 8003250:	2302      	movs	r3, #2
 8003252:	77fb      	strb	r3, [r7, #31]
 8003254:	e09e      	b.n	8003394 <UART_SetConfig+0x348>
 8003256:	2304      	movs	r3, #4
 8003258:	77fb      	strb	r3, [r7, #31]
 800325a:	e09b      	b.n	8003394 <UART_SetConfig+0x348>
 800325c:	2308      	movs	r3, #8
 800325e:	77fb      	strb	r3, [r7, #31]
 8003260:	e098      	b.n	8003394 <UART_SetConfig+0x348>
 8003262:	2310      	movs	r3, #16
 8003264:	77fb      	strb	r3, [r7, #31]
 8003266:	e095      	b.n	8003394 <UART_SetConfig+0x348>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2f      	ldr	r2, [pc, #188]	@ (800332c <UART_SetConfig+0x2e0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d125      	bne.n	80032be <UART_SetConfig+0x272>
 8003272:	4b29      	ldr	r3, [pc, #164]	@ (8003318 <UART_SetConfig+0x2cc>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800327c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003280:	d017      	beq.n	80032b2 <UART_SetConfig+0x266>
 8003282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003286:	d817      	bhi.n	80032b8 <UART_SetConfig+0x26c>
 8003288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800328c:	d00b      	beq.n	80032a6 <UART_SetConfig+0x25a>
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003292:	d811      	bhi.n	80032b8 <UART_SetConfig+0x26c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <UART_SetConfig+0x254>
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800329c:	d006      	beq.n	80032ac <UART_SetConfig+0x260>
 800329e:	e00b      	b.n	80032b8 <UART_SetConfig+0x26c>
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e076      	b.n	8003394 <UART_SetConfig+0x348>
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e073      	b.n	8003394 <UART_SetConfig+0x348>
 80032ac:	2304      	movs	r3, #4
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e070      	b.n	8003394 <UART_SetConfig+0x348>
 80032b2:	2308      	movs	r3, #8
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e06d      	b.n	8003394 <UART_SetConfig+0x348>
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	e06a      	b.n	8003394 <UART_SetConfig+0x348>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003330 <UART_SetConfig+0x2e4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d138      	bne.n	800333a <UART_SetConfig+0x2ee>
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <UART_SetConfig+0x2cc>)
 80032ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ce:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032d6:	d017      	beq.n	8003308 <UART_SetConfig+0x2bc>
 80032d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032dc:	d82a      	bhi.n	8003334 <UART_SetConfig+0x2e8>
 80032de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e2:	d00b      	beq.n	80032fc <UART_SetConfig+0x2b0>
 80032e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032e8:	d824      	bhi.n	8003334 <UART_SetConfig+0x2e8>
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <UART_SetConfig+0x2aa>
 80032ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032f2:	d006      	beq.n	8003302 <UART_SetConfig+0x2b6>
 80032f4:	e01e      	b.n	8003334 <UART_SetConfig+0x2e8>
 80032f6:	2300      	movs	r3, #0
 80032f8:	77fb      	strb	r3, [r7, #31]
 80032fa:	e04b      	b.n	8003394 <UART_SetConfig+0x348>
 80032fc:	2302      	movs	r3, #2
 80032fe:	77fb      	strb	r3, [r7, #31]
 8003300:	e048      	b.n	8003394 <UART_SetConfig+0x348>
 8003302:	2304      	movs	r3, #4
 8003304:	77fb      	strb	r3, [r7, #31]
 8003306:	e045      	b.n	8003394 <UART_SetConfig+0x348>
 8003308:	2308      	movs	r3, #8
 800330a:	77fb      	strb	r3, [r7, #31]
 800330c:	e042      	b.n	8003394 <UART_SetConfig+0x348>
 800330e:	bf00      	nop
 8003310:	efff69f3 	.word	0xefff69f3
 8003314:	40011000 	.word	0x40011000
 8003318:	40023800 	.word	0x40023800
 800331c:	40004400 	.word	0x40004400
 8003320:	40004800 	.word	0x40004800
 8003324:	40004c00 	.word	0x40004c00
 8003328:	40005000 	.word	0x40005000
 800332c:	40011400 	.word	0x40011400
 8003330:	40007800 	.word	0x40007800
 8003334:	2310      	movs	r3, #16
 8003336:	77fb      	strb	r3, [r7, #31]
 8003338:	e02c      	b.n	8003394 <UART_SetConfig+0x348>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a72      	ldr	r2, [pc, #456]	@ (8003508 <UART_SetConfig+0x4bc>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d125      	bne.n	8003390 <UART_SetConfig+0x344>
 8003344:	4b71      	ldr	r3, [pc, #452]	@ (800350c <UART_SetConfig+0x4c0>)
 8003346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800334a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800334e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003352:	d017      	beq.n	8003384 <UART_SetConfig+0x338>
 8003354:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003358:	d817      	bhi.n	800338a <UART_SetConfig+0x33e>
 800335a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335e:	d00b      	beq.n	8003378 <UART_SetConfig+0x32c>
 8003360:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003364:	d811      	bhi.n	800338a <UART_SetConfig+0x33e>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <UART_SetConfig+0x326>
 800336a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800336e:	d006      	beq.n	800337e <UART_SetConfig+0x332>
 8003370:	e00b      	b.n	800338a <UART_SetConfig+0x33e>
 8003372:	2300      	movs	r3, #0
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e00d      	b.n	8003394 <UART_SetConfig+0x348>
 8003378:	2302      	movs	r3, #2
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e00a      	b.n	8003394 <UART_SetConfig+0x348>
 800337e:	2304      	movs	r3, #4
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e007      	b.n	8003394 <UART_SetConfig+0x348>
 8003384:	2308      	movs	r3, #8
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e004      	b.n	8003394 <UART_SetConfig+0x348>
 800338a:	2310      	movs	r3, #16
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	e001      	b.n	8003394 <UART_SetConfig+0x348>
 8003390:	2310      	movs	r3, #16
 8003392:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800339c:	d15b      	bne.n	8003456 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800339e:	7ffb      	ldrb	r3, [r7, #31]
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	d828      	bhi.n	80033f6 <UART_SetConfig+0x3aa>
 80033a4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <UART_SetConfig+0x360>)
 80033a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033aa:	bf00      	nop
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033d9 	.word	0x080033d9
 80033b4:	080033e1 	.word	0x080033e1
 80033b8:	080033f7 	.word	0x080033f7
 80033bc:	080033e7 	.word	0x080033e7
 80033c0:	080033f7 	.word	0x080033f7
 80033c4:	080033f7 	.word	0x080033f7
 80033c8:	080033f7 	.word	0x080033f7
 80033cc:	080033ef 	.word	0x080033ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7fe fc54 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 80033d4:	61b8      	str	r0, [r7, #24]
        break;
 80033d6:	e013      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d8:	f7fe fc64 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 80033dc:	61b8      	str	r0, [r7, #24]
        break;
 80033de:	e00f      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003510 <UART_SetConfig+0x4c4>)
 80033e2:	61bb      	str	r3, [r7, #24]
        break;
 80033e4:	e00c      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033e6:	f7fe fb77 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 80033ea:	61b8      	str	r0, [r7, #24]
        break;
 80033ec:	e008      	b.n	8003400 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033f2:	61bb      	str	r3, [r7, #24]
        break;
 80033f4:	e004      	b.n	8003400 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	77bb      	strb	r3, [r7, #30]
        break;
 80033fe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d074      	beq.n	80034f0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	005a      	lsls	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	441a      	add	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	fbb2 f3f3 	udiv	r3, r2, r3
 800341a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b0f      	cmp	r3, #15
 8003420:	d916      	bls.n	8003450 <UART_SetConfig+0x404>
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d212      	bcs.n	8003450 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	b29b      	uxth	r3, r3
 800342e:	f023 030f 	bic.w	r3, r3, #15
 8003432:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	b29b      	uxth	r3, r3
 800343a:	f003 0307 	and.w	r3, r3, #7
 800343e:	b29a      	uxth	r2, r3
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	4313      	orrs	r3, r2
 8003444:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	89fa      	ldrh	r2, [r7, #14]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	e04f      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	77bb      	strb	r3, [r7, #30]
 8003454:	e04c      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b08      	cmp	r3, #8
 800345a:	d828      	bhi.n	80034ae <UART_SetConfig+0x462>
 800345c:	a201      	add	r2, pc, #4	@ (adr r2, 8003464 <UART_SetConfig+0x418>)
 800345e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003462:	bf00      	nop
 8003464:	08003489 	.word	0x08003489
 8003468:	08003491 	.word	0x08003491
 800346c:	08003499 	.word	0x08003499
 8003470:	080034af 	.word	0x080034af
 8003474:	0800349f 	.word	0x0800349f
 8003478:	080034af 	.word	0x080034af
 800347c:	080034af 	.word	0x080034af
 8003480:	080034af 	.word	0x080034af
 8003484:	080034a7 	.word	0x080034a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003488:	f7fe fbf8 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
 800348c:	61b8      	str	r0, [r7, #24]
        break;
 800348e:	e013      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003490:	f7fe fc08 	bl	8001ca4 <HAL_RCC_GetPCLK2Freq>
 8003494:	61b8      	str	r0, [r7, #24]
        break;
 8003496:	e00f      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b1d      	ldr	r3, [pc, #116]	@ (8003510 <UART_SetConfig+0x4c4>)
 800349a:	61bb      	str	r3, [r7, #24]
        break;
 800349c:	e00c      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe fb1b 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 80034a2:	61b8      	str	r0, [r7, #24]
        break;
 80034a4:	e008      	b.n	80034b8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e004      	b.n	80034b8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80034ae:	2300      	movs	r3, #0
 80034b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	77bb      	strb	r3, [r7, #30]
        break;
 80034b6:	bf00      	nop
    }

    if (pclk != 0U)
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d018      	beq.n	80034f0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	085a      	lsrs	r2, r3, #1
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	441a      	add	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b0f      	cmp	r3, #15
 80034d6:	d909      	bls.n	80034ec <UART_SetConfig+0x4a0>
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034de:	d205      	bcs.n	80034ec <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	e001      	b.n	80034f0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3720      	adds	r7, #32
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	40007c00 	.word	0x40007c00
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400

08003514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01a      	beq.n	800362a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003612:	d10a      	bne.n	800362a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b098      	sub	sp, #96	@ 0x60
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003668:	f7fd fb82 	bl	8000d70 <HAL_GetTick>
 800366c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d12e      	bne.n	80036da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f88c 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d021      	beq.n	80036da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e6      	bne.n	8003696 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e062      	b.n	80037a0 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d149      	bne.n	800377c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f856 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03c      	beq.n	800377c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	623b      	str	r3, [r7, #32]
   return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
 8003722:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e6      	bne.n	8003702 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3308      	adds	r3, #8
 800373a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	60fb      	str	r3, [r7, #12]
   return(result);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	617b      	str	r3, [r7, #20]
   return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e011      	b.n	80037a0 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3758      	adds	r7, #88	@ 0x58
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e04f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d04b      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd fad5 	bl	8000d70 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e04e      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d037      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	d034      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d031      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d110      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2208      	movs	r2, #8
 800380a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f838 	bl	8003882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e029      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003834:	d111      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800383e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f81e 	bl	8003882 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	429a      	cmp	r2, r3
 8003876:	d0a0      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003882:	b480      	push	{r7}
 8003884:	b095      	sub	sp, #84	@ 0x54
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800389a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800389e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80038ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d118      	bne.n	800392a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	e853 3f00 	ldrex	r3, [r3]
 8003904:	60bb      	str	r3, [r7, #8]
   return(result);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0310 	bic.w	r3, r3, #16
 800390c:	647b      	str	r3, [r7, #68]	@ 0x44
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	461a      	mov	r2, r3
 8003914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	e841 2300 	strex	r3, r2, [r1]
 8003922:	613b      	str	r3, [r7, #16]
   return(result);
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e6      	bne.n	80038f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800393e:	bf00      	nop
 8003940:	3754      	adds	r7, #84	@ 0x54
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <siprintf>:
 800394c:	b40e      	push	{r1, r2, r3}
 800394e:	b510      	push	{r4, lr}
 8003950:	b09d      	sub	sp, #116	@ 0x74
 8003952:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003954:	9002      	str	r0, [sp, #8]
 8003956:	9006      	str	r0, [sp, #24]
 8003958:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800395c:	480a      	ldr	r0, [pc, #40]	@ (8003988 <siprintf+0x3c>)
 800395e:	9107      	str	r1, [sp, #28]
 8003960:	9104      	str	r1, [sp, #16]
 8003962:	490a      	ldr	r1, [pc, #40]	@ (800398c <siprintf+0x40>)
 8003964:	f853 2b04 	ldr.w	r2, [r3], #4
 8003968:	9105      	str	r1, [sp, #20]
 800396a:	2400      	movs	r4, #0
 800396c:	a902      	add	r1, sp, #8
 800396e:	6800      	ldr	r0, [r0, #0]
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003974:	f000 f994 	bl	8003ca0 <_svfiprintf_r>
 8003978:	9b02      	ldr	r3, [sp, #8]
 800397a:	701c      	strb	r4, [r3, #0]
 800397c:	b01d      	add	sp, #116	@ 0x74
 800397e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003982:	b003      	add	sp, #12
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	2000000c 	.word	0x2000000c
 800398c:	ffff0208 	.word	0xffff0208

08003990 <memset>:
 8003990:	4402      	add	r2, r0
 8003992:	4603      	mov	r3, r0
 8003994:	4293      	cmp	r3, r2
 8003996:	d100      	bne.n	800399a <memset+0xa>
 8003998:	4770      	bx	lr
 800399a:	f803 1b01 	strb.w	r1, [r3], #1
 800399e:	e7f9      	b.n	8003994 <memset+0x4>

080039a0 <__errno>:
 80039a0:	4b01      	ldr	r3, [pc, #4]	@ (80039a8 <__errno+0x8>)
 80039a2:	6818      	ldr	r0, [r3, #0]
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	2000000c 	.word	0x2000000c

080039ac <__libc_init_array>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4d0d      	ldr	r5, [pc, #52]	@ (80039e4 <__libc_init_array+0x38>)
 80039b0:	4c0d      	ldr	r4, [pc, #52]	@ (80039e8 <__libc_init_array+0x3c>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	2600      	movs	r6, #0
 80039b8:	42a6      	cmp	r6, r4
 80039ba:	d109      	bne.n	80039d0 <__libc_init_array+0x24>
 80039bc:	4d0b      	ldr	r5, [pc, #44]	@ (80039ec <__libc_init_array+0x40>)
 80039be:	4c0c      	ldr	r4, [pc, #48]	@ (80039f0 <__libc_init_array+0x44>)
 80039c0:	f000 fc64 	bl	800428c <_init>
 80039c4:	1b64      	subs	r4, r4, r5
 80039c6:	10a4      	asrs	r4, r4, #2
 80039c8:	2600      	movs	r6, #0
 80039ca:	42a6      	cmp	r6, r4
 80039cc:	d105      	bne.n	80039da <__libc_init_array+0x2e>
 80039ce:	bd70      	pop	{r4, r5, r6, pc}
 80039d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d4:	4798      	blx	r3
 80039d6:	3601      	adds	r6, #1
 80039d8:	e7ee      	b.n	80039b8 <__libc_init_array+0xc>
 80039da:	f855 3b04 	ldr.w	r3, [r5], #4
 80039de:	4798      	blx	r3
 80039e0:	3601      	adds	r6, #1
 80039e2:	e7f2      	b.n	80039ca <__libc_init_array+0x1e>
 80039e4:	08004310 	.word	0x08004310
 80039e8:	08004310 	.word	0x08004310
 80039ec:	08004310 	.word	0x08004310
 80039f0:	08004314 	.word	0x08004314

080039f4 <__retarget_lock_acquire_recursive>:
 80039f4:	4770      	bx	lr

080039f6 <__retarget_lock_release_recursive>:
 80039f6:	4770      	bx	lr

080039f8 <_free_r>:
 80039f8:	b538      	push	{r3, r4, r5, lr}
 80039fa:	4605      	mov	r5, r0
 80039fc:	2900      	cmp	r1, #0
 80039fe:	d041      	beq.n	8003a84 <_free_r+0x8c>
 8003a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a04:	1f0c      	subs	r4, r1, #4
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	bfb8      	it	lt
 8003a0a:	18e4      	addlt	r4, r4, r3
 8003a0c:	f000 f8e0 	bl	8003bd0 <__malloc_lock>
 8003a10:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <_free_r+0x90>)
 8003a12:	6813      	ldr	r3, [r2, #0]
 8003a14:	b933      	cbnz	r3, 8003a24 <_free_r+0x2c>
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	6014      	str	r4, [r2, #0]
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a20:	f000 b8dc 	b.w	8003bdc <__malloc_unlock>
 8003a24:	42a3      	cmp	r3, r4
 8003a26:	d908      	bls.n	8003a3a <_free_r+0x42>
 8003a28:	6820      	ldr	r0, [r4, #0]
 8003a2a:	1821      	adds	r1, r4, r0
 8003a2c:	428b      	cmp	r3, r1
 8003a2e:	bf01      	itttt	eq
 8003a30:	6819      	ldreq	r1, [r3, #0]
 8003a32:	685b      	ldreq	r3, [r3, #4]
 8003a34:	1809      	addeq	r1, r1, r0
 8003a36:	6021      	streq	r1, [r4, #0]
 8003a38:	e7ed      	b.n	8003a16 <_free_r+0x1e>
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	b10b      	cbz	r3, 8003a44 <_free_r+0x4c>
 8003a40:	42a3      	cmp	r3, r4
 8003a42:	d9fa      	bls.n	8003a3a <_free_r+0x42>
 8003a44:	6811      	ldr	r1, [r2, #0]
 8003a46:	1850      	adds	r0, r2, r1
 8003a48:	42a0      	cmp	r0, r4
 8003a4a:	d10b      	bne.n	8003a64 <_free_r+0x6c>
 8003a4c:	6820      	ldr	r0, [r4, #0]
 8003a4e:	4401      	add	r1, r0
 8003a50:	1850      	adds	r0, r2, r1
 8003a52:	4283      	cmp	r3, r0
 8003a54:	6011      	str	r1, [r2, #0]
 8003a56:	d1e0      	bne.n	8003a1a <_free_r+0x22>
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	6053      	str	r3, [r2, #4]
 8003a5e:	4408      	add	r0, r1
 8003a60:	6010      	str	r0, [r2, #0]
 8003a62:	e7da      	b.n	8003a1a <_free_r+0x22>
 8003a64:	d902      	bls.n	8003a6c <_free_r+0x74>
 8003a66:	230c      	movs	r3, #12
 8003a68:	602b      	str	r3, [r5, #0]
 8003a6a:	e7d6      	b.n	8003a1a <_free_r+0x22>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	1821      	adds	r1, r4, r0
 8003a70:	428b      	cmp	r3, r1
 8003a72:	bf04      	itt	eq
 8003a74:	6819      	ldreq	r1, [r3, #0]
 8003a76:	685b      	ldreq	r3, [r3, #4]
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	bf04      	itt	eq
 8003a7c:	1809      	addeq	r1, r1, r0
 8003a7e:	6021      	streq	r1, [r4, #0]
 8003a80:	6054      	str	r4, [r2, #4]
 8003a82:	e7ca      	b.n	8003a1a <_free_r+0x22>
 8003a84:	bd38      	pop	{r3, r4, r5, pc}
 8003a86:	bf00      	nop
 8003a88:	200002ec 	.word	0x200002ec

08003a8c <sbrk_aligned>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8003acc <sbrk_aligned+0x40>)
 8003a90:	460c      	mov	r4, r1
 8003a92:	6831      	ldr	r1, [r6, #0]
 8003a94:	4605      	mov	r5, r0
 8003a96:	b911      	cbnz	r1, 8003a9e <sbrk_aligned+0x12>
 8003a98:	f000 fba4 	bl	80041e4 <_sbrk_r>
 8003a9c:	6030      	str	r0, [r6, #0]
 8003a9e:	4621      	mov	r1, r4
 8003aa0:	4628      	mov	r0, r5
 8003aa2:	f000 fb9f 	bl	80041e4 <_sbrk_r>
 8003aa6:	1c43      	adds	r3, r0, #1
 8003aa8:	d103      	bne.n	8003ab2 <sbrk_aligned+0x26>
 8003aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8003aae:	4620      	mov	r0, r4
 8003ab0:	bd70      	pop	{r4, r5, r6, pc}
 8003ab2:	1cc4      	adds	r4, r0, #3
 8003ab4:	f024 0403 	bic.w	r4, r4, #3
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d0f8      	beq.n	8003aae <sbrk_aligned+0x22>
 8003abc:	1a21      	subs	r1, r4, r0
 8003abe:	4628      	mov	r0, r5
 8003ac0:	f000 fb90 	bl	80041e4 <_sbrk_r>
 8003ac4:	3001      	adds	r0, #1
 8003ac6:	d1f2      	bne.n	8003aae <sbrk_aligned+0x22>
 8003ac8:	e7ef      	b.n	8003aaa <sbrk_aligned+0x1e>
 8003aca:	bf00      	nop
 8003acc:	200002e8 	.word	0x200002e8

08003ad0 <_malloc_r>:
 8003ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad4:	1ccd      	adds	r5, r1, #3
 8003ad6:	f025 0503 	bic.w	r5, r5, #3
 8003ada:	3508      	adds	r5, #8
 8003adc:	2d0c      	cmp	r5, #12
 8003ade:	bf38      	it	cc
 8003ae0:	250c      	movcc	r5, #12
 8003ae2:	2d00      	cmp	r5, #0
 8003ae4:	4606      	mov	r6, r0
 8003ae6:	db01      	blt.n	8003aec <_malloc_r+0x1c>
 8003ae8:	42a9      	cmp	r1, r5
 8003aea:	d904      	bls.n	8003af6 <_malloc_r+0x26>
 8003aec:	230c      	movs	r3, #12
 8003aee:	6033      	str	r3, [r6, #0]
 8003af0:	2000      	movs	r0, #0
 8003af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bcc <_malloc_r+0xfc>
 8003afa:	f000 f869 	bl	8003bd0 <__malloc_lock>
 8003afe:	f8d8 3000 	ldr.w	r3, [r8]
 8003b02:	461c      	mov	r4, r3
 8003b04:	bb44      	cbnz	r4, 8003b58 <_malloc_r+0x88>
 8003b06:	4629      	mov	r1, r5
 8003b08:	4630      	mov	r0, r6
 8003b0a:	f7ff ffbf 	bl	8003a8c <sbrk_aligned>
 8003b0e:	1c43      	adds	r3, r0, #1
 8003b10:	4604      	mov	r4, r0
 8003b12:	d158      	bne.n	8003bc6 <_malloc_r+0xf6>
 8003b14:	f8d8 4000 	ldr.w	r4, [r8]
 8003b18:	4627      	mov	r7, r4
 8003b1a:	2f00      	cmp	r7, #0
 8003b1c:	d143      	bne.n	8003ba6 <_malloc_r+0xd6>
 8003b1e:	2c00      	cmp	r4, #0
 8003b20:	d04b      	beq.n	8003bba <_malloc_r+0xea>
 8003b22:	6823      	ldr	r3, [r4, #0]
 8003b24:	4639      	mov	r1, r7
 8003b26:	4630      	mov	r0, r6
 8003b28:	eb04 0903 	add.w	r9, r4, r3
 8003b2c:	f000 fb5a 	bl	80041e4 <_sbrk_r>
 8003b30:	4581      	cmp	r9, r0
 8003b32:	d142      	bne.n	8003bba <_malloc_r+0xea>
 8003b34:	6821      	ldr	r1, [r4, #0]
 8003b36:	1a6d      	subs	r5, r5, r1
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f7ff ffa6 	bl	8003a8c <sbrk_aligned>
 8003b40:	3001      	adds	r0, #1
 8003b42:	d03a      	beq.n	8003bba <_malloc_r+0xea>
 8003b44:	6823      	ldr	r3, [r4, #0]
 8003b46:	442b      	add	r3, r5
 8003b48:	6023      	str	r3, [r4, #0]
 8003b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	bb62      	cbnz	r2, 8003bac <_malloc_r+0xdc>
 8003b52:	f8c8 7000 	str.w	r7, [r8]
 8003b56:	e00f      	b.n	8003b78 <_malloc_r+0xa8>
 8003b58:	6822      	ldr	r2, [r4, #0]
 8003b5a:	1b52      	subs	r2, r2, r5
 8003b5c:	d420      	bmi.n	8003ba0 <_malloc_r+0xd0>
 8003b5e:	2a0b      	cmp	r2, #11
 8003b60:	d917      	bls.n	8003b92 <_malloc_r+0xc2>
 8003b62:	1961      	adds	r1, r4, r5
 8003b64:	42a3      	cmp	r3, r4
 8003b66:	6025      	str	r5, [r4, #0]
 8003b68:	bf18      	it	ne
 8003b6a:	6059      	strne	r1, [r3, #4]
 8003b6c:	6863      	ldr	r3, [r4, #4]
 8003b6e:	bf08      	it	eq
 8003b70:	f8c8 1000 	streq.w	r1, [r8]
 8003b74:	5162      	str	r2, [r4, r5]
 8003b76:	604b      	str	r3, [r1, #4]
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f000 f82f 	bl	8003bdc <__malloc_unlock>
 8003b7e:	f104 000b 	add.w	r0, r4, #11
 8003b82:	1d23      	adds	r3, r4, #4
 8003b84:	f020 0007 	bic.w	r0, r0, #7
 8003b88:	1ac2      	subs	r2, r0, r3
 8003b8a:	bf1c      	itt	ne
 8003b8c:	1a1b      	subne	r3, r3, r0
 8003b8e:	50a3      	strne	r3, [r4, r2]
 8003b90:	e7af      	b.n	8003af2 <_malloc_r+0x22>
 8003b92:	6862      	ldr	r2, [r4, #4]
 8003b94:	42a3      	cmp	r3, r4
 8003b96:	bf0c      	ite	eq
 8003b98:	f8c8 2000 	streq.w	r2, [r8]
 8003b9c:	605a      	strne	r2, [r3, #4]
 8003b9e:	e7eb      	b.n	8003b78 <_malloc_r+0xa8>
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	6864      	ldr	r4, [r4, #4]
 8003ba4:	e7ae      	b.n	8003b04 <_malloc_r+0x34>
 8003ba6:	463c      	mov	r4, r7
 8003ba8:	687f      	ldr	r7, [r7, #4]
 8003baa:	e7b6      	b.n	8003b1a <_malloc_r+0x4a>
 8003bac:	461a      	mov	r2, r3
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	d1fb      	bne.n	8003bac <_malloc_r+0xdc>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	6053      	str	r3, [r2, #4]
 8003bb8:	e7de      	b.n	8003b78 <_malloc_r+0xa8>
 8003bba:	230c      	movs	r3, #12
 8003bbc:	6033      	str	r3, [r6, #0]
 8003bbe:	4630      	mov	r0, r6
 8003bc0:	f000 f80c 	bl	8003bdc <__malloc_unlock>
 8003bc4:	e794      	b.n	8003af0 <_malloc_r+0x20>
 8003bc6:	6005      	str	r5, [r0, #0]
 8003bc8:	e7d6      	b.n	8003b78 <_malloc_r+0xa8>
 8003bca:	bf00      	nop
 8003bcc:	200002ec 	.word	0x200002ec

08003bd0 <__malloc_lock>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	@ (8003bd8 <__malloc_lock+0x8>)
 8003bd2:	f7ff bf0f 	b.w	80039f4 <__retarget_lock_acquire_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	200002e4 	.word	0x200002e4

08003bdc <__malloc_unlock>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	@ (8003be4 <__malloc_unlock+0x8>)
 8003bde:	f7ff bf0a 	b.w	80039f6 <__retarget_lock_release_recursive>
 8003be2:	bf00      	nop
 8003be4:	200002e4 	.word	0x200002e4

08003be8 <__ssputs_r>:
 8003be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bec:	688e      	ldr	r6, [r1, #8]
 8003bee:	461f      	mov	r7, r3
 8003bf0:	42be      	cmp	r6, r7
 8003bf2:	680b      	ldr	r3, [r1, #0]
 8003bf4:	4682      	mov	sl, r0
 8003bf6:	460c      	mov	r4, r1
 8003bf8:	4690      	mov	r8, r2
 8003bfa:	d82d      	bhi.n	8003c58 <__ssputs_r+0x70>
 8003bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c04:	d026      	beq.n	8003c54 <__ssputs_r+0x6c>
 8003c06:	6965      	ldr	r5, [r4, #20]
 8003c08:	6909      	ldr	r1, [r1, #16]
 8003c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c0e:	eba3 0901 	sub.w	r9, r3, r1
 8003c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c16:	1c7b      	adds	r3, r7, #1
 8003c18:	444b      	add	r3, r9
 8003c1a:	106d      	asrs	r5, r5, #1
 8003c1c:	429d      	cmp	r5, r3
 8003c1e:	bf38      	it	cc
 8003c20:	461d      	movcc	r5, r3
 8003c22:	0553      	lsls	r3, r2, #21
 8003c24:	d527      	bpl.n	8003c76 <__ssputs_r+0x8e>
 8003c26:	4629      	mov	r1, r5
 8003c28:	f7ff ff52 	bl	8003ad0 <_malloc_r>
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	b360      	cbz	r0, 8003c8a <__ssputs_r+0xa2>
 8003c30:	6921      	ldr	r1, [r4, #16]
 8003c32:	464a      	mov	r2, r9
 8003c34:	f000 fae6 	bl	8004204 <memcpy>
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c42:	81a3      	strh	r3, [r4, #12]
 8003c44:	6126      	str	r6, [r4, #16]
 8003c46:	6165      	str	r5, [r4, #20]
 8003c48:	444e      	add	r6, r9
 8003c4a:	eba5 0509 	sub.w	r5, r5, r9
 8003c4e:	6026      	str	r6, [r4, #0]
 8003c50:	60a5      	str	r5, [r4, #8]
 8003c52:	463e      	mov	r6, r7
 8003c54:	42be      	cmp	r6, r7
 8003c56:	d900      	bls.n	8003c5a <__ssputs_r+0x72>
 8003c58:	463e      	mov	r6, r7
 8003c5a:	6820      	ldr	r0, [r4, #0]
 8003c5c:	4632      	mov	r2, r6
 8003c5e:	4641      	mov	r1, r8
 8003c60:	f000 faa6 	bl	80041b0 <memmove>
 8003c64:	68a3      	ldr	r3, [r4, #8]
 8003c66:	1b9b      	subs	r3, r3, r6
 8003c68:	60a3      	str	r3, [r4, #8]
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	4433      	add	r3, r6
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	2000      	movs	r0, #0
 8003c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c76:	462a      	mov	r2, r5
 8003c78:	f000 fad2 	bl	8004220 <_realloc_r>
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	2800      	cmp	r0, #0
 8003c80:	d1e0      	bne.n	8003c44 <__ssputs_r+0x5c>
 8003c82:	6921      	ldr	r1, [r4, #16]
 8003c84:	4650      	mov	r0, sl
 8003c86:	f7ff feb7 	bl	80039f8 <_free_r>
 8003c8a:	230c      	movs	r3, #12
 8003c8c:	f8ca 3000 	str.w	r3, [sl]
 8003c90:	89a3      	ldrh	r3, [r4, #12]
 8003c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c96:	81a3      	strh	r3, [r4, #12]
 8003c98:	f04f 30ff 	mov.w	r0, #4294967295
 8003c9c:	e7e9      	b.n	8003c72 <__ssputs_r+0x8a>
	...

08003ca0 <_svfiprintf_r>:
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca4:	4698      	mov	r8, r3
 8003ca6:	898b      	ldrh	r3, [r1, #12]
 8003ca8:	061b      	lsls	r3, r3, #24
 8003caa:	b09d      	sub	sp, #116	@ 0x74
 8003cac:	4607      	mov	r7, r0
 8003cae:	460d      	mov	r5, r1
 8003cb0:	4614      	mov	r4, r2
 8003cb2:	d510      	bpl.n	8003cd6 <_svfiprintf_r+0x36>
 8003cb4:	690b      	ldr	r3, [r1, #16]
 8003cb6:	b973      	cbnz	r3, 8003cd6 <_svfiprintf_r+0x36>
 8003cb8:	2140      	movs	r1, #64	@ 0x40
 8003cba:	f7ff ff09 	bl	8003ad0 <_malloc_r>
 8003cbe:	6028      	str	r0, [r5, #0]
 8003cc0:	6128      	str	r0, [r5, #16]
 8003cc2:	b930      	cbnz	r0, 8003cd2 <_svfiprintf_r+0x32>
 8003cc4:	230c      	movs	r3, #12
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ccc:	b01d      	add	sp, #116	@ 0x74
 8003cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd2:	2340      	movs	r3, #64	@ 0x40
 8003cd4:	616b      	str	r3, [r5, #20]
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cda:	2320      	movs	r3, #32
 8003cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ce0:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ce4:	2330      	movs	r3, #48	@ 0x30
 8003ce6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e84 <_svfiprintf_r+0x1e4>
 8003cea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003cee:	f04f 0901 	mov.w	r9, #1
 8003cf2:	4623      	mov	r3, r4
 8003cf4:	469a      	mov	sl, r3
 8003cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cfa:	b10a      	cbz	r2, 8003d00 <_svfiprintf_r+0x60>
 8003cfc:	2a25      	cmp	r2, #37	@ 0x25
 8003cfe:	d1f9      	bne.n	8003cf4 <_svfiprintf_r+0x54>
 8003d00:	ebba 0b04 	subs.w	fp, sl, r4
 8003d04:	d00b      	beq.n	8003d1e <_svfiprintf_r+0x7e>
 8003d06:	465b      	mov	r3, fp
 8003d08:	4622      	mov	r2, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f7ff ff6b 	bl	8003be8 <__ssputs_r>
 8003d12:	3001      	adds	r0, #1
 8003d14:	f000 80a7 	beq.w	8003e66 <_svfiprintf_r+0x1c6>
 8003d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d1a:	445a      	add	r2, fp
 8003d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f000 809f 	beq.w	8003e66 <_svfiprintf_r+0x1c6>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d32:	f10a 0a01 	add.w	sl, sl, #1
 8003d36:	9304      	str	r3, [sp, #16]
 8003d38:	9307      	str	r3, [sp, #28]
 8003d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d40:	4654      	mov	r4, sl
 8003d42:	2205      	movs	r2, #5
 8003d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d48:	484e      	ldr	r0, [pc, #312]	@ (8003e84 <_svfiprintf_r+0x1e4>)
 8003d4a:	f7fc fa81 	bl	8000250 <memchr>
 8003d4e:	9a04      	ldr	r2, [sp, #16]
 8003d50:	b9d8      	cbnz	r0, 8003d8a <_svfiprintf_r+0xea>
 8003d52:	06d0      	lsls	r0, r2, #27
 8003d54:	bf44      	itt	mi
 8003d56:	2320      	movmi	r3, #32
 8003d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d5c:	0711      	lsls	r1, r2, #28
 8003d5e:	bf44      	itt	mi
 8003d60:	232b      	movmi	r3, #43	@ 0x2b
 8003d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d66:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d6c:	d015      	beq.n	8003d9a <_svfiprintf_r+0xfa>
 8003d6e:	9a07      	ldr	r2, [sp, #28]
 8003d70:	4654      	mov	r4, sl
 8003d72:	2000      	movs	r0, #0
 8003d74:	f04f 0c0a 	mov.w	ip, #10
 8003d78:	4621      	mov	r1, r4
 8003d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d7e:	3b30      	subs	r3, #48	@ 0x30
 8003d80:	2b09      	cmp	r3, #9
 8003d82:	d94b      	bls.n	8003e1c <_svfiprintf_r+0x17c>
 8003d84:	b1b0      	cbz	r0, 8003db4 <_svfiprintf_r+0x114>
 8003d86:	9207      	str	r2, [sp, #28]
 8003d88:	e014      	b.n	8003db4 <_svfiprintf_r+0x114>
 8003d8a:	eba0 0308 	sub.w	r3, r0, r8
 8003d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8003d92:	4313      	orrs	r3, r2
 8003d94:	9304      	str	r3, [sp, #16]
 8003d96:	46a2      	mov	sl, r4
 8003d98:	e7d2      	b.n	8003d40 <_svfiprintf_r+0xa0>
 8003d9a:	9b03      	ldr	r3, [sp, #12]
 8003d9c:	1d19      	adds	r1, r3, #4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	9103      	str	r1, [sp, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bfbb      	ittet	lt
 8003da6:	425b      	neglt	r3, r3
 8003da8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dac:	9307      	strge	r3, [sp, #28]
 8003dae:	9307      	strlt	r3, [sp, #28]
 8003db0:	bfb8      	it	lt
 8003db2:	9204      	strlt	r2, [sp, #16]
 8003db4:	7823      	ldrb	r3, [r4, #0]
 8003db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db8:	d10a      	bne.n	8003dd0 <_svfiprintf_r+0x130>
 8003dba:	7863      	ldrb	r3, [r4, #1]
 8003dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003dbe:	d132      	bne.n	8003e26 <_svfiprintf_r+0x186>
 8003dc0:	9b03      	ldr	r3, [sp, #12]
 8003dc2:	1d1a      	adds	r2, r3, #4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	9203      	str	r2, [sp, #12]
 8003dc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dcc:	3402      	adds	r4, #2
 8003dce:	9305      	str	r3, [sp, #20]
 8003dd0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e94 <_svfiprintf_r+0x1f4>
 8003dd4:	7821      	ldrb	r1, [r4, #0]
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	4650      	mov	r0, sl
 8003dda:	f7fc fa39 	bl	8000250 <memchr>
 8003dde:	b138      	cbz	r0, 8003df0 <_svfiprintf_r+0x150>
 8003de0:	9b04      	ldr	r3, [sp, #16]
 8003de2:	eba0 000a 	sub.w	r0, r0, sl
 8003de6:	2240      	movs	r2, #64	@ 0x40
 8003de8:	4082      	lsls	r2, r0
 8003dea:	4313      	orrs	r3, r2
 8003dec:	3401      	adds	r4, #1
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003df4:	4824      	ldr	r0, [pc, #144]	@ (8003e88 <_svfiprintf_r+0x1e8>)
 8003df6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003dfa:	2206      	movs	r2, #6
 8003dfc:	f7fc fa28 	bl	8000250 <memchr>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d036      	beq.n	8003e72 <_svfiprintf_r+0x1d2>
 8003e04:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <_svfiprintf_r+0x1ec>)
 8003e06:	bb1b      	cbnz	r3, 8003e50 <_svfiprintf_r+0x1b0>
 8003e08:	9b03      	ldr	r3, [sp, #12]
 8003e0a:	3307      	adds	r3, #7
 8003e0c:	f023 0307 	bic.w	r3, r3, #7
 8003e10:	3308      	adds	r3, #8
 8003e12:	9303      	str	r3, [sp, #12]
 8003e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e16:	4433      	add	r3, r6
 8003e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e1a:	e76a      	b.n	8003cf2 <_svfiprintf_r+0x52>
 8003e1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e20:	460c      	mov	r4, r1
 8003e22:	2001      	movs	r0, #1
 8003e24:	e7a8      	b.n	8003d78 <_svfiprintf_r+0xd8>
 8003e26:	2300      	movs	r3, #0
 8003e28:	3401      	adds	r4, #1
 8003e2a:	9305      	str	r3, [sp, #20]
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	f04f 0c0a 	mov.w	ip, #10
 8003e32:	4620      	mov	r0, r4
 8003e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e38:	3a30      	subs	r2, #48	@ 0x30
 8003e3a:	2a09      	cmp	r2, #9
 8003e3c:	d903      	bls.n	8003e46 <_svfiprintf_r+0x1a6>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0c6      	beq.n	8003dd0 <_svfiprintf_r+0x130>
 8003e42:	9105      	str	r1, [sp, #20]
 8003e44:	e7c4      	b.n	8003dd0 <_svfiprintf_r+0x130>
 8003e46:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e4a:	4604      	mov	r4, r0
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e7f0      	b.n	8003e32 <_svfiprintf_r+0x192>
 8003e50:	ab03      	add	r3, sp, #12
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	462a      	mov	r2, r5
 8003e56:	4b0e      	ldr	r3, [pc, #56]	@ (8003e90 <_svfiprintf_r+0x1f0>)
 8003e58:	a904      	add	r1, sp, #16
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f3af 8000 	nop.w
 8003e60:	1c42      	adds	r2, r0, #1
 8003e62:	4606      	mov	r6, r0
 8003e64:	d1d6      	bne.n	8003e14 <_svfiprintf_r+0x174>
 8003e66:	89ab      	ldrh	r3, [r5, #12]
 8003e68:	065b      	lsls	r3, r3, #25
 8003e6a:	f53f af2d 	bmi.w	8003cc8 <_svfiprintf_r+0x28>
 8003e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e70:	e72c      	b.n	8003ccc <_svfiprintf_r+0x2c>
 8003e72:	ab03      	add	r3, sp, #12
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	462a      	mov	r2, r5
 8003e78:	4b05      	ldr	r3, [pc, #20]	@ (8003e90 <_svfiprintf_r+0x1f0>)
 8003e7a:	a904      	add	r1, sp, #16
 8003e7c:	4638      	mov	r0, r7
 8003e7e:	f000 f879 	bl	8003f74 <_printf_i>
 8003e82:	e7ed      	b.n	8003e60 <_svfiprintf_r+0x1c0>
 8003e84:	080042d4 	.word	0x080042d4
 8003e88:	080042de 	.word	0x080042de
 8003e8c:	00000000 	.word	0x00000000
 8003e90:	08003be9 	.word	0x08003be9
 8003e94:	080042da 	.word	0x080042da

08003e98 <_printf_common>:
 8003e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e9c:	4616      	mov	r6, r2
 8003e9e:	4698      	mov	r8, r3
 8003ea0:	688a      	ldr	r2, [r1, #8]
 8003ea2:	690b      	ldr	r3, [r1, #16]
 8003ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bfb8      	it	lt
 8003eac:	4613      	movlt	r3, r2
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eb4:	4607      	mov	r7, r0
 8003eb6:	460c      	mov	r4, r1
 8003eb8:	b10a      	cbz	r2, 8003ebe <_printf_common+0x26>
 8003eba:	3301      	adds	r3, #1
 8003ebc:	6033      	str	r3, [r6, #0]
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	0699      	lsls	r1, r3, #26
 8003ec2:	bf42      	ittt	mi
 8003ec4:	6833      	ldrmi	r3, [r6, #0]
 8003ec6:	3302      	addmi	r3, #2
 8003ec8:	6033      	strmi	r3, [r6, #0]
 8003eca:	6825      	ldr	r5, [r4, #0]
 8003ecc:	f015 0506 	ands.w	r5, r5, #6
 8003ed0:	d106      	bne.n	8003ee0 <_printf_common+0x48>
 8003ed2:	f104 0a19 	add.w	sl, r4, #25
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	6832      	ldr	r2, [r6, #0]
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dc26      	bgt.n	8003f2e <_printf_common+0x96>
 8003ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	3b00      	subs	r3, #0
 8003ee8:	bf18      	it	ne
 8003eea:	2301      	movne	r3, #1
 8003eec:	0692      	lsls	r2, r2, #26
 8003eee:	d42b      	bmi.n	8003f48 <_printf_common+0xb0>
 8003ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	4638      	mov	r0, r7
 8003ef8:	47c8      	blx	r9
 8003efa:	3001      	adds	r0, #1
 8003efc:	d01e      	beq.n	8003f3c <_printf_common+0xa4>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	6922      	ldr	r2, [r4, #16]
 8003f02:	f003 0306 	and.w	r3, r3, #6
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	bf02      	ittt	eq
 8003f0a:	68e5      	ldreq	r5, [r4, #12]
 8003f0c:	6833      	ldreq	r3, [r6, #0]
 8003f0e:	1aed      	subeq	r5, r5, r3
 8003f10:	68a3      	ldr	r3, [r4, #8]
 8003f12:	bf0c      	ite	eq
 8003f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f18:	2500      	movne	r5, #0
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	bfc4      	itt	gt
 8003f1e:	1a9b      	subgt	r3, r3, r2
 8003f20:	18ed      	addgt	r5, r5, r3
 8003f22:	2600      	movs	r6, #0
 8003f24:	341a      	adds	r4, #26
 8003f26:	42b5      	cmp	r5, r6
 8003f28:	d11a      	bne.n	8003f60 <_printf_common+0xc8>
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	e008      	b.n	8003f40 <_printf_common+0xa8>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4652      	mov	r2, sl
 8003f32:	4641      	mov	r1, r8
 8003f34:	4638      	mov	r0, r7
 8003f36:	47c8      	blx	r9
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d103      	bne.n	8003f44 <_printf_common+0xac>
 8003f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8003f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f44:	3501      	adds	r5, #1
 8003f46:	e7c6      	b.n	8003ed6 <_printf_common+0x3e>
 8003f48:	18e1      	adds	r1, r4, r3
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	2030      	movs	r0, #48	@ 0x30
 8003f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f52:	4422      	add	r2, r4
 8003f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f5c:	3302      	adds	r3, #2
 8003f5e:	e7c7      	b.n	8003ef0 <_printf_common+0x58>
 8003f60:	2301      	movs	r3, #1
 8003f62:	4622      	mov	r2, r4
 8003f64:	4641      	mov	r1, r8
 8003f66:	4638      	mov	r0, r7
 8003f68:	47c8      	blx	r9
 8003f6a:	3001      	adds	r0, #1
 8003f6c:	d0e6      	beq.n	8003f3c <_printf_common+0xa4>
 8003f6e:	3601      	adds	r6, #1
 8003f70:	e7d9      	b.n	8003f26 <_printf_common+0x8e>
	...

08003f74 <_printf_i>:
 8003f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f78:	7e0f      	ldrb	r7, [r1, #24]
 8003f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f7c:	2f78      	cmp	r7, #120	@ 0x78
 8003f7e:	4691      	mov	r9, r2
 8003f80:	4680      	mov	r8, r0
 8003f82:	460c      	mov	r4, r1
 8003f84:	469a      	mov	sl, r3
 8003f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f8a:	d807      	bhi.n	8003f9c <_printf_i+0x28>
 8003f8c:	2f62      	cmp	r7, #98	@ 0x62
 8003f8e:	d80a      	bhi.n	8003fa6 <_printf_i+0x32>
 8003f90:	2f00      	cmp	r7, #0
 8003f92:	f000 80d1 	beq.w	8004138 <_printf_i+0x1c4>
 8003f96:	2f58      	cmp	r7, #88	@ 0x58
 8003f98:	f000 80b8 	beq.w	800410c <_printf_i+0x198>
 8003f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003fa4:	e03a      	b.n	800401c <_printf_i+0xa8>
 8003fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003faa:	2b15      	cmp	r3, #21
 8003fac:	d8f6      	bhi.n	8003f9c <_printf_i+0x28>
 8003fae:	a101      	add	r1, pc, #4	@ (adr r1, 8003fb4 <_printf_i+0x40>)
 8003fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fb4:	0800400d 	.word	0x0800400d
 8003fb8:	08004021 	.word	0x08004021
 8003fbc:	08003f9d 	.word	0x08003f9d
 8003fc0:	08003f9d 	.word	0x08003f9d
 8003fc4:	08003f9d 	.word	0x08003f9d
 8003fc8:	08003f9d 	.word	0x08003f9d
 8003fcc:	08004021 	.word	0x08004021
 8003fd0:	08003f9d 	.word	0x08003f9d
 8003fd4:	08003f9d 	.word	0x08003f9d
 8003fd8:	08003f9d 	.word	0x08003f9d
 8003fdc:	08003f9d 	.word	0x08003f9d
 8003fe0:	0800411f 	.word	0x0800411f
 8003fe4:	0800404b 	.word	0x0800404b
 8003fe8:	080040d9 	.word	0x080040d9
 8003fec:	08003f9d 	.word	0x08003f9d
 8003ff0:	08003f9d 	.word	0x08003f9d
 8003ff4:	08004141 	.word	0x08004141
 8003ff8:	08003f9d 	.word	0x08003f9d
 8003ffc:	0800404b 	.word	0x0800404b
 8004000:	08003f9d 	.word	0x08003f9d
 8004004:	08003f9d 	.word	0x08003f9d
 8004008:	080040e1 	.word	0x080040e1
 800400c:	6833      	ldr	r3, [r6, #0]
 800400e:	1d1a      	adds	r2, r3, #4
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6032      	str	r2, [r6, #0]
 8004014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800401c:	2301      	movs	r3, #1
 800401e:	e09c      	b.n	800415a <_printf_i+0x1e6>
 8004020:	6833      	ldr	r3, [r6, #0]
 8004022:	6820      	ldr	r0, [r4, #0]
 8004024:	1d19      	adds	r1, r3, #4
 8004026:	6031      	str	r1, [r6, #0]
 8004028:	0606      	lsls	r6, r0, #24
 800402a:	d501      	bpl.n	8004030 <_printf_i+0xbc>
 800402c:	681d      	ldr	r5, [r3, #0]
 800402e:	e003      	b.n	8004038 <_printf_i+0xc4>
 8004030:	0645      	lsls	r5, r0, #25
 8004032:	d5fb      	bpl.n	800402c <_printf_i+0xb8>
 8004034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004038:	2d00      	cmp	r5, #0
 800403a:	da03      	bge.n	8004044 <_printf_i+0xd0>
 800403c:	232d      	movs	r3, #45	@ 0x2d
 800403e:	426d      	negs	r5, r5
 8004040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004044:	4858      	ldr	r0, [pc, #352]	@ (80041a8 <_printf_i+0x234>)
 8004046:	230a      	movs	r3, #10
 8004048:	e011      	b.n	800406e <_printf_i+0xfa>
 800404a:	6821      	ldr	r1, [r4, #0]
 800404c:	6833      	ldr	r3, [r6, #0]
 800404e:	0608      	lsls	r0, r1, #24
 8004050:	f853 5b04 	ldr.w	r5, [r3], #4
 8004054:	d402      	bmi.n	800405c <_printf_i+0xe8>
 8004056:	0649      	lsls	r1, r1, #25
 8004058:	bf48      	it	mi
 800405a:	b2ad      	uxthmi	r5, r5
 800405c:	2f6f      	cmp	r7, #111	@ 0x6f
 800405e:	4852      	ldr	r0, [pc, #328]	@ (80041a8 <_printf_i+0x234>)
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	bf14      	ite	ne
 8004064:	230a      	movne	r3, #10
 8004066:	2308      	moveq	r3, #8
 8004068:	2100      	movs	r1, #0
 800406a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800406e:	6866      	ldr	r6, [r4, #4]
 8004070:	60a6      	str	r6, [r4, #8]
 8004072:	2e00      	cmp	r6, #0
 8004074:	db05      	blt.n	8004082 <_printf_i+0x10e>
 8004076:	6821      	ldr	r1, [r4, #0]
 8004078:	432e      	orrs	r6, r5
 800407a:	f021 0104 	bic.w	r1, r1, #4
 800407e:	6021      	str	r1, [r4, #0]
 8004080:	d04b      	beq.n	800411a <_printf_i+0x1a6>
 8004082:	4616      	mov	r6, r2
 8004084:	fbb5 f1f3 	udiv	r1, r5, r3
 8004088:	fb03 5711 	mls	r7, r3, r1, r5
 800408c:	5dc7      	ldrb	r7, [r0, r7]
 800408e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004092:	462f      	mov	r7, r5
 8004094:	42bb      	cmp	r3, r7
 8004096:	460d      	mov	r5, r1
 8004098:	d9f4      	bls.n	8004084 <_printf_i+0x110>
 800409a:	2b08      	cmp	r3, #8
 800409c:	d10b      	bne.n	80040b6 <_printf_i+0x142>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	07df      	lsls	r7, r3, #31
 80040a2:	d508      	bpl.n	80040b6 <_printf_i+0x142>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	6861      	ldr	r1, [r4, #4]
 80040a8:	4299      	cmp	r1, r3
 80040aa:	bfde      	ittt	le
 80040ac:	2330      	movle	r3, #48	@ 0x30
 80040ae:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040b2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040b6:	1b92      	subs	r2, r2, r6
 80040b8:	6122      	str	r2, [r4, #16]
 80040ba:	f8cd a000 	str.w	sl, [sp]
 80040be:	464b      	mov	r3, r9
 80040c0:	aa03      	add	r2, sp, #12
 80040c2:	4621      	mov	r1, r4
 80040c4:	4640      	mov	r0, r8
 80040c6:	f7ff fee7 	bl	8003e98 <_printf_common>
 80040ca:	3001      	adds	r0, #1
 80040cc:	d14a      	bne.n	8004164 <_printf_i+0x1f0>
 80040ce:	f04f 30ff 	mov.w	r0, #4294967295
 80040d2:	b004      	add	sp, #16
 80040d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	f043 0320 	orr.w	r3, r3, #32
 80040de:	6023      	str	r3, [r4, #0]
 80040e0:	4832      	ldr	r0, [pc, #200]	@ (80041ac <_printf_i+0x238>)
 80040e2:	2778      	movs	r7, #120	@ 0x78
 80040e4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	6831      	ldr	r1, [r6, #0]
 80040ec:	061f      	lsls	r7, r3, #24
 80040ee:	f851 5b04 	ldr.w	r5, [r1], #4
 80040f2:	d402      	bmi.n	80040fa <_printf_i+0x186>
 80040f4:	065f      	lsls	r7, r3, #25
 80040f6:	bf48      	it	mi
 80040f8:	b2ad      	uxthmi	r5, r5
 80040fa:	6031      	str	r1, [r6, #0]
 80040fc:	07d9      	lsls	r1, r3, #31
 80040fe:	bf44      	itt	mi
 8004100:	f043 0320 	orrmi.w	r3, r3, #32
 8004104:	6023      	strmi	r3, [r4, #0]
 8004106:	b11d      	cbz	r5, 8004110 <_printf_i+0x19c>
 8004108:	2310      	movs	r3, #16
 800410a:	e7ad      	b.n	8004068 <_printf_i+0xf4>
 800410c:	4826      	ldr	r0, [pc, #152]	@ (80041a8 <_printf_i+0x234>)
 800410e:	e7e9      	b.n	80040e4 <_printf_i+0x170>
 8004110:	6823      	ldr	r3, [r4, #0]
 8004112:	f023 0320 	bic.w	r3, r3, #32
 8004116:	6023      	str	r3, [r4, #0]
 8004118:	e7f6      	b.n	8004108 <_printf_i+0x194>
 800411a:	4616      	mov	r6, r2
 800411c:	e7bd      	b.n	800409a <_printf_i+0x126>
 800411e:	6833      	ldr	r3, [r6, #0]
 8004120:	6825      	ldr	r5, [r4, #0]
 8004122:	6961      	ldr	r1, [r4, #20]
 8004124:	1d18      	adds	r0, r3, #4
 8004126:	6030      	str	r0, [r6, #0]
 8004128:	062e      	lsls	r6, r5, #24
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	d501      	bpl.n	8004132 <_printf_i+0x1be>
 800412e:	6019      	str	r1, [r3, #0]
 8004130:	e002      	b.n	8004138 <_printf_i+0x1c4>
 8004132:	0668      	lsls	r0, r5, #25
 8004134:	d5fb      	bpl.n	800412e <_printf_i+0x1ba>
 8004136:	8019      	strh	r1, [r3, #0]
 8004138:	2300      	movs	r3, #0
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	4616      	mov	r6, r2
 800413e:	e7bc      	b.n	80040ba <_printf_i+0x146>
 8004140:	6833      	ldr	r3, [r6, #0]
 8004142:	1d1a      	adds	r2, r3, #4
 8004144:	6032      	str	r2, [r6, #0]
 8004146:	681e      	ldr	r6, [r3, #0]
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	2100      	movs	r1, #0
 800414c:	4630      	mov	r0, r6
 800414e:	f7fc f87f 	bl	8000250 <memchr>
 8004152:	b108      	cbz	r0, 8004158 <_printf_i+0x1e4>
 8004154:	1b80      	subs	r0, r0, r6
 8004156:	6060      	str	r0, [r4, #4]
 8004158:	6863      	ldr	r3, [r4, #4]
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	2300      	movs	r3, #0
 800415e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004162:	e7aa      	b.n	80040ba <_printf_i+0x146>
 8004164:	6923      	ldr	r3, [r4, #16]
 8004166:	4632      	mov	r2, r6
 8004168:	4649      	mov	r1, r9
 800416a:	4640      	mov	r0, r8
 800416c:	47d0      	blx	sl
 800416e:	3001      	adds	r0, #1
 8004170:	d0ad      	beq.n	80040ce <_printf_i+0x15a>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	079b      	lsls	r3, r3, #30
 8004176:	d413      	bmi.n	80041a0 <_printf_i+0x22c>
 8004178:	68e0      	ldr	r0, [r4, #12]
 800417a:	9b03      	ldr	r3, [sp, #12]
 800417c:	4298      	cmp	r0, r3
 800417e:	bfb8      	it	lt
 8004180:	4618      	movlt	r0, r3
 8004182:	e7a6      	b.n	80040d2 <_printf_i+0x15e>
 8004184:	2301      	movs	r3, #1
 8004186:	4632      	mov	r2, r6
 8004188:	4649      	mov	r1, r9
 800418a:	4640      	mov	r0, r8
 800418c:	47d0      	blx	sl
 800418e:	3001      	adds	r0, #1
 8004190:	d09d      	beq.n	80040ce <_printf_i+0x15a>
 8004192:	3501      	adds	r5, #1
 8004194:	68e3      	ldr	r3, [r4, #12]
 8004196:	9903      	ldr	r1, [sp, #12]
 8004198:	1a5b      	subs	r3, r3, r1
 800419a:	42ab      	cmp	r3, r5
 800419c:	dcf2      	bgt.n	8004184 <_printf_i+0x210>
 800419e:	e7eb      	b.n	8004178 <_printf_i+0x204>
 80041a0:	2500      	movs	r5, #0
 80041a2:	f104 0619 	add.w	r6, r4, #25
 80041a6:	e7f5      	b.n	8004194 <_printf_i+0x220>
 80041a8:	080042e5 	.word	0x080042e5
 80041ac:	080042f6 	.word	0x080042f6

080041b0 <memmove>:
 80041b0:	4288      	cmp	r0, r1
 80041b2:	b510      	push	{r4, lr}
 80041b4:	eb01 0402 	add.w	r4, r1, r2
 80041b8:	d902      	bls.n	80041c0 <memmove+0x10>
 80041ba:	4284      	cmp	r4, r0
 80041bc:	4623      	mov	r3, r4
 80041be:	d807      	bhi.n	80041d0 <memmove+0x20>
 80041c0:	1e43      	subs	r3, r0, #1
 80041c2:	42a1      	cmp	r1, r4
 80041c4:	d008      	beq.n	80041d8 <memmove+0x28>
 80041c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ce:	e7f8      	b.n	80041c2 <memmove+0x12>
 80041d0:	4402      	add	r2, r0
 80041d2:	4601      	mov	r1, r0
 80041d4:	428a      	cmp	r2, r1
 80041d6:	d100      	bne.n	80041da <memmove+0x2a>
 80041d8:	bd10      	pop	{r4, pc}
 80041da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041e2:	e7f7      	b.n	80041d4 <memmove+0x24>

080041e4 <_sbrk_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d06      	ldr	r5, [pc, #24]	@ (8004200 <_sbrk_r+0x1c>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	602b      	str	r3, [r5, #0]
 80041f0:	f7fc fb8a 	bl	8000908 <_sbrk>
 80041f4:	1c43      	adds	r3, r0, #1
 80041f6:	d102      	bne.n	80041fe <_sbrk_r+0x1a>
 80041f8:	682b      	ldr	r3, [r5, #0]
 80041fa:	b103      	cbz	r3, 80041fe <_sbrk_r+0x1a>
 80041fc:	6023      	str	r3, [r4, #0]
 80041fe:	bd38      	pop	{r3, r4, r5, pc}
 8004200:	200002e0 	.word	0x200002e0

08004204 <memcpy>:
 8004204:	440a      	add	r2, r1
 8004206:	4291      	cmp	r1, r2
 8004208:	f100 33ff 	add.w	r3, r0, #4294967295
 800420c:	d100      	bne.n	8004210 <memcpy+0xc>
 800420e:	4770      	bx	lr
 8004210:	b510      	push	{r4, lr}
 8004212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800421a:	4291      	cmp	r1, r2
 800421c:	d1f9      	bne.n	8004212 <memcpy+0xe>
 800421e:	bd10      	pop	{r4, pc}

08004220 <_realloc_r>:
 8004220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004224:	4607      	mov	r7, r0
 8004226:	4614      	mov	r4, r2
 8004228:	460d      	mov	r5, r1
 800422a:	b921      	cbnz	r1, 8004236 <_realloc_r+0x16>
 800422c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	4611      	mov	r1, r2
 8004232:	f7ff bc4d 	b.w	8003ad0 <_malloc_r>
 8004236:	b92a      	cbnz	r2, 8004244 <_realloc_r+0x24>
 8004238:	f7ff fbde 	bl	80039f8 <_free_r>
 800423c:	4625      	mov	r5, r4
 800423e:	4628      	mov	r0, r5
 8004240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004244:	f000 f81a 	bl	800427c <_malloc_usable_size_r>
 8004248:	4284      	cmp	r4, r0
 800424a:	4606      	mov	r6, r0
 800424c:	d802      	bhi.n	8004254 <_realloc_r+0x34>
 800424e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004252:	d8f4      	bhi.n	800423e <_realloc_r+0x1e>
 8004254:	4621      	mov	r1, r4
 8004256:	4638      	mov	r0, r7
 8004258:	f7ff fc3a 	bl	8003ad0 <_malloc_r>
 800425c:	4680      	mov	r8, r0
 800425e:	b908      	cbnz	r0, 8004264 <_realloc_r+0x44>
 8004260:	4645      	mov	r5, r8
 8004262:	e7ec      	b.n	800423e <_realloc_r+0x1e>
 8004264:	42b4      	cmp	r4, r6
 8004266:	4622      	mov	r2, r4
 8004268:	4629      	mov	r1, r5
 800426a:	bf28      	it	cs
 800426c:	4632      	movcs	r2, r6
 800426e:	f7ff ffc9 	bl	8004204 <memcpy>
 8004272:	4629      	mov	r1, r5
 8004274:	4638      	mov	r0, r7
 8004276:	f7ff fbbf 	bl	80039f8 <_free_r>
 800427a:	e7f1      	b.n	8004260 <_realloc_r+0x40>

0800427c <_malloc_usable_size_r>:
 800427c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004280:	1f18      	subs	r0, r3, #4
 8004282:	2b00      	cmp	r3, #0
 8004284:	bfbc      	itt	lt
 8004286:	580b      	ldrlt	r3, [r1, r0]
 8004288:	18c0      	addlt	r0, r0, r3
 800428a:	4770      	bx	lr

0800428c <_init>:
 800428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428e:	bf00      	nop
 8004290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004292:	bc08      	pop	{r3}
 8004294:	469e      	mov	lr, r3
 8004296:	4770      	bx	lr

08004298 <_fini>:
 8004298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800429a:	bf00      	nop
 800429c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429e:	bc08      	pop	{r3}
 80042a0:	469e      	mov	lr, r3
 80042a2:	4770      	bx	lr
